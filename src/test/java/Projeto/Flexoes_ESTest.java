/*
 * This file was automatically generated by EvoSuite
 * Wed May 28 22:17:22 GMT 2025
 */

package Projeto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Projeto.BicepCurls;
import Projeto.Flexoes;
import Projeto.Utilizador;
import Projeto.UtilizadorAmador;
import Projeto.UtilizadorPraticanteOcasional;
import Projeto.UtilizadorProfissional;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Flexoes_ESTest extends Flexoes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Flexoes flexoes0 = new Flexoes();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalDate localDate0 = MockLocalDate.from(localDateTime0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("", " bpm", "", 3, 3, 3, localDate0, 'w');
      Flexoes flexoes1 = (Flexoes)flexoes0.geraAtividade(utilizadorPraticanteOcasional0, 1116.83598786623);
      assertEquals(0, flexoes1.getFreqCardiaca());
      assertEquals(452429, flexoes1.getRepeticoes());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      LocalTime localTime0 = MockLocalTime.now();
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      Flexoes flexoes0 = new Flexoes(localDateTime0, localTime0, 1, 7);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("Atividade\nId: 1\nData e hora: 01/01/1970 20:21:21\nDura\u00E7ao: 20:21:21.320\nFrequencia Cardiaca: 1 bpm\nRepeti\u00E7oes: 7\nTipo de atividade: Flex\u00F5es\n", "Atividade\nId: 1\nData e hora: 01/01/1970 20:21:21\nDura\u00E7ao: 20:21:21.320\nFrequencia Cardiaca: 1 bpm\nRepeti\u00E7oes: 7\nTipo de atividade: Flex\u00F5es\n", "jFRLR", 1, 7, 0, localDate0, '\"');
      double double0 = flexoes0.consumoCalorias(utilizadorPraticanteOcasional0);
      assertEquals(645.6615885416666, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Flexoes flexoes0 = new Flexoes();
      Period period0 = Period.ofDays(512);
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours((-1));
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("Plano de Treino\nCodigo de Plano de Treino: ", "\nTipo de atividade: Flex\u00F5es\n", "ID,t", 2955, 2955, (-22), localDate0, 'O');
      flexoes0.setProximoCodigo(0);
      Flexoes flexoes1 = (Flexoes)flexoes0.geraAtividade(utilizadorAmador0, 1213.0903572296);
      assertEquals(0, flexoes1.getFreqCardiaca());
      assertEquals(1018, flexoes1.getRepeticoes());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Flexoes flexoes0 = new Flexoes();
      flexoes0.setProximoCodigo((-1));
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("BBT@hoY_", "O@<$3/.UEr", "\nTipo de atividade: Ciclismo\n", (-1098), (-1098), 0, localDate0, 'H');
      Flexoes flexoes1 = (Flexoes)flexoes0.geraAtividade(utilizadorAmador0, 8.0);
      assertEquals((-17), flexoes1.getRepeticoes());
      assertEquals(0, flexoes1.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now();
      Flexoes flexoes0 = new Flexoes(localDateTime0, localTime0, (-1), (-1));
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      double double0 = flexoes0.consumoCalorias(utilizadorProfissional0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now();
      Flexoes flexoes0 = new Flexoes(localDateTime0, localTime0, (-1), (-1));
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      System.setCurrentTimeMillis(341L);
      double double0 = flexoes0.consumoCalorias(utilizadorProfissional0);
      assertEquals((-391.84979166666665), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      Flexoes flexoes0 = new Flexoes((LocalDateTime) null, localTime0, (-1), (-1));
      // Undeclared exception!
      try { 
        flexoes0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Flexoes flexoes0 = new Flexoes();
      // Undeclared exception!
      try { 
        flexoes0.geraAtividade((Utilizador) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Flexoes", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Flexoes flexoes0 = new Flexoes();
      Object object0 = flexoes0.clone();
      flexoes0.setTempo((LocalTime) null);
      // Undeclared exception!
      try { 
        flexoes0.equals(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Flexoes flexoes0 = new Flexoes();
      flexoes0.setTempo((LocalTime) null);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      // Undeclared exception!
      try { 
        flexoes0.consumoCalorias(utilizadorPraticanteOcasional0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.AtivRepeticoes", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Flexoes flexoes0 = new Flexoes();
      Flexoes flexoes1 = new Flexoes(flexoes0);
      assertEquals(1, flexoes1.getCodAtividade());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Flexoes flexoes0 = new Flexoes();
      boolean boolean0 = flexoes0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Flexoes flexoes0 = new Flexoes();
      boolean boolean0 = flexoes0.equals(flexoes0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      LocalTime localTime0 = MockLocalTime.now();
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      Flexoes flexoes0 = new Flexoes(localDateTime0, localTime0, 1, 7);
      BicepCurls bicepCurls0 = new BicepCurls();
      boolean boolean0 = flexoes0.equals(bicepCurls0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      LocalTime localTime0 = MockLocalTime.now();
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      Flexoes flexoes0 = new Flexoes(localDateTime0, localTime0, 1, 7);
      String string0 = flexoes0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 01/01/1970 20:21:21\nDura\u00E7ao: 20:21:21.320\nFrequencia Cardiaca: 1 bpm\nRepeti\u00E7oes: 7\nTipo de atividade: Flex\u00F5es\n", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Flexoes flexoes0 = new Flexoes();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      // Undeclared exception!
      try { 
        flexoes0.consumoCalorias(utilizadorPraticanteOcasional0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("Projeto.AtivRepeticoes", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Flexoes flexoes0 = null;
      try {
        flexoes0 = new Flexoes((Flexoes) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }
}
