/*
 * This file was automatically generated by EvoSuite
 * Wed May 28 22:04:57 GMT 2025
 */

package Projeto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Projeto.Abdominais;
import Projeto.Atividade;
import Projeto.BenchPress;
import Projeto.BicepCurls;
import Projeto.Btt;
import Projeto.Ciclismo;
import Projeto.Corrida;
import Projeto.Flexoes;
import Projeto.LegPress;
import Projeto.Trail;
import Projeto.Utilizador;
import Projeto.UtilizadorAmador;
import Projeto.UtilizadorProfissional;
import java.time.Clock;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Month;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ThaiBuddhistDate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Atividade_ESTest extends Atividade_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      LocalTime localTime0 = MockLocalTime.now();
      Flexoes flexoes0 = new Flexoes(localDateTime0, localTime0, (-108), (-108));
      int int0 = ciclismo0.compareTo((Atividade) flexoes0);
      assertEquals((-108), flexoes0.getFreqCardiaca());
      assertEquals(2, flexoes0.getCodAtividade());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Flexoes flexoes0 = new Flexoes();
      flexoes0.setFreqCardiaca(70);
      Flexoes flexoes1 = new Flexoes();
      boolean boolean0 = flexoes1.equals(flexoes0);
      assertEquals(70, flexoes0.getFreqCardiaca());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      String string0 = abdominais0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nRepeti\u00E7oes: 0\nTipo de atividade: Abdominais\n", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo((LocalDateTime) null, (LocalTime) null, (-617), 0.0);
      ciclismo0.getTempo();
      assertEquals((-617), ciclismo0.getFreqCardiaca());
      assertEquals(1, ciclismo0.getCodAtividade());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      int int0 = corrida0.getFreqCardiaca();
      assertEquals(0, int0);
      assertEquals(1, corrida0.getCodAtividade());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      BenchPress benchPress0 = new BenchPress(localDateTime0, (LocalTime) null, (-2078), 1016, 2079.71621);
      int int0 = benchPress0.getFreqCardiaca();
      assertEquals((-2078), int0);
      assertEquals(1, benchPress0.getCodAtividade());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      LocalTime localTime0 = MockLocalTime.of(7, 7, 7);
      Flexoes flexoes0 = new Flexoes(localDateTime0, localTime0, 7, 7);
      Clock clock0 = MockClock.system(zoneOffset0);
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("", "\nData e hora: ", "\nData e hora: ", 83, (-1292), (-1), localDate0, '*');
      double double0 = flexoes0.getFatorFreqCardiaca(utilizadorProfissional0);
      assertEquals(3.6, double0, 0.01);
      assertEquals(1, flexoes0.getCodAtividade());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Btt btt0 = new Btt();
      btt0.setFreqCardiaca((-1));
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      double double0 = btt0.getFatorFreqCardiaca(utilizadorAmador0);
      assertEquals((-1), btt0.getFreqCardiaca());
      assertEquals((-0.8), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(1193L);
      Corrida corrida0 = new Corrida((LocalDateTime) null, localTime0, (-815), (-2878.9));
      corrida0.getDataRealizacao();
      assertEquals((-815), corrida0.getFreqCardiaca());
      assertEquals(1, corrida0.getCodAtividade());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      corrida0.setProximoCodigo((-1288));
      Ciclismo ciclismo0 = new Ciclismo();
      int int0 = ciclismo0.getCodAtividade();
      assertEquals((-1288), int0);
      assertEquals(0, ciclismo0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      Atividade atividade0 = ciclismo0.geraAtividade(utilizadorProfissional0, 2686);
      assertEquals(2, atividade0.getCodAtividade());
      assertEquals(0, atividade0.getFreqCardiaca());
      assertEquals(0, ciclismo0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      corrida0.setProximoCodigo((-1288));
      Ciclismo ciclismo0 = new Ciclismo();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      Atividade atividade0 = ciclismo0.geraAtividade(utilizadorProfissional0, 1);
      assertEquals(0, atividade0.getFreqCardiaca());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals((-1287), atividade0.getCodAtividade());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      BicepCurls bicepCurls0 = new BicepCurls();
      legPress0.equals(bicepCurls0);
      assertEquals(2, bicepCurls0.getCodAtividade());
      assertEquals(0, bicepCurls0.getFreqCardiaca());
      assertEquals(1, legPress0.getCodAtividade());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      Btt btt0 = new Btt((LocalDateTime) null, localTime0, (-283), 2.0, 0.0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      double double0 = btt0.consumoCalorias(utilizadorProfissional0);
      assertEquals(-0.0, double0, 0.01);
      assertEquals((-283), btt0.getFreqCardiaca());
      assertEquals(1, btt0.getCodAtividade());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now(clock0);
      LocalDate localDate0 = MockLocalDate.from(thaiBuddhistDate0);
      LocalTime localTime0 = MockLocalTime.of(1, 5, 10);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      Trail trail0 = new Trail(localDateTime0, localTime0, 5, 10, (-35.714803004048));
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("Atividade\nId: 2\nData e hora: 14/02/2014 01:05:10\nDura\u00E7ao: 01:05:10\nFrequencia Cardiaca: 1 bpm\nRepeti\u00E7oes: 10\nTipo de atividade: Abdominais\n", "Atividade\nId: 2\nData e hora: 14/02/2014 01:05:10\nDura\u00E7ao: 01:05:10\nFrequencia Cardiaca: 1 bpm\nRepeti\u00E7oes: 10\nTipo de atividade: Abdominais\n", "PXK_h.AKnMLZle", (-1), 5, 10, localDate0, 'e');
      double double0 = trail0.consumoCalorias(utilizadorProfissional0);
      assertEquals(1, trail0.getCodAtividade());
      assertEquals(5, trail0.getFreqCardiaca());
      assertEquals(11.633830652944637, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      LocalTime localTime0 = MockLocalTime.of(9, 9);
      Trail trail0 = new Trail(localDateTime0, localTime0, 9, (-36), 9);
      Month month0 = Month.JANUARY;
      LocalDate localDate0 = MockLocalDate.of((-962), month0, 16);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nDistancia: 0.0 metros\nTipo de atividade: Ciclismo\n", "Atividade\nId: 3\nData e hora: 15/02/2014 14:21:21\nDura\u00E7ao: 09:09\nFrequencia Cardiaca: 9 bpm\nDistancia: -36.0 metros\nAltimetria: 9.0 metros\nTipo de atividade: Trail\n", "Atividade\nId: 3\nData e hora: 15/02/2014 14:21:21\nDura\u00E7ao: 09:09\nFrequencia Cardiaca: 9 bpm\nDistancia: -36.0 metros\nAltimetria: 9.0 metros\nTipo de atividade: Trail\n", (-3551), 0, 16, localDate0, 'H');
      double double0 = trail0.consumoCalorias(utilizadorProfissional0);
      assertEquals((-1.0336376756197914E7), double0, 0.01);
      assertEquals(1, trail0.getCodAtividade());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      BicepCurls bicepCurls0 = new BicepCurls();
      int int0 = abdominais0.compareTo((Atividade) bicepCurls0);
      assertEquals((-1), int0);
      assertEquals(0, bicepCurls0.getFreqCardiaca());
      assertEquals(1, abdominais0.getCodAtividade());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      Ciclismo ciclismo1 = (Ciclismo)ciclismo0.clone();
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(1, ciclismo1.getCodAtividade());
      assertEquals(0, ciclismo1.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      Corrida corrida0 = new Corrida((LocalDateTime) null, localTime0, (-2092), (-2092));
      // Undeclared exception!
      try { 
        corrida0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      // Undeclared exception!
      try { 
        ciclismo0.getFatorFreqCardiaca(utilizadorAmador0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      // Undeclared exception!
      try { 
        bicepCurls0.geraAtividade((Utilizador) null, (-2584.21914));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.BicepCurls", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      // Undeclared exception!
      try { 
        corrida0.consumoCalorias((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Corrida", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Btt btt0 = new Btt();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      // Undeclared exception!
      try { 
        btt0.consumoCalorias(utilizadorProfissional0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      // Undeclared exception!
      try { 
        ciclismo0.compareTo((Atividade) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      legPress0.getTempo();
      assertEquals(0, legPress0.getFreqCardiaca());
      assertEquals(1, legPress0.getCodAtividade());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      benchPress0.getDataRealizacao();
      assertEquals(1, benchPress0.getCodAtividade());
      assertEquals(0, benchPress0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now(clock0);
      LocalDate localDate0 = MockLocalDate.from(thaiBuddhistDate0);
      LocalTime localTime0 = MockLocalTime.of(1, 5, 10);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      Abdominais abdominais0 = new Abdominais(localDateTime0, localTime0, 1, 10);
      int int0 = abdominais0.getCodAtividade();
      assertEquals(1, int0);
      assertEquals(1, abdominais0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now(clock0);
      LocalDate localDate0 = MockLocalDate.from(thaiBuddhistDate0);
      LocalTime localTime0 = MockLocalTime.of(1, 5, 10);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      Trail trail0 = new Trail(localDateTime0, localTime0, 5, 10, (-35.714803004048));
      int int0 = trail0.getFreqCardiaca();
      assertEquals(5, int0);
      assertEquals(1, trail0.getCodAtividade());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Trail trail0 = new Trail();
      LocalTime localTime0 = MockLocalTime.now();
      trail0.setTempo(localTime0);
      assertEquals(1, trail0.getCodAtividade());
      assertEquals(0, trail0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      int int0 = corrida0.compareTo((Atividade) corrida0);
      assertEquals(0, int0);
      assertEquals(1, corrida0.getCodAtividade());
      assertEquals(0, corrida0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      Clock clock0 = MockClock.tickMinutes(zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      LocalTime localTime0 = MockLocalTime.from(localDateTime0);
      Abdominais abdominais0 = new Abdominais(localDateTime0, localTime0, 1325, 1163);
      Abdominais abdominais1 = new Abdominais();
      int int0 = abdominais1.compareTo((Atividade) abdominais0);
      assertEquals(1325, abdominais0.getFreqCardiaca());
      assertEquals(2, abdominais1.getCodAtividade());
      assertEquals(0, abdominais1.getFreqCardiaca());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      Corrida corrida1 = new Corrida(corrida0);
      assertTrue(corrida1.equals((Object)corrida0));
      
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      corrida1.setDataRealizacao(localDateTime0);
      boolean boolean0 = corrida0.equals(corrida1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      benchPress0.setDataRealizacao((LocalDateTime) null);
      BenchPress benchPress1 = new BenchPress(benchPress0);
      // Undeclared exception!
      try { 
        benchPress1.equals(benchPress0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now();
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, localTime0, 997, 997, 997);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      Atividade atividade0 = bicepCurls0.geraAtividade(utilizadorProfissional0, Double.NaN);
      bicepCurls0.equals(atividade0);
      assertEquals(2, atividade0.getCodAtividade());
      assertEquals(0, atividade0.getFreqCardiaca());
      assertEquals(997, bicepCurls0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Btt btt0 = new Btt();
      // Undeclared exception!
      try { 
        btt0.getFatorFreqCardiaca((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Flexoes flexoes0 = new Flexoes();
      flexoes0.setFreqCardiaca((-3));
      Flexoes flexoes1 = new Flexoes();
      boolean boolean0 = flexoes1.equals(flexoes0);
      assertEquals((-3), flexoes0.getFreqCardiaca());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      BenchPress benchPress1 = new BenchPress(benchPress0);
      boolean boolean0 = benchPress1.equals(benchPress0);
      assertEquals(0, benchPress1.getFreqCardiaca());
      assertEquals(1, benchPress0.getCodAtividade());
      assertEquals(1, benchPress1.getCodAtividade());
      assertTrue(benchPress0.equals((Object)benchPress1));
      assertTrue(boolean0);
  }
}
