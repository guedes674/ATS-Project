/*
 * This file was automatically generated by EvoSuite
 * Wed May 28 22:08:32 GMT 2025
 */

package Projeto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Projeto.Btt;
import Projeto.Ciclismo;
import Projeto.Corrida;
import Projeto.Trail;
import java.time.Clock;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AtivDistancia_ESTest extends AtivDistancia_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      Corrida corrida1 = new Corrida();
      corrida0.setDistancia((-1250.155937853));
      boolean boolean0 = corrida0.equals(corrida1);
      assertEquals((-1250.155937853), corrida0.getDistancia(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      String string0 = corrida0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nDistancia: 0.0 metros\nTipo de atividade: Corrida\n", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      LocalTime localTime0 = MockLocalTime.now();
      corrida0.setTempo(localTime0);
      double double0 = corrida0.getVelocidade();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.from(localDateTime0);
      Btt btt0 = new Btt(localDateTime0, localTime0, 1, 1, (-733.894962485265));
      double double0 = btt0.getVelocidade();
      assertEquals(1.364610199096628E-5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      Trail trail0 = new Trail((LocalDateTime) null, localTime0, 0, (-287.0), 2484.24911);
      double double0 = trail0.getVelocidade();
      assertEquals((-0.0039164312714073226), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Trail trail0 = new Trail();
      LocalTime localTime0 = MockLocalTime.now();
      trail0.setTempo(localTime0);
      double double0 = trail0.getFatorVelocidade(0, (-1.0));
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      corrida0.setDistancia(167.338593826);
      double double0 = corrida0.getFatorVelocidade(1264.119485, 1264.119485);
      assertEquals(167.338593826, corrida0.getDistancia(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      LocalTime localTime0 = MockLocalTime.now(clock0);
      Ciclismo ciclismo0 = new Ciclismo(localDateTime0, localTime0, (-1803), (-1803));
      double double0 = ciclismo0.getFatorVelocidade((-1803), (-1803));
      assertEquals((-3250764.6391288326), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Trail trail0 = new Trail();
      trail0.setDistancia(1330.815);
      double double0 = trail0.getDistancia();
      assertEquals(1330.815, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Trail trail0 = new Trail();
      trail0.setDistancia((-80.00334954297));
      double double0 = trail0.getDistancia();
      assertEquals((-80.00334954297), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      ciclismo0.equals(ciclismo0);
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      DayOfWeek dayOfWeek0 = DayOfWeek.FRIDAY;
      LocalTime localTime0 = MockLocalTime.now();
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      Trail trail0 = new Trail(localDateTime0, localTime0, (-973), (-1535.0), 0.0);
      trail0.equals(dayOfWeek0);
      assertEquals((-1535.0), trail0.getDistancia(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo((LocalDateTime) null, (LocalTime) null, (-2726), 0.0);
      // Undeclared exception!
      try { 
        ciclismo0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      corrida0.setTempo((LocalTime) null);
      // Undeclared exception!
      try { 
        corrida0.getVelocidade();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.AtivDistancia", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo((LocalDateTime) null, (LocalTime) null, (-2726), 0.0);
      // Undeclared exception!
      try { 
        ciclismo0.getFatorVelocidade(0.0, (-1.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.AtivDistancia", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.of(0, 0);
      Btt btt0 = new Btt((LocalDateTime) null, localTime0, 0, 0, 0.0);
      Btt btt1 = new Btt(btt0);
      // Undeclared exception!
      try { 
        btt1.equals(btt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Btt btt0 = new Btt();
      double double0 = btt0.getDistancia();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Trail trail0 = new Trail();
      LocalTime localTime0 = MockLocalTime.now();
      Trail trail1 = new Trail(localDateTime0, localTime0, (-1313676972), (-1313676972), 64800);
      trail0.equals(trail1);
      assertEquals((-1.313676972E9), trail1.getDistancia(), 0.01);
      assertEquals(0.0, trail0.getDistancia(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      Corrida corrida1 = new Corrida(corrida0);
      boolean boolean0 = corrida1.equals(corrida0);
      assertEquals(0.0, corrida0.getDistancia(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      Corrida corrida1 = new Corrida(corrida0);
      corrida0.setDistancia(2069.427285381238);
      boolean boolean0 = corrida0.equals(corrida1);
      assertEquals(2069.427285381238, corrida0.getDistancia(), 0.01);
      assertFalse(boolean0);
  }
}
