/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 15:29:23 GMT 2025
 */

package Projeto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Projeto.Ciclismo;
import Projeto.Corrida;
import Projeto.Trail;
import java.time.Clock;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AtivDistancia_ESTest extends AtivDistancia_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Trail trail0 = new Trail();
      trail0.setDistancia(123.0);
      Trail trail1 = new Trail();
      boolean boolean0 = trail0.equals(trail1);
      assertEquals(123.0, trail0.getDistancia(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      Clock clock0 = MockClock.systemDefaultZone();
      LocalTime localTime0 = MockLocalTime.now(clock0);
      corrida0.setTempo(localTime0);
      double double0 = corrida0.getVelocidade();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(5, 5);
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(123L, 5, zoneOffset0);
      LocalTime localTime0 = MockLocalTime.now();
      Trail trail0 = new Trail(localDateTime0, localTime0, 5, 123L, (-1.0));
      double double0 = trail0.getVelocidade();
      assertEquals(0.0016784705448888524, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      assertEquals(0.0, corrida0.getDistancia(), 0.01);
      
      corrida0.setDistancia((-1));
      double double0 = corrida0.getVelocidade();
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(0);
      Clock clock0 = MockClock.system(zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      Trail trail0 = new Trail(localDateTime0, localTime0, 3763, 2629.794436986, (-1178.11041102));
      double double0 = trail0.getFatorVelocidade(6.0, 0.0);
      assertEquals(-0.0, double0, 0.01);
      assertEquals(2629.794436986, trail0.getDistancia(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Clock clock0 = MockClock.systemDefaultZone();
      LocalTime localTime0 = MockLocalTime.now(clock0);
      Corrida corrida0 = new Corrida(localDateTime0, localTime0, (-810), (-1));
      double double0 = corrida0.getFatorVelocidade(402.1973132056947, (-1249.034242));
      assertEquals(502358.2332787601, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(0);
      Clock clock0 = MockClock.system(zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      Trail trail0 = new Trail(localDateTime0, localTime0, 3763, 2629.794436986, (-1178.11041102));
      double double0 = trail0.getFatorVelocidade(77, 1.05);
      assertEquals((-80.8123192347425), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      ciclismo0.setDistancia(1.5);
      double double0 = ciclismo0.getDistancia();
      assertEquals(1.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Clock clock0 = MockClock.systemDefaultZone();
      LocalTime localTime0 = MockLocalTime.now(clock0);
      Corrida corrida0 = new Corrida(localDateTime0, localTime0, (-810), (-1));
      double double0 = corrida0.getDistancia();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      corrida0.setDataRealizacao((LocalDateTime) null);
      // Undeclared exception!
      try { 
        corrida0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      corrida0.setTempo((LocalTime) null);
      // Undeclared exception!
      try { 
        corrida0.getVelocidade();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.AtivDistancia", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      corrida0.setTempo((LocalTime) null);
      // Undeclared exception!
      try { 
        corrida0.getFatorVelocidade(3133, 124.5347440872);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.AtivDistancia", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      Corrida corrida1 = new Corrida(corrida0);
      corrida1.setDataRealizacao((LocalDateTime) null);
      // Undeclared exception!
      try { 
        corrida1.equals(corrida0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      double double0 = ciclismo0.getDistancia();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      Clock clock0 = MockClock.systemDefaultZone();
      LocalTime localTime0 = MockLocalTime.now(clock0);
      Object object0 = corrida0.clone();
      assertTrue(object0.equals((Object)corrida0));
      
      corrida0.setTempo(localTime0);
      boolean boolean0 = corrida0.equals(object0);
      assertFalse(object0.equals((Object)corrida0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      Corrida corrida1 = new Corrida(corrida0);
      boolean boolean0 = corrida1.equals(corrida0);
      assertEquals(0.0, corrida0.getDistancia(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      Corrida corrida1 = new Corrida(corrida0);
      corrida0.setDistancia(2142036742);
      boolean boolean0 = corrida1.equals(corrida0);
      assertEquals(2.142036742E9, corrida0.getDistancia(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      String string0 = corrida0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nDistancia: 0.0 metros\nTipo de atividade: Corrida\n", string0);
  }
}
