/*
 * This file was automatically generated by EvoSuite
 * Wed May 28 22:12:06 GMT 2025
 */

package Projeto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Projeto.Abdominais;
import Projeto.Atividade;
import Projeto.BenchPress;
import Projeto.Utilizador;
import Projeto.UtilizadorAmador;
import Projeto.UtilizadorPraticanteOcasional;
import java.time.Clock;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BenchPress_ESTest extends BenchPress_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      LocalTime localTime0 = MockLocalTime.of(4, 4);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      BenchPress benchPress0 = new BenchPress(localDateTime0, localTime0, 4, 4, 4);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      utilizadorPraticanteOcasional0.setPeso(1005.86589);
      utilizadorPraticanteOcasional0.addAtividade(benchPress0);
      BenchPress benchPress1 = (BenchPress)benchPress0.geraAtividade(utilizadorPraticanteOcasional0, 4);
      assertEquals(3.2, benchPress1.getPeso(), 0.01);
      assertEquals(1, benchPress1.getRepeticoes());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      LocalTime localTime0 = MockLocalTime.of(4, 4);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      BenchPress benchPress0 = new BenchPress(localDateTime0, localTime0, 4, 4, 4);
      benchPress0.setPeso((-1998.151623653));
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      utilizadorPraticanteOcasional0.addAtividade(benchPress0);
      BenchPress benchPress1 = (BenchPress)benchPress0.geraAtividade(utilizadorPraticanteOcasional0, 4);
      assertEquals((-1598.5212989224), benchPress1.getPeso(), 0.01);
      assertEquals(536870911, benchPress1.getRepeticoes());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      benchPress0.setProximoCodigo(0);
      Period period0 = Period.ZERO;
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nRepeti\u00E7oes: 0\nPeso: 0.0 kilos\nTipo de atividade: Bench press\n", "O&Z\".uDH", "Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nRepeti\u00E7oes: 0\nPeso: 0.0 kilos\nTipo de atividade: Bench press\n", 0, 0, 0, localDate0, '5');
      Atividade atividade0 = benchPress0.geraAtividade(utilizadorPraticanteOcasional0, 0.0);
      assertTrue(atividade0.equals((Object)benchPress0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      benchPress0.setProximoCodigo((-1240));
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(0);
      Clock clock0 = MockClock.tickSeconds(zoneOffset0);
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("]K XO>", "\"vl2nznZv3=Hr`", "]K XO>", (-1240), 0, 0, localDate0, 'N');
      Atividade atividade0 = benchPress0.geraAtividade(utilizadorAmador0, (-1240));
      assertTrue(atividade0.equals((Object)benchPress0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      LocalTime localTime0 = MockLocalTime.of(4, 4);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      BenchPress benchPress0 = new BenchPress(localDateTime0, localTime0, 4, 4, 4);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      utilizadorPraticanteOcasional0.setPeso(1005.86589);
      double double0 = benchPress0.consumoCalorias(utilizadorPraticanteOcasional0);
      assertEquals(2050.682865222221, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(1);
      Clock clock0 = MockClock.system(zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      BenchPress benchPress0 = new BenchPress(localDateTime0, localTime0, 1, (-195225787), 1214.4382258);
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("\nTipo de atividade: Bench press\n", (String) null, "P[~-0\",^", (-1), 1, 1, localDate0, 'h');
      double double0 = benchPress0.consumoCalorias(utilizadorAmador0);
      assertEquals((-16002.492855092793), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.ofNanoOfDay(1L);
      BenchPress benchPress0 = new BenchPress((LocalDateTime) null, localTime0, 0, 0, 0.0);
      // Undeclared exception!
      try { 
        benchPress0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      // Undeclared exception!
      try { 
        benchPress0.geraAtividade((Utilizador) null, (-176.1079488409));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.BenchPress", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      benchPress0.setTempo((LocalTime) null);
      Object object0 = benchPress0.clone();
      // Undeclared exception!
      try { 
        benchPress0.equals(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      // Undeclared exception!
      try { 
        benchPress0.consumoCalorias((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.BenchPress", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      // Undeclared exception!
      try { 
        benchPress0.consumoCalorias(utilizadorAmador0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("Projeto.AtivRepeticoes", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BenchPress benchPress0 = null;
      try {
        benchPress0 = new BenchPress((BenchPress) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      BenchPress benchPress1 = new BenchPress(benchPress0);
      assertEquals(0, benchPress1.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      Abdominais abdominais0 = new Abdominais();
      boolean boolean0 = benchPress0.equals(abdominais0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      Object object0 = benchPress0.clone();
      boolean boolean0 = benchPress0.equals(object0);
      assertTrue(boolean0);
      assertNotSame(object0, benchPress0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      boolean boolean0 = benchPress0.equals(benchPress0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      boolean boolean0 = benchPress0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      LocalTime localTime0 = MockLocalTime.of(4, 4);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      BenchPress benchPress0 = new BenchPress(localDateTime0, localTime0, 4, 4, 4);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      utilizadorPraticanteOcasional0.setPeso(1005.86589);
      BenchPress benchPress1 = (BenchPress)benchPress0.geraAtividade(utilizadorPraticanteOcasional0, 4);
      assertEquals(1, benchPress1.getRepeticoes());
      assertEquals(1005.86589, benchPress1.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      LocalTime localTime0 = MockLocalTime.of(19, 19);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      BenchPress benchPress0 = new BenchPress(localDateTime0, localTime0, 19, 19, 19);
      String string0 = benchPress0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 19:19:00\nDura\u00E7ao: 19:19\nFrequencia Cardiaca: 19 bpm\nRepeti\u00E7oes: 19\nPeso: 19.0 kilos\nTipo de atividade: Bench press\n", string0);
  }
}
