/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 15:32:56 GMT 2025
 */

package Projeto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Projeto.BenchPress;
import Projeto.LegPress;
import Projeto.Utilizador;
import Projeto.UtilizadorAmador;
import Projeto.UtilizadorPraticanteOcasional;
import Projeto.UtilizadorProfissional;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Month;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BenchPress_ESTest extends BenchPress_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Month month0 = Month.DECEMBER;
      LocalDateTime localDateTime0 = MockLocalDateTime.of(0, month0, 1, 1, 1, 0);
      LocalTime localTime0 = MockLocalTime.of(0, 1);
      BenchPress benchPress0 = new BenchPress(localDateTime0, localTime0, 1, 0, 1);
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("~74Q~V=t3i\"", "~74Q~V=t3i\"", "~74Q~V=t3i\"", 0, (-2224), 'I', localDate0, 'I');
      utilizadorPraticanteOcasional0.addAtividade(benchPress0);
      BenchPress benchPress1 = (BenchPress)benchPress0.geraAtividade(utilizadorPraticanteOcasional0, 0);
      assertEquals(0.8, benchPress1.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Month month0 = Month.DECEMBER;
      LocalDateTime localDateTime0 = MockLocalDateTime.of(0, month0, 1, 1, 1, 0);
      LocalTime localTime0 = MockLocalTime.of(0, 1);
      BenchPress benchPress0 = new BenchPress(localDateTime0, localTime0, 1, 0, 1);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      benchPress0.setPeso((-1680.9880016955));
      utilizadorPraticanteOcasional0.addAtividade(benchPress0);
      BenchPress benchPress1 = (BenchPress)benchPress0.geraAtividade(utilizadorPraticanteOcasional0, 0);
      assertEquals((-1344.7904013564003), benchPress1.getPeso(), 0.01);
      assertEquals(0, benchPress1.getRepeticoes());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-2263));
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("", (String) null, "", (-2263), (-2263), (-1015), localDate0, '\'');
      benchPress0.setProximoCodigo(0);
      BenchPress benchPress1 = (BenchPress)benchPress0.geraAtividade(utilizadorProfissional0, (-1419.14773));
      assertEquals((-2263.0), benchPress1.getPeso(), 0.01);
      assertEquals(177, benchPress1.getRepeticoes());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      LegPress legPress0 = new LegPress();
      legPress0.setProximoCodigo((-1388));
      LocalDate localDate0 = MockLocalDate.ofYearDay(4095, 1);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("", "k", "k", 77, 1, 4095, localDate0, 'G');
      BenchPress benchPress1 = (BenchPress)benchPress0.geraAtividade(utilizadorPraticanteOcasional0, 1);
      assertEquals(1.0, benchPress1.getPeso(), 0.01);
      assertEquals(0, benchPress1.getRepeticoes());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Month month0 = Month.JANUARY;
      LocalDateTime localDateTime0 = MockLocalDateTime.of(0, month0, 1, 1, 1, 0);
      LocalTime localTime0 = MockLocalTime.of(0, 1);
      BenchPress benchPress0 = new BenchPress(localDateTime0, localTime0, 1, 0, 0);
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("~74Q~V=t3i\"", "~74Q~V=t3i\"", "~74Q~V=t3i\"", 0, 1, 6, localDate0, 'I');
      double double0 = benchPress0.consumoCalorias(utilizadorPraticanteOcasional0);
      assertEquals(0.03958333333333331, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Month month0 = Month.DECEMBER;
      LocalDateTime localDateTime0 = MockLocalDateTime.of(0, month0, 1, 1, 1, 0);
      LocalTime localTime0 = MockLocalTime.of(0, 1);
      BenchPress benchPress0 = new BenchPress(localDateTime0, localTime0, 1, 0, 1);
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("~74Q~V=t3i\"", "~74Q~V=t3i\"", "~74Q~V=t3i\"", 0, (-2224), 'I', localDate0, 'I');
      double double0 = benchPress0.consumoCalorias(utilizadorPraticanteOcasional0);
      assertEquals((-18.14768341576738), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.of(7, 7, 7, 7);
      BenchPress benchPress0 = new BenchPress((LocalDateTime) null, localTime0, 0, 88, 7);
      // Undeclared exception!
      try { 
        benchPress0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      // Undeclared exception!
      try { 
        benchPress0.geraAtividade((Utilizador) null, 985.743393263266);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.BenchPress", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      benchPress0.setTempo((LocalTime) null);
      Object object0 = benchPress0.clone();
      // Undeclared exception!
      try { 
        benchPress0.equals(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      // Undeclared exception!
      try { 
        benchPress0.consumoCalorias((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.BenchPress", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      // Undeclared exception!
      try { 
        benchPress0.consumoCalorias(utilizadorAmador0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("Projeto.AtivRepeticoes", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BenchPress benchPress0 = null;
      try {
        benchPress0 = new BenchPress((BenchPress) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      BenchPress benchPress1 = new BenchPress(benchPress0);
      assertEquals(0.0, benchPress1.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      boolean boolean0 = benchPress0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      Object object0 = benchPress0.clone();
      boolean boolean0 = benchPress0.equals(object0);
      assertNotSame(object0, benchPress0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      boolean boolean0 = benchPress0.equals(benchPress0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      boolean boolean0 = benchPress0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.of(3, 3, 3, 3, 3, 3, 3);
      LocalTime localTime0 = MockLocalTime.of(3, 3);
      BenchPress benchPress0 = new BenchPress(localDateTime0, localTime0, 3, 3, 3);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      double double0 = benchPress0.consumoCalorias(utilizadorPraticanteOcasional0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      String string0 = benchPress0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nRepeti\u00E7oes: 0\nPeso: 0.0 kilos\nTipo de atividade: Bench press\n", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.of(3, 3, 3, 3, 3, 3, 3);
      LocalTime localTime0 = MockLocalTime.of(3, 3);
      BenchPress benchPress0 = new BenchPress(localDateTime0, localTime0, 3, 3, 3);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      BenchPress benchPress1 = (BenchPress)benchPress0.geraAtividade(utilizadorPraticanteOcasional0, 3);
      assertEquals(0, benchPress1.getRepeticoes());
      assertEquals(0.0, benchPress1.getPeso(), 0.01);
  }
}
