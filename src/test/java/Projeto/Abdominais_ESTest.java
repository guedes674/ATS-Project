/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 15:38:56 GMT 2025
 */

package Projeto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Projeto.Abdominais;
import Projeto.BicepCurls;
import Projeto.Utilizador;
import Projeto.UtilizadorAmador;
import Projeto.UtilizadorProfissional;
import java.time.Clock;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Abdominais_ESTest extends Abdominais_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.from(localDateTime0);
      Abdominais abdominais0 = new Abdominais(localDateTime0, localTime0, 1910, 1910);
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 20:21:21.320\nFrequencia Cardiaca: 1910 bpm\nRepeti\u00E7oes: 1910\nTipo de atividade: Abdominais\n", "Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 20:21:21.320\nFrequencia Cardiaca: 1910 bpm\nRepeti\u00E7oes: 1910\nTipo de atividade: Abdominais\n", "3)qBHP?ZE~O'TJi^^", 1910, (-1953), 1910, localDate0, 'H');
      Abdominais abdominais1 = (Abdominais)abdominais0.geraAtividade(utilizadorProfissional0, 1157.879248839593);
      assertEquals((-2928), abdominais1.getRepeticoes());
      assertEquals(0, abdominais1.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      BicepCurls bicepCurls0 = new BicepCurls();
      bicepCurls0.setProximoCodigo(0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      Abdominais abdominais1 = (Abdominais)abdominais0.geraAtividade(utilizadorProfissional0, 1710.015);
      assertEquals(Integer.MAX_VALUE, abdominais1.getRepeticoes());
      assertEquals(0, abdominais1.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(968L);
      abdominais0.setProximoCodigo((-179));
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador(",XeC3<", ",XeC3<", "", 1, (-1), (-1), localDate0, 'I');
      Abdominais abdominais1 = (Abdominais)abdominais0.geraAtividade(utilizadorAmador0, 968L);
      assertEquals(143888, abdominais1.getRepeticoes());
      assertEquals(0, abdominais1.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.from(localDateTime0);
      Abdominais abdominais0 = new Abdominais(localDateTime0, localTime0, 1910, 1910);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      double double0 = abdominais0.consumoCalorias(utilizadorProfissional0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.from(localDateTime0);
      Abdominais abdominais0 = new Abdominais(localDateTime0, localTime0, 1910, 1910);
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 20:21:21.320\nFrequencia Cardiaca: 1910 bpm\nRepeti\u00E7oes: 1910\nTipo de atividade: Abdominais\n", "Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 20:21:21.320\nFrequencia Cardiaca: 1910 bpm\nRepeti\u00E7oes: 1910\nTipo de atividade: Abdominais\n", "3)qBHP?ZE~O'TJi^^", 1910, 77, 1910, localDate0, '~');
      double double0 = abdominais0.consumoCalorias(utilizadorProfissional0);
      assertEquals(29100.572109375, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.from(localDateTime0);
      Abdominais abdominais0 = new Abdominais(localDateTime0, localTime0, 1910, 1910);
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 20:21:21.320\nFrequencia Cardiaca: 1910 bpm\nRepeti\u00E7oes: 1910\nTipo de atividade: Abdominais\n", "Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 20:21:21.320\nFrequencia Cardiaca: 1910 bpm\nRepeti\u00E7oes: 1910\nTipo de atividade: Abdominais\n", "3)qBHP?ZE~O'TJi^^", 1910, (-1953), 1910, localDate0, 'H');
      double double0 = abdominais0.consumoCalorias(utilizadorProfissional0);
      assertEquals((-17387.062265625), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais((LocalDateTime) null, (LocalTime) null, (-1999), 534);
      // Undeclared exception!
      try { 
        abdominais0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      // Undeclared exception!
      try { 
        abdominais0.geraAtividade((Utilizador) null, 86400.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Abdominais", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      Object object0 = abdominais0.clone();
      abdominais0.setDataRealizacao((LocalDateTime) null);
      // Undeclared exception!
      try { 
        abdominais0.equals(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      // Undeclared exception!
      try { 
        abdominais0.consumoCalorias((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Abdominais", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Abdominais abdominais0 = null;
      try {
        abdominais0 = new Abdominais((Abdominais) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      Abdominais abdominais1 = new Abdominais(abdominais0);
      assertEquals(1, abdominais1.getCodAtividade());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      boolean boolean0 = abdominais0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now();
      Abdominais abdominais0 = new Abdominais(localDateTime0, localTime0, 1949, 1949);
      boolean boolean0 = abdominais0.equals(abdominais0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now();
      Abdominais abdominais0 = new Abdominais(localDateTime0, localTime0, 1949, 1949);
      boolean boolean0 = abdominais0.equals(localDateTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now();
      Abdominais abdominais0 = new Abdominais(localDateTime0, localTime0, 1949, 1949);
      String string0 = abdominais0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 20:21:21.320\nFrequencia Cardiaca: 1949 bpm\nRepeti\u00E7oes: 1949\nTipo de atividade: Abdominais\n", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional((String) null, "sUg $24r~i~@O16F;{", "\nTipo de atividade: Flex\u00F5es\n", 0, 2954, 0, (LocalDate) null, '#');
      // Undeclared exception!
      try { 
        abdominais0.consumoCalorias(utilizadorProfissional0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("Projeto.AtivRepeticoes", e);
      }
  }
}
