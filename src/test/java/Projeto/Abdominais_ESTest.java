/*
 * This file was automatically generated by EvoSuite
 * Wed May 28 22:18:06 GMT 2025
 */

package Projeto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Projeto.Abdominais;
import Projeto.Atividade;
import Projeto.LegPress;
import Projeto.Utilizador;
import Projeto.UtilizadorPraticanteOcasional;
import Projeto.UtilizadorProfissional;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Month;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Abdominais_ESTest extends Abdominais_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(0L);
      Abdominais abdominais0 = new Abdominais(localDateTime0, localTime0, (-65), (-65));
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("|ZiT.Ji$**Ro", "|ZiT.Ji$**Ro", "|ZiT.Ji$**Ro", (-65), (-65), (-65), localDate0, ')');
      Abdominais abdominais1 = (Abdominais)abdominais0.geraAtividade(utilizadorPraticanteOcasional0, 1.0);
      assertEquals(0, abdominais1.getFreqCardiaca());
      assertEquals((-21), abdominais1.getRepeticoes());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Month month0 = Month.DECEMBER;
      LocalDateTime localDateTime0 = MockLocalDateTime.of(4, month0, 4, 4, 4);
      LocalTime localTime0 = MockLocalTime.now();
      Abdominais abdominais0 = new Abdominais(localDateTime0, localTime0, 4, 4);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      Atividade atividade0 = abdominais0.geraAtividade(utilizadorPraticanteOcasional0, 4);
      assertEquals(0, atividade0.getFreqCardiaca());
      
      atividade0.setFreqCardiaca((-1415));
      double double0 = atividade0.consumoCalorias(utilizadorPraticanteOcasional0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      abdominais0.setProximoCodigo(0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      Abdominais abdominais1 = (Abdominais)abdominais0.geraAtividade(utilizadorProfissional0, 0.2);
      assertEquals(Integer.MAX_VALUE, abdominais1.getRepeticoes());
      assertEquals(0, abdominais1.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      abdominais0.setProximoCodigo((-964));
      Atividade atividade0 = abdominais0.geraAtividade(utilizadorProfissional0, 0.0);
      assertTrue(atividade0.equals((Object)abdominais0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Month month0 = Month.DECEMBER;
      LocalDateTime localDateTime0 = MockLocalDateTime.of(4, month0, 4, 4, 4);
      LocalTime localTime0 = MockLocalTime.now();
      Abdominais abdominais0 = new Abdominais(localDateTime0, localTime0, 4, 4);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      utilizadorPraticanteOcasional0.setPeso(4);
      double double0 = abdominais0.consumoCalorias(utilizadorPraticanteOcasional0);
      assertEquals(25.444791666666667, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Month month0 = Month.APRIL;
      LocalDateTime localDateTime0 = MockLocalDateTime.of(1, month0, 1, 1, 1);
      LocalTime localTime0 = MockLocalTime.now();
      Abdominais abdominais0 = new Abdominais(localDateTime0, localTime0, 4754, (-4352));
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("\nTipo de atividade: Abdominais\n", "\nTipo de atividade: Abdominais\n", "\nTipo de atividade: Abdominais\n", 0, 70, (-4352), localDate0, 'x');
      double double0 = abdominais0.consumoCalorias(utilizadorPraticanteOcasional0);
      assertEquals((-16857.174479166664), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais((LocalDateTime) null, (LocalTime) null, 77, 178);
      // Undeclared exception!
      try { 
        abdominais0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      // Undeclared exception!
      try { 
        abdominais0.consumoCalorias(utilizadorProfissional0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("Projeto.AtivRepeticoes", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Abdominais abdominais0 = null;
      try {
        abdominais0 = new Abdominais((Abdominais) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      Abdominais abdominais1 = new Abdominais(abdominais0);
      assertEquals(1, abdominais1.getCodAtividade());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(1836L);
      Abdominais abdominais0 = new Abdominais((LocalDateTime) null, localTime0, 318, 0);
      Object object0 = abdominais0.clone();
      // Undeclared exception!
      try { 
        abdominais0.equals(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      boolean boolean0 = abdominais0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(1836L);
      Abdominais abdominais0 = new Abdominais((LocalDateTime) null, localTime0, 318, 0);
      boolean boolean0 = abdominais0.equals(abdominais0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Month month0 = Month.DECEMBER;
      LocalDateTime localDateTime0 = MockLocalDateTime.of(4, month0, 4, 4, 4);
      LocalTime localTime0 = MockLocalTime.now();
      Abdominais abdominais0 = new Abdominais(localDateTime0, localTime0, 4, 4);
      LegPress legPress0 = new LegPress();
      boolean boolean0 = abdominais0.equals(legPress0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Month month0 = Month.DECEMBER;
      LocalDateTime localDateTime0 = MockLocalDateTime.of(4, month0, 4, 4, 4);
      LocalTime localTime0 = MockLocalTime.now();
      Abdominais abdominais0 = new Abdominais(localDateTime0, localTime0, 4, 4);
      String string0 = abdominais0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 04/12/0004 04:04:00\nDura\u00E7ao: 20:21:21.320\nFrequencia Cardiaca: 4 bpm\nRepeti\u00E7oes: 4\nTipo de atividade: Abdominais\n", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      // Undeclared exception!
      try { 
        abdominais0.geraAtividade((Utilizador) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Abdominais", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      // Undeclared exception!
      try { 
        abdominais0.consumoCalorias((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Abdominais", e);
      }
  }
}
