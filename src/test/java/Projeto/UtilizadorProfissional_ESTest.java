/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 15:36:43 GMT 2025
 */

package Projeto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Projeto.UtilizadorProfissional;
import java.time.LocalDate;
import java.time.Month;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.MinguoDate;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UtilizadorProfissional_ESTest extends UtilizadorProfissional_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("Projeto.UtilizadorProfissional", "JW{yZ", "JW{yZ", 0, 0, 0, localDate0, 'U');
      LocalDate localDate1 = MockLocalDate.now();
      Object object0 = utilizadorProfissional0.utilizadorNumPeriodo(localDate1, localDate0);
      assertNotSame(object0, utilizadorProfissional0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("", "", "", (-1555), (-1555), 1352, (LocalDate) null, '+');
      // Undeclared exception!
      try { 
        utilizadorProfissional0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      utilizadorProfissional0.setDataNascimento((LocalDate) null);
      Object object0 = utilizadorProfissional0.clone();
      // Undeclared exception!
      try { 
        utilizadorProfissional0.equals(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Month month0 = Month.MAY;
      LocalDate localDate0 = MockLocalDate.of(3456, month0, 4);
      UtilizadorProfissional utilizadorProfissional0 = null;
      try {
        utilizadorProfissional0 = new UtilizadorProfissional((UtilizadorProfissional) null, localDate0, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = null;
      try {
        utilizadorProfissional0 = new UtilizadorProfissional((UtilizadorProfissional) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional(utilizadorProfissional0);
      assertTrue(utilizadorProfissional1.equals((Object)utilizadorProfissional0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      MinguoDate minguoDate0 = MockMinguoDate.now((ZoneId) zoneOffset0);
      LocalDate localDate0 = MockLocalDate.from(minguoDate0);
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional(utilizadorProfissional0, localDate0, localDate0);
      assertTrue(utilizadorProfissional1.equals((Object)utilizadorProfissional0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("Projeto.UtilizadorProfissional", "JW{yZ", "JW{yZ", 0, 0, 0, localDate0, 'U');
      Object object0 = utilizadorProfissional0.clone();
      utilizadorProfissional0.equals(object0);
      assertNotSame(object0, utilizadorProfissional0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = utilizadorProfissional0.equals(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      boolean boolean0 = utilizadorProfissional0.equals(utilizadorProfissional0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      boolean boolean0 = utilizadorProfissional0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("Projeto.UtilizadorProfissional", "JW{yZ", "JW{yZ", 0, 0, 0, localDate0, 'U');
      String string0 = utilizadorProfissional0.toString();
      assertEquals("Utilizador\nCodigo de Utilizador: 1\nNome: Projeto.UtilizadorProfissional\nMorada: JW{yZ\nEmail: JW{yZ\nFrequencia Cardiaca: 0 bpm\nPeso: 0.0 kilos\nAltura: 0 centimetros\nData de nascimento 01/01/1970\nIdade: 44 anos\nGenero: U\nAtividades: \n\nPlanos de treino: \n\nTipo de Utilizador: Profissional\n", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      double double0 = utilizadorProfissional0.getFatorMultiplicativo();
      assertEquals(1.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("OT=D!'<b~`4rTAn", "OT=D!'<b~`4rTAn", "OT=D!'<b~`4rTAn", (-1), 0, 0, (LocalDate) null, 'N');
      // Undeclared exception!
      try { 
        utilizadorProfissional0.utilizadorNumPeriodo((LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }
}
