/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 15:32:02 GMT 2025
 */

package Projeto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Projeto.Atividade;
import Projeto.Trail;
import Projeto.Utilizador;
import Projeto.UtilizadorAmador;
import Projeto.UtilizadorProfissional;
import java.time.Clock;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Trail_ESTest extends Trail_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Trail trail0 = new Trail();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("T&^##\"&TpyJ(Iu&6k", "T&^##\"&TpyJ(Iu&6k", "T&^##\"&TpyJ(Iu&6k", 0, 0, 0, localDate0, '3');
      Trail trail1 = (Trail)trail0.geraAtividade(utilizadorProfissional0, (-1943.1989731306));
      assertEquals(0, trail1.getFreqCardiaca());
      assertEquals(0.0, trail1.getFatorAltimetria(), 0.01);
      assertEquals((-111927.20000000001), trail1.getDistancia(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Trail trail0 = new Trail();
      assertEquals(1.15, trail0.getFatorHard(), 0.01);
      
      trail0.setAltimetria(2000.0);
      double double0 = trail0.getFatorHard();
      assertEquals(1.25, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      Clock clock0 = MockClock.systemUTC();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      Trail trail0 = new Trail(localDateTime0, localTime0, (-104), (-104), 1000.0);
      double double0 = trail0.getFatorHard();
      assertEquals(1.15, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.from(zonedDateTime0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      Trail trail0 = new Trail(localDateTime0, localTime0, 5, (-3836.32), 5);
      String string0 = trail0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 20:21:21.320\nFrequencia Cardiaca: 5 bpm\nDistancia: -3836.32 metros\nAltimetria: 5.0 metros\nTipo de atividade: Trail\n", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Trail trail0 = new Trail();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      trail0.setProximoCodigo((-1));
      Atividade atividade0 = trail0.geraAtividade(utilizadorProfissional0, (-1151.5307));
      Trail trail1 = (Trail)trail0.geraAtividade(utilizadorProfissional0, 0.22);
      assertEquals(0, trail1.getFreqCardiaca());
      assertEquals(4.724464023400001E9, trail1.getDistancia(), 0.01);
      assertFalse(trail1.equals((Object)atividade0));
      assertEquals(0.0, trail1.getFatorAltimetria(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1L);
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalTime localTime0 = MockLocalTime.now(zoneId0);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      Trail trail0 = new Trail(localDateTime0, localTime0, 5, 5, 10.0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador(")>jm?ru+#~ui5<pq-M", "", ")>jm?ru+#~ui5<pq-M", 5, 5, 5, localDate0, 'r');
      double double0 = trail0.consumoCalorias(utilizadorAmador0);
      assertEquals(355.5836504846641, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.from(zonedDateTime0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      Trail trail0 = new Trail(localDateTime0, localTime0, 5, (-3836.32), 5);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      utilizadorAmador0.setPeso(163.9592);
      double double0 = trail0.consumoCalorias(utilizadorAmador0);
      assertEquals((-4686.022382324138), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      Trail trail0 = new Trail((LocalDateTime) null, localTime0, 589, 589, 589);
      // Undeclared exception!
      try { 
        trail0.geraAtividade((Utilizador) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Trail", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Trail trail0 = new Trail();
      trail0.setTempo((LocalTime) null);
      Trail trail1 = new Trail();
      // Undeclared exception!
      try { 
        trail0.equals(trail1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.from(zonedDateTime0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      Trail trail0 = new Trail(localDateTime0, localTime0, 5, (-3836.32), 5);
      // Undeclared exception!
      try { 
        trail0.consumoCalorias((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Trail", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Trail trail0 = new Trail();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      // Undeclared exception!
      try { 
        trail0.consumoCalorias(utilizadorProfissional0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Trail trail0 = null;
      try {
        trail0 = new Trail((Trail) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Trail trail0 = new Trail();
      Trail trail1 = new Trail(trail0);
      assertTrue(trail1.equals((Object)trail0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Trail trail0 = new Trail();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      Trail trail1 = (Trail)trail0.geraAtividade(utilizadorProfissional0, (-1151.5307));
      boolean boolean0 = trail0.equals(trail1);
      assertEquals((-4.7244640256E9), trail1.getDistancia(), 0.01);
      assertFalse(boolean0);
      assertEquals(0, trail1.getFreqCardiaca());
      assertEquals(0.0, trail1.getAltimetria(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Trail trail0 = new Trail();
      boolean boolean0 = trail0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Trail trail0 = new Trail();
      boolean boolean0 = trail0.equals(trail0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Trail trail0 = new Trail();
      Object object0 = new Object();
      boolean boolean0 = trail0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Trail trail0 = new Trail();
      trail0.setAltimetria(86365.709);
      double double0 = trail0.getFatorHard();
      assertEquals(1.35, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Trail trail0 = new Trail();
      assertEquals(1.15, trail0.getFatorHard(), 0.01);
      
      trail0.setAltimetria(1290);
      double double0 = trail0.getFatorHard();
      assertEquals(1.25, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(3141L);
      Trail trail0 = new Trail((LocalDateTime) null, localTime0, 5, 0.0, 2.2);
      Object object0 = trail0.clone();
      assertNotSame(object0, trail0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(3141L);
      Trail trail0 = new Trail((LocalDateTime) null, localTime0, 5, 0.0, 2.2);
      // Undeclared exception!
      try { 
        trail0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now();
      Trail trail0 = new Trail(localDateTime0, localTime0, (-13), (-13), (-13));
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      double double0 = trail0.consumoCalorias(utilizadorAmador0);
      assertEquals(-0.0, double0, 0.01);
      assertEquals(1.15, trail0.getFatorHard(), 0.01);
  }
}
