/*
 * This file was automatically generated by EvoSuite
 * Wed May 28 22:11:13 GMT 2025
 */

package Projeto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Projeto.BicepCurls;
import Projeto.Trail;
import Projeto.Utilizador;
import Projeto.UtilizadorAmador;
import Projeto.UtilizadorPraticanteOcasional;
import Projeto.UtilizadorProfissional;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Period;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Trail_ESTest extends Trail_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Trail trail0 = new Trail();
      Period period0 = Period.ofWeeks(0);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("B[Xt!CWM`eE[\"JPL", "B[Xt!CWM`eE[\"JPL", "Zjz)0?-0p", 3920, 3920, 3920, localDate0, 'x');
      Trail trail1 = (Trail)trail0.geraAtividade(utilizadorProfissional0, 0);
      assertEquals(0.0, trail1.getDistancia(), 0.01);
      assertEquals(0.0, trail1.getFatorAltimetria(), 0.01);
      assertTrue(trail1.equals((Object)trail0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(1803L);
      Trail trail0 = new Trail(localDateTime0, localTime0, 1938, 2.0, 1938);
      trail0.setAltimetria(2000.0);
      double double0 = trail0.getFatorHard();
      assertEquals(1.25, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Trail trail0 = new Trail();
      trail0.setAltimetria(1000.0);
      double double0 = trail0.getFatorHard();
      assertEquals(1.15, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Trail trail0 = new Trail();
      trail0.setProximoCodigo(0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      Trail trail1 = (Trail)trail0.geraAtividade(utilizadorAmador0, 0.0);
      assertEquals(0.0, trail1.getDistancia(), 0.01);
      assertEquals(0.0, trail1.getFatorAltimetria(), 0.01);
      assertTrue(trail1.equals((Object)trail0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Trail trail0 = new Trail();
      trail0.setProximoCodigo((-2703));
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      Trail trail1 = (Trail)trail0.geraAtividade(utilizadorAmador0, 1.15);
      assertEquals(4.724464023400001E9, trail1.getDistancia(), 0.01);
      assertEquals(0, trail1.getFreqCardiaca());
      assertEquals(0.0, trail1.getAltimetria(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(7L);
      Trail trail0 = new Trail(localDateTime0, localTime0, 1879, 1.7723734958460704, 2481.95195);
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("92^)S", "92^)S", (String) null, (-2147083050), 1879, 1879, localDate0, '$');
      double double0 = trail0.consumoCalorias(utilizadorAmador0);
      assertEquals((-1.5264381305040272E7), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Trail trail0 = new Trail((LocalDateTime) null, (LocalTime) null, 0, 2000.0, 1114.78235);
      // Undeclared exception!
      try { 
        trail0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Trail trail0 = new Trail();
      // Undeclared exception!
      try { 
        trail0.geraAtividade((Utilizador) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Trail", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Trail trail0 = new Trail();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      BicepCurls bicepCurls0 = new BicepCurls();
      utilizadorPraticanteOcasional0.addAtividade(bicepCurls0);
      // Undeclared exception!
      try { 
        trail0.geraAtividade(utilizadorPraticanteOcasional0, (-1957.427));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Projeto.BicepCurls cannot be cast to Projeto.Trail
         //
         verifyException("Projeto.Trail", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond((-1816L), 1428, zoneOffset0);
      Trail trail0 = new Trail(localDateTime0, (LocalTime) null, 1428, 1577.180528415118, (-1726.8983943618));
      Object object0 = trail0.clone();
      // Undeclared exception!
      try { 
        trail0.equals(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Trail trail0 = new Trail();
      // Undeclared exception!
      try { 
        trail0.consumoCalorias((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Trail", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Trail trail0 = new Trail();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      // Undeclared exception!
      try { 
        trail0.consumoCalorias(utilizadorAmador0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Trail trail0 = null;
      try {
        trail0 = new Trail((Trail) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(1803L);
      Trail trail0 = new Trail(localDateTime0, localTime0, 1938, 2.0, 1938);
      double double0 = trail0.getFatorHard();
      assertEquals(1.25, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Trail trail0 = new Trail();
      Trail trail1 = new Trail(trail0);
      boolean boolean0 = trail0.equals(trail1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Trail trail0 = new Trail();
      boolean boolean0 = trail0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Trail trail0 = new Trail();
      boolean boolean0 = trail0.equals(trail0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(1803L);
      Trail trail0 = new Trail(localDateTime0, localTime0, 1938, 2.0, 1938);
      boolean boolean0 = trail0.equals(localTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Trail trail0 = new Trail();
      trail0.setAltimetria(2416.522489768069);
      double double0 = trail0.getFatorHard();
      assertEquals(1.35, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Trail trail0 = new Trail();
      double double0 = trail0.getFatorHard();
      assertEquals(1.15, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(1803L);
      Trail trail0 = new Trail(localDateTime0, localTime0, 1938, 2.0, 1938);
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("92^)S", "92^)S", "92^)S", 343, 1938, 1938, localDate0, 'I');
      double double0 = trail0.consumoCalorias(utilizadorAmador0);
      assertEquals(5629.170469835069, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(1803L);
      Trail trail0 = new Trail(localDateTime0, localTime0, 1938, 2.0, 1938);
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("92^)S", "92^)S", "92^)S", 343, 1938, 1938, localDate0, 'I');
      Trail trail1 = (Trail)trail0.geraAtividade(utilizadorAmador0, 0.014994162741283932);
      assertEquals(0, trail1.getFreqCardiaca());
      assertEquals(0.0, trail1.getDistancia(), 0.01);
      assertEquals(0.0, trail1.getFatorAltimetria(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(1803L);
      Trail trail0 = new Trail(localDateTime0, localTime0, 1938, 2.0, 1938);
      String string0 = trail0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:30:03\nFrequencia Cardiaca: 1938 bpm\nDistancia: 2.0 metros\nAltimetria: 1938.0 metros\nTipo de atividade: Trail\n", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now();
      Trail trail0 = new Trail(localDateTime0, localTime0, 1985, 1985, 1985);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      double double0 = trail0.consumoCalorias(utilizadorAmador0);
      assertEquals(1.25, trail0.getFatorHard(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }
}
