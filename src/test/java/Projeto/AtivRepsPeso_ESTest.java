/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 15:33:49 GMT 2025
 */

package Projeto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Projeto.BenchPress;
import Projeto.BicepCurls;
import Projeto.LegPress;
import Projeto.Utilizador;
import Projeto.UtilizadorAmador;
import Projeto.UtilizadorProfissional;
import java.time.Clock;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ThaiBuddhistDate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AtivRepsPeso_ESTest extends AtivRepsPeso_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      BicepCurls bicepCurls1 = new BicepCurls(bicepCurls0);
      bicepCurls1.setPeso(497.3656293968136);
      boolean boolean0 = bicepCurls1.equals(bicepCurls0);
      assertEquals(497.3656293968136, bicepCurls1.getPeso(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      double double0 = bicepCurls0.getFatorPeso(utilizadorProfissional0, 0.0, 0.0);
      assertEquals(0.0, bicepCurls0.getPeso(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds((-1), (-1), (-1));
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      LocalTime localTime0 = MockLocalTime.from(localDateTime0);
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, localTime0, (-1), (-1), 2000.0);
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "@rTo3i/", "@rTo3i/", (-1), (-1), 0, localDate0, 'M');
      double double0 = bicepCurls0.getFatorPeso(utilizadorAmador0, 0, 2000.0);
      assertEquals((-4000000.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      String string0 = legPress0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nRepeti\u00E7oes: 0\nPeso: 0.0 kilos\nTipo de atividade: Leg press\n", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(328L);
      BenchPress benchPress0 = new BenchPress((LocalDateTime) null, localTime0, 0, (-2146698779), 328L);
      double double0 = benchPress0.getPeso();
      assertEquals(328.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, localTime0, (-1617), 1, (-1617));
      double double0 = bicepCurls0.getPeso();
      assertEquals((-1617.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("", "", "[3VY^b68oy]HI#;", 3194, 3194, 0, localDate0, '_');
      double double0 = bicepCurls0.getFatorPeso(utilizadorProfissional0, (-3538.5), 0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, bicepCurls0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(3050);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("3oky;%UAp${B>_+q", "\nDistancia: ", "3oky;%UAp${B>_+q", 7, 3050, (-457), localDate0, '&');
      double double0 = benchPress0.getFatorPeso(utilizadorAmador0, 1897.986797589685, (-3436.966037));
      assertEquals(6523316.1619901415, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      benchPress0.equals(benchPress0);
      assertEquals(0.0, benchPress0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      legPress0.equals(thaiBuddhistDate0);
      assertEquals(0.0, legPress0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      benchPress0.setDataRealizacao((LocalDateTime) null);
      // Undeclared exception!
      try { 
        benchPress0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LegPress legPress0 = new LegPress();
      LegPress legPress1 = new LegPress(localDateTime0, (LocalTime) null, 2126834766, (-423), 2126834766);
      // Undeclared exception!
      try { 
        legPress1.equals(legPress0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      double double0 = bicepCurls0.getPeso();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LegPress legPress0 = new LegPress();
      LegPress legPress1 = new LegPress(localDateTime0, (LocalTime) null, 2126834766, (-423), 2126834766);
      boolean boolean0 = legPress0.equals(legPress1);
      assertEquals(0.0, legPress0.getPeso(), 0.01);
      assertFalse(boolean0);
      assertEquals(2.126834766E9, legPress1.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      BicepCurls bicepCurls1 = new BicepCurls(bicepCurls0);
      boolean boolean0 = bicepCurls1.equals(bicepCurls0);
      assertEquals(0.0, bicepCurls0.getPeso(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      // Undeclared exception!
      try { 
        benchPress0.getFatorPeso((Utilizador) null, 0.0, 559.135);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.AtivRepsPeso", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      BicepCurls bicepCurls1 = new BicepCurls(bicepCurls0);
      bicepCurls0.setPeso('z');
      boolean boolean0 = bicepCurls1.equals(bicepCurls0);
      assertEquals(122.0, bicepCurls0.getPeso(), 0.01);
      assertFalse(boolean0);
  }
}
