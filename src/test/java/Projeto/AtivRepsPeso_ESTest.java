/*
 * This file was automatically generated by EvoSuite
 * Wed May 28 22:12:59 GMT 2025
 */

package Projeto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Projeto.BenchPress;
import Projeto.BicepCurls;
import Projeto.LegPress;
import Projeto.Utilizador;
import Projeto.UtilizadorAmador;
import Projeto.UtilizadorPraticanteOcasional;
import Projeto.UtilizadorProfissional;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AtivRepsPeso_ESTest extends AtivRepsPeso_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      legPress0.setPeso(6.0);
      LegPress legPress1 = new LegPress();
      boolean boolean0 = legPress0.equals(legPress1);
      assertEquals(6.0, legPress0.getPeso(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      double double0 = legPress0.getFatorPeso(utilizadorPraticanteOcasional0, 184, 184);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.ofNanoOfDay(2356L);
      LegPress legPress0 = new LegPress((LocalDateTime) null, localTime0, (-1401), 0, 4854.878224405074);
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("$l1g}n<{_", " metros", " metros", (-1614), 1, 0, localDate0, '`');
      double double0 = legPress0.getFatorPeso(utilizadorAmador0, 0, (-734.842354482));
      assertEquals((-3567570.1451452165), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      LegPress legPress0 = new LegPress(localDateTime0, localTime0, (-3035), 3382, 20.0);
      double double0 = legPress0.getPeso();
      assertEquals(20.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now();
      BenchPress benchPress0 = new BenchPress(localDateTime0, localTime0, (-216), (-1351), (-1351));
      double double0 = benchPress0.getPeso();
      assertEquals((-1351.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalDate localDate0 = MockLocalDate.now(zoneId0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("Projeto.AtivRepsPeso", "Projeto.AtivRepsPeso", "/)`)vz9z4u|o,J", (-410), (-410), 0, localDate0, '`');
      double double0 = legPress0.getFatorPeso(utilizadorProfissional0, 0, 0);
      assertEquals(0.0, legPress0.getPeso(), 0.01);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-496));
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador((String) null, (String) null, (String) null, (-496), (-496), (-496), localDate0, 't');
      double double0 = bicepCurls0.getFatorPeso(utilizadorAmador0, 2388.58309938, (-496));
      assertEquals(1184737.21729248, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.ofNanoOfDay(2356L);
      LegPress legPress0 = new LegPress((LocalDateTime) null, localTime0, (-1401), 0, 4854.878224405074);
      // Undeclared exception!
      try { 
        legPress0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      double double0 = benchPress0.getPeso();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(8L);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nRepeti\u00E7oes: 0\nPeso: 0.0 kilos\nTipo de atividade: Leg press\n", "Projeto.AtivRepsPeso", "Projeto.AtivRepsPeso", 688, 0, 0, localDate0, '8');
      LegPress legPress1 = (LegPress)legPress0.geraAtividade(utilizadorPraticanteOcasional0, 0);
      boolean boolean0 = legPress0.equals(legPress1);
      assertTrue(boolean0);
      assertEquals(0.0, legPress1.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      LocalTime localTime0 = MockLocalTime.ofNanoOfDay(2356L);
      LegPress legPress1 = new LegPress((LocalDateTime) null, localTime0, (-1401), 0, 4854.878224405074);
      boolean boolean0 = legPress0.equals(legPress1);
      assertEquals(0.0, legPress0.getPeso(), 0.01);
      assertFalse(boolean0);
      assertEquals(4854.878224405074, legPress1.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      String string0 = legPress0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nRepeti\u00E7oes: 0\nPeso: 0.0 kilos\nTipo de atividade: Leg press\n", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      // Undeclared exception!
      try { 
        bicepCurls0.getFatorPeso((Utilizador) null, 2388.58309938, (-496));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.AtivRepsPeso", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      BicepCurls bicepCurls1 = new BicepCurls(bicepCurls0);
      bicepCurls0.setPeso((-11.919793401));
      boolean boolean0 = bicepCurls0.equals(bicepCurls1);
      assertEquals((-11.919793401), bicepCurls0.getPeso(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.ofNanoOfDay(2356L);
      LegPress legPress0 = new LegPress((LocalDateTime) null, localTime0, (-1401), 0, 4854.878224405074);
      Object object0 = legPress0.clone();
      // Undeclared exception!
      try { 
        object0.equals(legPress0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }
}
