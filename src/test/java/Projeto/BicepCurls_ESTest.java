/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 15:26:43 GMT 2025
 */

package Projeto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Projeto.Atividade;
import Projeto.BicepCurls;
import Projeto.Utilizador;
import Projeto.UtilizadorAmador;
import Projeto.UtilizadorPraticanteOcasional;
import Projeto.UtilizadorProfissional;
import java.time.Clock;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BicepCurls_ESTest extends BicepCurls_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(374L);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, localTime0, 77, 1310, 0.22);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("\nData de realiza\u00E7ao: ", "Projeto.Btt", "Eif?NQ\f'{djxWn/Q", 867, 689, 1310, localDate0, '>');
      utilizadorAmador0.addAtividade(bicepCurls0);
      BicepCurls bicepCurls1 = (BicepCurls)bicepCurls0.geraAtividade(utilizadorAmador0, 867);
      assertEquals(0.17600000000000002, bicepCurls1.getPeso(), 0.01);
      assertEquals(310, bicepCurls1.getRepeticoes());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      bicepCurls0.setProximoCodigo(0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      Atividade atividade0 = bicepCurls0.geraAtividade(utilizadorProfissional0, 0);
      assertTrue(atividade0.equals((Object)bicepCurls0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      bicepCurls0.setProximoCodigo((-2284));
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1L));
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("Projeto.AtivRepeticoes", "Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nRepeti\u00E7oes: 0\nPeso: 0.0 kilos\nTipo de atividade: Bicep curls\n", "Projeto.AtivRepeticoes", 6, 6, 6, localDate0, 'v');
      BicepCurls bicepCurls1 = (BicepCurls)bicepCurls0.geraAtividade(utilizadorPraticanteOcasional0, 6);
      assertEquals(80, bicepCurls1.getRepeticoes());
      assertEquals(6.0, bicepCurls1.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now();
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, localTime0, (-1), (-2798), 4.0);
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("\nTipo de Utilizador: Praticante Ocasional\n", "", "", 5, 5, 5, localDate0, '?');
      double double0 = bicepCurls0.consumoCalorias(utilizadorProfissional0);
      assertEquals((-347.32140625000005), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls((LocalDateTime) null, (LocalTime) null, (-2530), (-1), (-2281.1652107));
      // Undeclared exception!
      try { 
        bicepCurls0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      bicepCurls0.setTempo((LocalTime) null);
      BicepCurls bicepCurls1 = new BicepCurls(bicepCurls0);
      // Undeclared exception!
      try { 
        bicepCurls1.equals(bicepCurls0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      // Undeclared exception!
      try { 
        bicepCurls0.consumoCalorias((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.BicepCurls", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1L));
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("Projeto.AtivRepeticoes", "Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nRepeti\u00E7oes: 0\nPeso: 0.0 kilos\nTipo de atividade: Bicep curls\n", "Projeto.AtivRepeticoes", 6, 6, 6, localDate0, 'v');
      // Undeclared exception!
      try { 
        bicepCurls0.consumoCalorias(utilizadorPraticanteOcasional0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("Projeto.AtivRepeticoes", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BicepCurls bicepCurls0 = null;
      try {
        bicepCurls0 = new BicepCurls((BicepCurls) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(374L);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, localTime0, 77, 1310, 0.22);
      Object object0 = bicepCurls0.clone();
      assertNotSame(object0, bicepCurls0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, localTime0, (-158645191), (-158645191), (-158645191));
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      BicepCurls bicepCurls1 = (BicepCurls)bicepCurls0.geraAtividade(utilizadorAmador0, (-158645191));
      boolean boolean0 = bicepCurls1.equals(bicepCurls0);
      assertEquals(0.0, bicepCurls1.getPeso(), 0.01);
      assertFalse(boolean0);
      assertEquals(0, bicepCurls1.getRepeticoes());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      boolean boolean0 = bicepCurls0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      boolean boolean0 = bicepCurls0.equals(bicepCurls0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, localTime0, (-158645191), (-158645191), (-158645191));
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      boolean boolean0 = bicepCurls0.equals(utilizadorAmador0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional((String) null, "'U_'|1d!)6aLJLj", "", (-747), (-747), (-747), (LocalDate) null, 'L');
      // Undeclared exception!
      try { 
        bicepCurls0.geraAtividade(utilizadorProfissional0, (-747));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, localTime0, (-158645191), (-158645191), (-158645191));
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      utilizadorAmador0.addAtividade(bicepCurls0);
      BicepCurls bicepCurls1 = (BicepCurls)bicepCurls0.geraAtividade(utilizadorAmador0, (-158645191));
      assertEquals((-536870912), bicepCurls1.getRepeticoes());
      assertEquals((-1.2691615280000001E8), bicepCurls1.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, localTime0, (-158645191), (-158645191), (-158645191));
      String string0 = bicepCurls0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 20:21:21.320\nFrequencia Cardiaca: -158645191 bpm\nRepeti\u00E7oes: -158645191\nPeso: -1.58645191E8 kilos\nTipo de atividade: Bicep curls\n", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(374L);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, localTime0, 77, 1310, (-0.4746173372855996));
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("\nData de realiza\u00E7ao: ", "\nData de realiza\u00E7ao: ", "Eif?NQ\f'{djxWn/Q", 867, 689, 1310, localDate0, '>');
      double double0 = bicepCurls0.consumoCalorias(utilizadorAmador0);
      assertEquals(1441.002010884113, double0, 0.01);
  }
}
