/*
 * This file was automatically generated by EvoSuite
 * Wed May 28 22:05:51 GMT 2025
 */

package Projeto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Projeto.Atividade;
import Projeto.BicepCurls;
import Projeto.UtilizadorAmador;
import Projeto.UtilizadorPraticanteOcasional;
import Projeto.UtilizadorProfissional;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BicepCurls_ESTest extends BicepCurls_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.of(1, 1, 1);
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, localTime0, 1, 7, 1);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      utilizadorProfissional0.addAtividade(bicepCurls0);
      utilizadorProfissional0.setPeso(0.8);
      BicepCurls bicepCurls1 = (BicepCurls)bicepCurls0.geraAtividade(utilizadorProfissional0, 4.0);
      assertEquals(1483, bicepCurls1.getRepeticoes());
      assertEquals(0.8, bicepCurls1.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now();
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, localTime0, (-13), (-13), (-13));
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      utilizadorProfissional0.addAtividade(bicepCurls0);
      BicepCurls bicepCurls1 = (BicepCurls)bicepCurls0.geraAtividade(utilizadorProfissional0, (-13));
      assertEquals((-536870912), bicepCurls1.getRepeticoes());
      assertEquals((-10.4), bicepCurls1.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("Projeto.LegPress", "]qpBtT-)nK<Vg%Cm", "Projeto.LegPress", (-370), (-370), (-370), localDate0, 'x');
      bicepCurls0.setProximoCodigo(0);
      BicepCurls bicepCurls1 = (BicepCurls)bicepCurls0.geraAtividade(utilizadorPraticanteOcasional0, 1937.3664);
      assertEquals((-370.0), bicepCurls1.getPeso(), 0.01);
      assertEquals((-1392), bicepCurls1.getRepeticoes());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      bicepCurls0.setProximoCodigo((-370));
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("Projeto.LegPress", "]qpBtT-)nK<Vg%Cm", "Projeto.LegPress", (-370), (-370), (-370), localDate0, 'x');
      BicepCurls bicepCurls1 = (BicepCurls)bicepCurls0.geraAtividade(utilizadorPraticanteOcasional0, 22.0);
      assertEquals((-370.0), bicepCurls1.getPeso(), 0.01);
      assertEquals((-15), bicepCurls1.getRepeticoes());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.of(1, 1, 1);
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, localTime0, 1, 1, 1);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      utilizadorProfissional0.setAltura(1);
      double double0 = bicepCurls0.consumoCalorias(utilizadorProfissional0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.of(1, 1, 1);
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, localTime0, 1, 7, 1);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      System.setCurrentTimeMillis(0);
      double double0 = bicepCurls0.consumoCalorias(utilizadorAmador0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      BicepCurls bicepCurls0 = new BicepCurls((LocalDateTime) null, localTime0, 330, 330, 330);
      // Undeclared exception!
      try { 
        bicepCurls0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      Atividade atividade0 = bicepCurls0.geraAtividade(utilizadorAmador0, 2577.161129);
      bicepCurls0.setDataRealizacao((LocalDateTime) null);
      // Undeclared exception!
      try { 
        bicepCurls0.equals(atividade0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.of(1, 1, 1);
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, localTime0, 1, 7, 1);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "", "", 7, 7, (-2518), (LocalDate) null, '{');
      // Undeclared exception!
      try { 
        bicepCurls0.consumoCalorias(utilizadorAmador0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.of(1, 1, 1);
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, localTime0, 1, 7, 1);
      bicepCurls0.setFreqCardiaca(0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "", "", 7, 7, (-2518), (LocalDate) null, '{');
      // Undeclared exception!
      try { 
        bicepCurls0.consumoCalorias(utilizadorAmador0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.of(1, 1, 1);
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, localTime0, 1, 7, 1);
      BicepCurls bicepCurls1 = new BicepCurls(bicepCurls0);
      assertEquals(1, bicepCurls1.getCodAtividade());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.of(1, 1, 1);
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, localTime0, 1, 7, 1);
      Object object0 = bicepCurls0.clone();
      assertNotSame(object0, bicepCurls0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      Atividade atividade0 = bicepCurls0.geraAtividade(utilizadorAmador0, 2577.161129);
      boolean boolean0 = bicepCurls0.equals(atividade0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      boolean boolean0 = bicepCurls0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      boolean boolean0 = bicepCurls0.equals(bicepCurls0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.of(1, 1, 1);
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, localTime0, 1, 7, 1);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "", "", 7, 7, (-2518), (LocalDate) null, '{');
      // Undeclared exception!
      try { 
        bicepCurls0.geraAtividade(utilizadorAmador0, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.of(1, 1, 1);
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, localTime0, 1, 7, 1);
      String string0 = bicepCurls0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 01:01:01\nFrequencia Cardiaca: 1 bpm\nRepeti\u00E7oes: 7\nPeso: 1.0 kilos\nTipo de atividade: Bicep curls\n", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.of(1, 1, 1);
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, localTime0, 1, 7, 1);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      double double0 = bicepCurls0.consumoCalorias(utilizadorProfissional0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      Double double0 = new Double((-2690.310758317));
      boolean boolean0 = bicepCurls0.equals(double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BicepCurls bicepCurls0 = null;
      try {
        bicepCurls0 = new BicepCurls((BicepCurls) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }
}
