/*
 * This file was automatically generated by EvoSuite
 * Wed May 28 22:09:25 GMT 2025
 */

package Projeto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Projeto.Btt;
import Projeto.Trail;
import java.time.Clock;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneOffset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AtivDistAltimetria_ESTest extends AtivDistAltimetria_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(673L);
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(7L);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      Btt btt0 = new Btt(localDateTime0, localTime0, (-161), 7L, (-161));
      Btt btt1 = new Btt(btt0);
      assertEquals((-0.0805), btt1.getFatorAltimetria(), 0.01);
      
      btt1.setAltimetria(7L);
      boolean boolean0 = btt1.equals(btt0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Btt btt0 = new Btt();
      String string0 = btt0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nDistancia: 0.0 metros\nAltimetria: 0.0 metros\nTipo de atividade: BTT\n", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(3103L);
      Trail trail0 = new Trail((LocalDateTime) null, localTime0, 0, (-2010.2774115068), 3103L);
      double double0 = trail0.getFatorAltimetria();
      assertEquals(1.5515, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.from(localDateTime0);
      Trail trail0 = new Trail(localDateTime0, localTime0, (-4412), (-740.64), (-4412));
      double double0 = trail0.getFatorAltimetria();
      assertEquals((-2.206), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Btt btt0 = new Btt();
      double double0 = btt0.getAltimetria();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      LocalDateTime localDateTime0 = MockLocalDateTime.ofInstant(instant0, zoneOffset0);
      Clock clock0 = MockClock.systemUTC();
      LocalTime localTime0 = MockLocalTime.now(clock0);
      Btt btt0 = new Btt(localDateTime0, localTime0, 2577, 2577, 5.0E-4);
      double double0 = btt0.getAltimetria();
      assertEquals(5.0E-4, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(673L);
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(7L);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      Trail trail0 = new Trail(localDateTime0, localTime0, (-161), 31.784, 7L);
      trail0.equals(trail0);
      assertEquals(0.0035, trail0.getFatorAltimetria(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Btt btt0 = new Btt();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.from(localDateTime0);
      Trail trail0 = new Trail(localDateTime0, localTime0, (-4412), (-740.64), (-4412));
      btt0.equals(trail0);
      assertEquals(0.0, btt0.getFatorAltimetria(), 0.01);
      assertEquals((-2.206), trail0.getFatorAltimetria(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(1372L);
      Trail trail0 = new Trail((LocalDateTime) null, localTime0, 6, 0.0, 1372L);
      // Undeclared exception!
      try { 
        trail0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(2971L);
      Trail trail0 = new Trail((LocalDateTime) null, localTime0, (-2720), (-781.5), 3492.3169);
      Trail trail1 = new Trail(trail0);
      // Undeclared exception!
      try { 
        trail1.equals(trail0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.from(localDateTime0);
      Trail trail0 = new Trail(localDateTime0, localTime0, (-4412), (-740.64), (-4412));
      double double0 = trail0.getAltimetria();
      assertEquals((-4412.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Btt btt0 = new Btt();
      Btt btt1 = new Btt(btt0);
      assertTrue(btt1.equals((Object)btt0));
      
      btt1.setFreqCardiaca(9);
      boolean boolean0 = btt0.equals(btt1);
      assertFalse(btt1.equals((Object)btt0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Btt btt0 = new Btt();
      Btt btt1 = new Btt(btt0);
      boolean boolean0 = btt0.equals(btt1);
      assertTrue(boolean0);
      assertEquals(0.0, btt1.getFatorAltimetria(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Btt btt0 = new Btt(localDateTime0, localTime0, 2143898508, 1926L, 2143898508);
      Btt btt1 = new Btt(btt0);
      assertEquals(2.143898508E9, btt1.getAltimetria(), 0.01);
      
      btt1.setAltimetria(1926L);
      boolean boolean0 = btt1.equals(btt0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Btt btt0 = new Btt();
      double double0 = btt0.getFatorAltimetria();
      assertEquals(0.0, double0, 0.01);
  }
}
