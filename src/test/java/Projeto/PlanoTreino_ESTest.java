/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 15:21:47 GMT 2025
 */

package Projeto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Projeto.Abdominais;
import Projeto.Atividade;
import Projeto.BenchPress;
import Projeto.Ciclismo;
import Projeto.Corrida;
import Projeto.Flexoes;
import Projeto.LegPress;
import Projeto.PlanoTreino;
import Projeto.Trail;
import Projeto.Utilizador;
import Projeto.UtilizadorAmador;
import Projeto.UtilizadorPraticanteOcasional;
import Projeto.UtilizadorProfissional;
import java.time.DateTimeException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Month;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.HijrahDate;
import java.time.chrono.IsoChronology;
import java.time.format.DateTimeParseException;
import java.time.temporal.TemporalAccessor;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.function.Function;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PlanoTreino_ESTest extends PlanoTreino_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      planoTreino0.getCodPlano();
      Abdominais abdominais0 = new Abdominais();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(0, abdominais0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      planoTreino_AtividadeIteracoes1.setIteracoes((-4483));
      planoTreino_AtividadeIteracoes1.equals(planoTreino_AtividadeIteracoes0);
      planoTreino_AtividadeIteracoes1.getAtividade();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      planoTreino0.caloriasDispendidas(utilizadorAmador0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 5;
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(5, 5);
      ZoneId.from(zoneOffset0);
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      ZoneOffset.ofHours(5);
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      planoTreino0.setDataRealizacao(localDate0);
      List<PlanoTreino.AtividadeIteracoes> list0 = planoTreino0.getAtividadesNumPeriodo(localDate0, localDate0);
      Abdominais abdominais0 = new Abdominais();
      planoTreino0.addAtividade(abdominais0, 5);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(5, abdominais0);
      planoTreino_AtividadeIteracoes0.setAtividade(abdominais0);
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) planoTreino_AtividadeIteracoes0);
      Trail trail0 = new Trail();
      zoneOffset0.equals(planoTreino0);
      Trail trail1 = new Trail(trail0);
      LocalDate localDate1 = MockLocalDate.of(5, 5, 5);
      planoTreino0.planoTreinoNumPeriodo(localDate1, localDate0);
      List<Atividade> list1 = planoTreino0.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
      planoTreino_AtividadeIteracoes0.equals(list0);
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0, localDate0, localDate0);
      planoTreino0.addAtividade(abdominais0, 5);
      planoTreino0.compareTo(planoTreino1);
      planoTreino0.getCodPlano();
      planoTreino_AtividadeIteracoes0.setAtividade(abdominais0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional1 = new UtilizadorPraticanteOcasional();
      int int1 = 77;
      planoTreino1.geraPlanoTreino(utilizadorPraticanteOcasional1, list1, 5, (-729), 587.462751, localDate0);
      // Undeclared exception!
      try { 
        planoTreino0.caloriasDispendidas((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Abdominais", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-55L));
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      PlanoTreino planoTreino1 = new PlanoTreino();
      planoTreino1.getAtividades();
      planoTreino0.compareTo(planoTreino1);
      System.setCurrentTimeMillis((-1865L));
      planoTreino1.compareTo(planoTreino0);
      planoTreino0.setDataRealizacao(localDate0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional((String) null, "", "", (-45), (-398), 3774, localDate0, 'e');
      planoTreino1.caloriasDispendidas(utilizadorPraticanteOcasional0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-55L));
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      PlanoTreino planoTreino1 = new PlanoTreino();
      planoTreino1.getAtividades();
      planoTreino0.compareTo(planoTreino1);
      System.setCurrentTimeMillis((-1865L));
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional((String) null, "", "", (-45), (-398), 3774, localDate0, 'e');
      planoTreino1.caloriasDispendidas(utilizadorPraticanteOcasional0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
      ZoneId.from(zoneOffset0);
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      ZoneOffset.ofHours(0);
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      planoTreino0.setDataRealizacao(localDate0);
      List<PlanoTreino.AtividadeIteracoes> list0 = planoTreino0.getAtividadesNumPeriodo(localDate0, localDate0);
      Abdominais abdominais0 = new Abdominais();
      planoTreino0.addAtividade(abdominais0, 3789);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(0, abdominais0);
      planoTreino_AtividadeIteracoes0.setAtividade(abdominais0);
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) planoTreino_AtividadeIteracoes0);
      Trail trail0 = new Trail();
      zoneOffset0.equals(planoTreino0);
      Trail trail1 = new Trail(trail0);
      abdominais0.equals(trail1);
      planoTreino0.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
      planoTreino_AtividadeIteracoes0.equals(list0);
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0, localDate0, localDate0);
      planoTreino0.addAtividade(abdominais0, 3789);
      planoTreino0.compareTo(planoTreino1);
      planoTreino0.getCodPlano();
      planoTreino1.clone();
      planoTreino_AtividadeIteracoes0.setAtividade(abdominais0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional1 = new UtilizadorPraticanteOcasional(utilizadorPraticanteOcasional0, localDate0, localDate0);
      int int0 = 0;
      int int1 = 77;
      int int2 = (-1713);
      // Undeclared exception!
      planoTreino0.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      planoTreino0.getCodPlano();
      planoTreino0.getAtividadesNumPeriodo(localDate0, localDate0);
      PlanoTreino planoTreino1 = new PlanoTreino(localDate0);
      planoTreino0.compareTo(planoTreino1);
      System.setCurrentTimeMillis(2013L);
      planoTreino0.planoTreinoNumPeriodo(localDate0, localDate0);
      planoTreino1.compareTo(planoTreino0);
      planoTreino0.toString();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      UtilizadorAmador utilizadorAmador1 = new UtilizadorAmador(utilizadorAmador0);
      UtilizadorAmador utilizadorAmador2 = new UtilizadorAmador(utilizadorAmador1, localDate0, localDate0);
      planoTreino1.caloriasDispendidas(utilizadorAmador2);
      planoTreino1.toString();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(5, 5);
      ZoneId.from(zoneOffset0);
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      ZoneOffset.ofHours(5);
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      planoTreino0.setDataRealizacao(localDate0);
      List<PlanoTreino.AtividadeIteracoes> list0 = planoTreino0.getAtividadesNumPeriodo(localDate0, localDate0);
      Abdominais abdominais0 = new Abdominais();
      planoTreino0.addAtividade(abdominais0, 3789);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(5, abdominais0);
      planoTreino_AtividadeIteracoes0.setAtividade(abdominais0);
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) planoTreino_AtividadeIteracoes0);
      Trail trail0 = new Trail();
      zoneOffset0.equals(planoTreino0);
      Trail trail1 = new Trail(trail0);
      abdominais0.equals(trail1);
      planoTreino0.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
      planoTreino_AtividadeIteracoes0.equals(list0);
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0, localDate0, localDate0);
      planoTreino0.addAtividade(abdominais0, 3789);
      planoTreino0.compareTo(planoTreino1);
      planoTreino0.getCodPlano();
      planoTreino_AtividadeIteracoes0.setAtividade(abdominais0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional1 = new UtilizadorPraticanteOcasional(utilizadorPraticanteOcasional0, localDate0, localDate0);
      int int0 = 0;
      int int1 = 77;
      // Undeclared exception!
      try { 
        MockLocalDate.ofYearDay(1, (-1713));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfYear (valid values 1 - 365/366): -1713
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1692L);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("0~UyqC?Wdo#aL>pg9r", "0~UyqC?Wdo#aL>pg9r", "", 0, 0, (-1141), localDate0, '~');
      UtilizadorAmador utilizadorAmador1 = new UtilizadorAmador(utilizadorAmador0, localDate0, localDate0);
      UtilizadorAmador utilizadorAmador2 = new UtilizadorAmador(utilizadorAmador1);
      PlanoTreino planoTreino0 = utilizadorAmador2.getPlanoTreinoId((-1141));
      planoTreino0.planoTreinoNumPeriodo(localDate0, localDate0);
      LegPress legPress0 = new LegPress();
      Function<Atividade, Integer> function0 = (Function<Atividade, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      LocalDate localDate1 = MockLocalDate.ofYearDay((-2784), 5);
      List<Atividade> list0 = utilizadorAmador0.atividadesIsoladas(localDate1, localDate1, (Predicate<Atividade>) null);
      planoTreino0.geraPlanoTreino(utilizadorAmador0, list0, (-2784), 0, 0.0, localDate1);
      utilizadorAmador1.infoDasAtividadesNumPeriodoQueRespeitamP(localDate0, localDate0, (Predicate<Atividade>) null, function0);
      utilizadorAmador2.toString();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(0, legPress0);
      planoTreino_AtividadeIteracoes0.setIteracoes(2347);
      planoTreino0.addAtividade(legPress0, (-1141));
      planoTreino_AtividadeIteracoes0.equals(legPress0);
      planoTreino0.getCodPlano();
      utilizadorAmador2.allMetrosAltimetria(localDate0, localDate0);
      planoTreino0.setDataRealizacao(localDate0);
      planoTreino_AtividadeIteracoes0.setIteracoes(2347);
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) utilizadorAmador2);
      planoTreino0.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
      planoTreino0.getAtividades();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("!;t[<`B<b", "!;t[<`B<b", "!;t[<`B<b", (-1526), (-1526), 1, localDate0, ' ');
      UtilizadorAmador utilizadorAmador1 = new UtilizadorAmador(utilizadorAmador0);
      PlanoTreino planoTreino0 = utilizadorAmador1.getPlanoTreinoId((-1526));
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0, localDate0, localDate0);
      planoTreino0.compareTo(planoTreino1);
      UtilizadorAmador utilizadorAmador2 = new UtilizadorAmador("!;t[<`B<b", "!;t[<`B<b", "!;t[<`B<b", 70, 271, 4, localDate0, ' ');
      PlanoTreino planoTreino2 = new PlanoTreino();
      Flexoes flexoes0 = new Flexoes();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino2.new AtividadeIteracoes(6692, flexoes0);
      planoTreino_AtividadeIteracoes0.equals(planoTreino_AtividadeIteracoes0);
      Flexoes flexoes1 = new Flexoes((LocalDateTime) null, (LocalTime) null, 0, 6692);
      planoTreino_AtividadeIteracoes0.equals(flexoes1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1692L);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("0~UyqC?Wdo#aL>pg9r", "0~UyqC?Wdo#aL>pg9r", "", 0, 0, (-1141), localDate0, '~');
      UtilizadorAmador utilizadorAmador1 = new UtilizadorAmador(utilizadorAmador0, localDate0, localDate0);
      UtilizadorAmador utilizadorAmador2 = new UtilizadorAmador(utilizadorAmador1);
      PlanoTreino planoTreino0 = utilizadorAmador2.getPlanoTreinoId((-1141));
      PlanoTreino planoTreino1 = (PlanoTreino)planoTreino0.planoTreinoNumPeriodo(localDate0, localDate0);
      utilizadorAmador0.getIdade();
      LegPress legPress0 = new LegPress();
      Function<Atividade, Integer> function0 = (Function<Atividade, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      LocalDate localDate1 = MockLocalDate.ofYearDay((-2743), 5);
      List<Atividade> list0 = utilizadorAmador0.atividadesIsoladas(localDate1, localDate1, (Predicate<Atividade>) null);
      planoTreino0.geraPlanoTreino(utilizadorAmador0, list0, (-2743), 0, 0.0, localDate1);
      utilizadorAmador1.infoDasAtividadesNumPeriodoQueRespeitamP(localDate0, localDate0, (Predicate<Atividade>) null, function0);
      utilizadorAmador2.toString();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(0, legPress0);
      planoTreino_AtividadeIteracoes0.setIteracoes(2347);
      planoTreino0.addAtividade(legPress0, (-1141));
      planoTreino_AtividadeIteracoes0.equals(legPress0);
      planoTreino0.getCodPlano();
      utilizadorAmador2.allMetrosAltimetria(localDate0, localDate0);
      planoTreino_AtividadeIteracoes0.setIteracoes(2347);
      utilizadorAmador2.clone();
      Predicate.isEqual((Object) utilizadorAmador2);
      utilizadorAmador2.allAtividades(localDate1, localDate1);
      planoTreino0.getAtividadesNumPeriodo(localDate1, localDate0);
      planoTreino1.planoTreinoNumPeriodo(localDate0, localDate0);
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) localDate1);
      planoTreino0.atividadesQueRespeitamP(localDate0, localDate1, predicate0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      planoTreino0.getCodPlano();
      Abdominais abdominais0 = new Abdominais();
      Abdominais abdominais1 = new Abdominais(abdominais0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(0, abdominais1);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      planoTreino_AtividadeIteracoes1.equals(planoTreino_AtividadeIteracoes0);
      planoTreino_AtividadeIteracoes1.getAtividade();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
      ZoneId.from(zoneOffset0);
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      ZoneOffset.ofHours(0);
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      planoTreino0.setDataRealizacao(localDate0);
      List<PlanoTreino.AtividadeIteracoes> list0 = planoTreino0.getAtividadesNumPeriodo(localDate0, localDate0);
      Abdominais abdominais0 = new Abdominais();
      planoTreino0.addAtividade(abdominais0, 3789);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(0, abdominais0);
      planoTreino_AtividadeIteracoes0.setAtividade(abdominais0);
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) planoTreino_AtividadeIteracoes0);
      Trail trail0 = new Trail();
      zoneOffset0.equals(planoTreino0);
      Trail trail1 = new Trail(trail0);
      abdominais0.equals(trail1);
      planoTreino0.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
      planoTreino_AtividadeIteracoes0.equals(list0);
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0, localDate0, localDate0);
      planoTreino0.addAtividade(abdominais0, 3789);
      planoTreino0.compareTo(planoTreino1);
      planoTreino0.getCodPlano();
      planoTreino_AtividadeIteracoes0.setAtividade(abdominais0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional1 = new UtilizadorPraticanteOcasional(utilizadorPraticanteOcasional0, localDate0, localDate0);
      int int0 = 0;
      int int1 = 77;
      // Undeclared exception!
      try { 
        MockLocalDate.ofYearDay(1, (-1713));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfYear (valid values 1 - 365/366): -1713
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1692L);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("0~UyqC?Wdo#aL>pg9r", "0~UyqC?Wdo#aL>pg9r", "", 0, 0, (-1141), localDate0, '~');
      UtilizadorAmador utilizadorAmador1 = new UtilizadorAmador(utilizadorAmador0, localDate0, localDate0);
      UtilizadorAmador utilizadorAmador2 = new UtilizadorAmador(utilizadorAmador1);
      PlanoTreino planoTreino0 = utilizadorAmador2.getPlanoTreinoId((-1141));
      planoTreino0.planoTreinoNumPeriodo(localDate0, localDate0);
      LegPress legPress0 = new LegPress();
      Function<Atividade, Integer> function0 = (Function<Atividade, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      LocalDate localDate1 = MockLocalDate.ofYearDay((-2743), 5);
      List<Atividade> list0 = utilizadorAmador0.atividadesIsoladas(localDate1, localDate1, (Predicate<Atividade>) null);
      planoTreino0.geraPlanoTreino(utilizadorAmador0, list0, (-2743), 0, 0.0, localDate1);
      utilizadorAmador1.infoDasAtividadesNumPeriodoQueRespeitamP(localDate0, localDate0, (Predicate<Atividade>) null, function0);
      utilizadorAmador2.toString();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(0, legPress0);
      planoTreino_AtividadeIteracoes0.setIteracoes(2347);
      planoTreino0.addAtividade(legPress0, (-1141));
      planoTreino_AtividadeIteracoes0.equals(legPress0);
      planoTreino0.getCodPlano();
      planoTreino_AtividadeIteracoes0.setIteracoes(2347);
      // Undeclared exception!
      try { 
        planoTreino0.caloriasDispendidas(utilizadorAmador1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("Projeto.AtivRepeticoes", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      MockLocalDate.now();
      int int0 = 10;
      BenchPress benchPress0 = new BenchPress();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      ZoneId zoneId0 = zoneOffset0.normalized();
      planoTreino0.caloriasDispendidas((Utilizador) null);
      HijrahDate hijrahDate0 = MockHijrahDate.now(zoneId0);
      benchPress0.equals(hijrahDate0);
      BenchPress benchPress1 = new BenchPress(benchPress0);
      benchPress1.setRepeticoes((-161));
      planoTreino0.addAtividade(benchPress1, 10);
      planoTreino0.clone();
      LocalDateTime localDateTime0 = null;
      planoTreino0.toString();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        ZoneId.of("", (Map<String, String>) hashMap0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid ID for ZoneOffset, invalid format: 
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      int int0 = 10;
      BenchPress benchPress0 = new BenchPress();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      ZoneId zoneId0 = zoneOffset0.normalized();
      HijrahDate hijrahDate0 = MockHijrahDate.now(zoneId0);
      benchPress0.equals(hijrahDate0);
      BenchPress benchPress1 = new BenchPress(benchPress0);
      planoTreino0.addAtividade(benchPress1, 10);
      planoTreino0.clone();
      LocalDateTime localDateTime0 = null;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        ZoneId.of("", (Map<String, String>) hashMap0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid ID for ZoneOffset, invalid format: 
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocalDate localDate0 = null;
      PlanoTreino planoTreino0 = new PlanoTreino((LocalDate) null);
      // Undeclared exception!
      try { 
        planoTreino0.getAtividadesNumPeriodo((LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(2656L);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("vDQ1H`&ky}f\"", "vDQ1H`&ky}f\"", "----------------------------------------------DENTRO CLASSE ABDOMINAIS-------------------------------------------------------", 0, 0, 0, localDate0, '/');
      int int0 = 0;
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId(0);
      planoTreino0.clone();
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      planoTreino0.geraPlanoTreino(utilizadorAmador0, linkedList0, 0, 0, 2573.60424118, localDate0);
      int int1 = (-1463);
      Ciclismo ciclismo0 = new Ciclismo();
      Ciclismo ciclismo1 = new Ciclismo(ciclismo0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes((-1463), ciclismo1);
      planoTreino_AtividadeIteracoes0.equals((Object) null);
      // Undeclared exception!
      try { 
        MockLocalDateTime.parse((CharSequence) "vDQ1H`&ky}f\"");
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text 'vDQ1H`&ky}f\"' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      planoTreino0.toString();
      Utilizador utilizador0 = null;
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      List<Atividade> list0 = utilizadorAmador0.getAtividadesIsoladas();
      int int0 = 301;
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalDate localDate0 = MockLocalDate.now(zoneId0);
      // Undeclared exception!
      try { 
        planoTreino0.geraPlanoTreino((Utilizador) null, list0, 301, 301, 0.0, localDate0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      UtilizadorAmador utilizadorAmador1 = new UtilizadorAmador(utilizadorAmador0);
      utilizadorAmador1.addPlanoTreino(planoTreino0);
      PlanoTreino planoTreino1 = utilizadorAmador1.getPlanoTreinoId((-2464));
      planoTreino0.compareTo(planoTreino1);
      Atividade atividade0 = null;
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(0, (Atividade) null);
      // Undeclared exception!
      try { 
        planoTreino_AtividadeIteracoes0.setAtividade((Atividade) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.PlanoTreino$AtividadeIteracoes", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("Plano de Treino\nCodigo de Plano de Treino: ", "", "Plano de Treino\nCodigo de Plano de Treino: ", 459, 0, 459, localDate0, '\'');
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId(459);
      planoTreino0.getAtividadesNumPeriodo(localDate0, localDate0);
      int int0 = 877;
      Flexoes flexoes0 = new Flexoes();
      List<Atividade> list0 = utilizadorAmador0.allAtividades(localDate0, localDate0);
      // Undeclared exception!
      planoTreino0.geraPlanoTreino(utilizadorAmador0, list0, (-1785), 2, 0.0, localDate0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "BPB=vS;Bwkv.y", "", 0, 0, 0, localDate0, 'V');
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId(0);
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino1.new AtividadeIteracoes(1141, (Atividade) null);
      planoTreino_AtividadeIteracoes0.setIteracoes(1141);
      // Undeclared exception!
      try { 
        planoTreino0.geraPlanoTreino(utilizadorAmador0, (List<Atividade>) null, 1757, 1757, 1757, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0);
      planoTreino1.setProximoCodigo(77);
      LocalDate localDate0 = MockLocalDate.ofYearDay(46, 46);
      planoTreino0.getAtividadesNumPeriodo(localDate0, localDate0);
      planoTreino0.clone();
      LocalDate localDate1 = MockLocalDate.ofYearDay((-70), 14);
      planoTreino1.getAtividadesNumPeriodo(localDate1, localDate1);
      Month month0 = Month.JULY;
      LocalDate localDate2 = MockLocalDate.of(14, month0, 14);
      planoTreino1.planoTreinoNumPeriodo(localDate1, localDate2);
      planoTreino0.planoTreinoNumPeriodo(localDate2, localDate1);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("Yx<R", "ogRRl/(\"g)ryR}1OB", "", 77, 77, (-70), localDate1, 'V');
      UtilizadorAmador utilizadorAmador1 = new UtilizadorAmador(utilizadorAmador0, localDate0, localDate0);
      UtilizadorAmador utilizadorAmador2 = new UtilizadorAmador(utilizadorAmador1);
      planoTreino0.caloriasDispendidas(utilizadorAmador2);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional(" metros", "pr/WAU@XI3bZ^9?C<", "Q/0ijI", 0, 2358, 2358, localDate0, 'O');
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional(utilizadorProfissional0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      UtilizadorAmador utilizadorAmador1 = new UtilizadorAmador(utilizadorAmador0);
      List<Atividade> list0 = utilizadorAmador1.allAtividades(localDate0, localDate0);
      planoTreino0.geraPlanoTreino(utilizadorProfissional1, list0, (-161), (-161), (-161), localDate0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino((LocalDate) null);
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0);
      planoTreino1.getAtividades();
      planoTreino1.getDataRealizacao();
      int int0 = 657;
      // Undeclared exception!
      try { 
        MockLocalDateTime.from((TemporalAccessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // temporal
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1455L));
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      planoTreino0.toString();
      planoTreino0.getCodPlano();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      Period period0 = Period.of(0, 0, 3660);
      Period period1 = period0.plusDays(885L);
      IsoChronology isoChronology0 = period1.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      planoTreino0.getAtividadesNumPeriodo(localDate0, localDate0);
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0);
      planoTreino1.setProximoCodigo(0);
      planoTreino1.clone();
      period0.getYears();
      planoTreino1.getDataRealizacao();
      planoTreino0.getAtividadesNumPeriodo(localDate0, localDate0);
      // Undeclared exception!
      try { 
        planoTreino1.addAtividade((Atividade) null, 3660);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.PlanoTreino", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "";
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1462));
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "R`YQ", "", (-1462), (-1462), (-1462), localDate0, 'R');
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId((-1462));
      PlanoTreino planoTreino1 = null;
      // Undeclared exception!
      try { 
        planoTreino0.compareTo((PlanoTreino) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.PlanoTreino", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1692L);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("0~UyqC?Wdo#aL>pg9r", "0~UyqC?Wdo#aL>pg9r", "0~UyqC?Wdo#aL>pg9r", 0, 0, (-1141), localDate0, '~');
      UtilizadorAmador utilizadorAmador1 = new UtilizadorAmador(utilizadorAmador0, localDate0, localDate0);
      UtilizadorAmador utilizadorAmador2 = new UtilizadorAmador(utilizadorAmador1);
      PlanoTreino planoTreino0 = utilizadorAmador2.getPlanoTreinoId((-1141));
      planoTreino0.planoTreinoNumPeriodo(localDate0, localDate0);
      LegPress legPress0 = new LegPress();
      Function<Atividade, Integer> function0 = (Function<Atividade, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      List<Atividade> list0 = utilizadorAmador0.atividadesIsoladas(localDate0, localDate0, (Predicate<Atividade>) null);
      planoTreino0.geraPlanoTreino(utilizadorAmador0, list0, (-2743), 0, 0.0, localDate0);
      utilizadorAmador1.infoDasAtividadesNumPeriodoQueRespeitamP(localDate0, localDate0, (Predicate<Atividade>) null, function0);
      utilizadorAmador2.toString();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(0, legPress0);
      planoTreino_AtividadeIteracoes0.setIteracoes(2347);
      planoTreino0.addAtividade(legPress0, (-1141));
      planoTreino_AtividadeIteracoes0.equals(legPress0);
      planoTreino0.getCodPlano();
      utilizadorAmador2.allMetrosAltimetria(localDate0, localDate0);
      planoTreino_AtividadeIteracoes0.setIteracoes(2347);
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) utilizadorAmador2);
      planoTreino0.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LocalDate localDate0 = null;
      PlanoTreino planoTreino0 = new PlanoTreino((LocalDate) null);
      // Undeclared exception!
      try { 
        planoTreino0.planoTreinoNumPeriodo((LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      UtilizadorAmador utilizadorAmador1 = new UtilizadorAmador(utilizadorAmador0);
      PlanoTreino planoTreino0 = utilizadorAmador1.getPlanoTreinoId(0);
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0);
      Trail trail0 = new Trail();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(0, trail0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino1.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      planoTreino_AtividadeIteracoes1.toString();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      LocalDate localDate0 = planoTreino0.getDataRealizacao();
      LocalDate localDate1 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador((String) null, "-/[<C8[zy;Rp?Apt$=", "=\rB$p`(nk4M@N4H", 0, 0, 0, localDate1, 't');
      UtilizadorAmador utilizadorAmador1 = new UtilizadorAmador(utilizadorAmador0, localDate1, localDate0);
      planoTreino0.caloriasDispendidas(utilizadorAmador1);
      planoTreino0.setDataRealizacao(localDate1);
      planoTreino0.setDataRealizacao(localDate1);
      Corrida corrida0 = new Corrida();
      planoTreino0.addAtividade(corrida0, 0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LocalDate localDate0 = null;
      PlanoTreino planoTreino0 = new PlanoTreino((LocalDate) null);
      planoTreino0.toString();
      planoTreino0.clone();
      planoTreino0.toString();
      planoTreino0.clone();
      Predicate<Atividade> predicate0 = null;
      // Undeclared exception!
      try { 
        planoTreino0.atividadesQueRespeitamP((LocalDate) null, (LocalDate) null, (Predicate<Atividade>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1868L);
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0, localDate0, localDate0);
      PlanoTreino planoTreino2 = new PlanoTreino(planoTreino1);
      Corrida corrida0 = new Corrida();
      corrida0.clone();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino2.new AtividadeIteracoes((-2055), corrida0);
      planoTreino_AtividadeIteracoes0.equals(corrida0);
      planoTreino_AtividadeIteracoes0.getIteracoes();
      planoTreino2.getAtividades();
      planoTreino_AtividadeIteracoes0.setAtividade(corrida0);
      planoTreino1.setDataRealizacao(localDate0);
      planoTreino_AtividadeIteracoes0.setAtividade(corrida0);
      planoTreino1.addAtividade(corrida0, (-2055));
      planoTreino2.getAtividades();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      LocalDate localDate0 = MockLocalDate.now();
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0, localDate0, localDate0);
      Ciclismo ciclismo0 = new Ciclismo();
      Ciclismo ciclismo1 = new Ciclismo(ciclismo0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(1, ciclismo1);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino1.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      planoTreino_AtividadeIteracoes1.setIteracoes(0);
      planoTreino0.addAtividade(ciclismo0, (-1957));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      planoTreino0.getAtividadesNumPeriodo(localDate0, localDate0);
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0);
      planoTreino0.compareTo(planoTreino1);
      planoTreino0.getAtividades();
      planoTreino0.setProximoCodigo(77);
      planoTreino0.planoTreinoNumPeriodo(localDate0, localDate0);
      planoTreino0.toString();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = null;
      try {
        planoTreino_AtividadeIteracoes0 = planoTreino1.new AtividadeIteracoes((PlanoTreino.AtividadeIteracoes) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.PlanoTreino$AtividadeIteracoes", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      planoTreino0.setProximoCodigo((-2135));
      planoTreino0.getCodPlano();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-2464L));
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0, localDate0, localDate0);
      int int0 = 2771;
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino1.new AtividadeIteracoes(2771, (Atividade) null);
      // Undeclared exception!
      try { 
        planoTreino_AtividadeIteracoes0.setAtividade((Atividade) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.PlanoTreino$AtividadeIteracoes", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      planoTreino0.toString();
      planoTreino0.getAtividades();
      planoTreino0.toString();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      LocalDate localDate0 = null;
      PlanoTreino planoTreino1 = null;
      try {
        planoTreino1 = new PlanoTreino(planoTreino0, (LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      UtilizadorAmador utilizadorAmador1 = new UtilizadorAmador(utilizadorAmador0);
      PlanoTreino planoTreino0 = utilizadorAmador1.getPlanoTreinoId(726);
      LocalDate localDate0 = MockLocalDate.now();
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0, localDate0, localDate0);
      PlanoTreino planoTreino2 = new PlanoTreino(planoTreino1);
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) utilizadorAmador0);
      planoTreino2.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0);
      Flexoes flexoes0 = new Flexoes();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(0, flexoes0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      Period period0 = Period.ofWeeks(3);
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, zoneId0);
      UtilizadorAmador utilizadorAmador1 = new UtilizadorAmador(utilizadorAmador0, localDate0, localDate0);
      UtilizadorAmador utilizadorAmador2 = new UtilizadorAmador(utilizadorAmador1);
      flexoes0.geraAtividade(utilizadorAmador2, 3);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes2 = planoTreino1.new AtividadeIteracoes(planoTreino_AtividadeIteracoes1);
      planoTreino_AtividadeIteracoes2.clone();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      planoTreino0.getCodPlano();
      PlanoTreino planoTreino1 = new PlanoTreino();
      Abdominais abdominais0 = new Abdominais();
      Abdominais abdominais1 = new Abdominais(abdominais0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino1.new AtividadeIteracoes(0, abdominais1);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      planoTreino_AtividadeIteracoes1.getAtividade();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = null;
      try {
        planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes((PlanoTreino.AtividadeIteracoes) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.PlanoTreino$AtividadeIteracoes", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      BenchPress benchPress0 = new BenchPress();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(1, benchPress0);
      planoTreino_AtividadeIteracoes0.getIteracoes();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PlanoTreino planoTreino0 = null;
      try {
        planoTreino0 = new PlanoTreino((PlanoTreino) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.PlanoTreino", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      planoTreino0.clone();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId(1);
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0);
      Month month0 = Month.MAY;
      LocalDate localDate0 = MockLocalDate.of((-161), month0, 1);
      planoTreino1.setDataRealizacao(localDate0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      planoTreino0.clone();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(5, 5);
      ZoneId.from(zoneOffset0);
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      ZoneOffset.ofHours(5);
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      planoTreino0.setDataRealizacao(localDate0);
      planoTreino0.getAtividadesNumPeriodo(localDate0, localDate0);
      Abdominais abdominais0 = new Abdominais();
      planoTreino0.addAtividade(abdominais0, 5);
      Trail trail0 = new Trail();
      zoneOffset0.equals(planoTreino0);
      Trail trail1 = new Trail(trail0);
      abdominais0.equals(trail1);
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0, localDate0, localDate0);
      planoTreino0.addAtividade(abdominais0, 5);
      planoTreino0.compareTo(planoTreino1);
      planoTreino0.getCodPlano();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional1 = new UtilizadorPraticanteOcasional();
      // Undeclared exception!
      try { 
        MockLocalDate.ofYearDay(1, (-1713));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfYear (valid values 1 - 365/366): -1713
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-55L));
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      PlanoTreino planoTreino1 = new PlanoTreino();
      planoTreino1.getAtividades();
      planoTreino0.compareTo(planoTreino1);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional((String) null, (String) null, "", (-45), (-398), 3774, localDate0, 'e');
      planoTreino1.caloriasDispendidas(utilizadorPraticanteOcasional0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      planoTreino0.getCodPlano();
      Abdominais abdominais0 = new Abdominais();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(0, abdominais0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      planoTreino_AtividadeIteracoes1.equals(planoTreino_AtividadeIteracoes0);
      planoTreino_AtividadeIteracoes1.getAtividade();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      int int0 = 3;
      LocalDate localDate0 = MockLocalDate.of(3, 3, 3);
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) localDate0);
      Predicate<Atividade> predicate1 = predicate0.negate();
      List<Atividade> list0 = planoTreino0.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      UtilizadorAmador utilizadorAmador1 = new UtilizadorAmador();
      UtilizadorAmador utilizadorAmador2 = new UtilizadorAmador(utilizadorAmador1);
      predicate0.or(predicate1);
      // Undeclared exception!
      try { 
        planoTreino0.geraPlanoTreino(utilizadorAmador2, list0, 1, 3, 4785.9, localDate0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      int int0 = 3;
      LocalDate localDate0 = MockLocalDate.ofYearDay(3, 3);
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) localDate0);
      Predicate<Atividade> predicate1 = predicate0.negate();
      List<Atividade> list0 = planoTreino0.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      UtilizadorAmador utilizadorAmador1 = new UtilizadorAmador(utilizadorAmador0);
      predicate0.or(predicate1);
      // Undeclared exception!
      try { 
        planoTreino0.geraPlanoTreino(utilizadorAmador1, list0, 1, 3, 4785.9, localDate0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      planoTreino0.getCodPlano();
      Abdominais abdominais0 = new Abdominais();
      Abdominais abdominais1 = new Abdominais(abdominais0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(0, abdominais1);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      abdominais1.setTempo((LocalTime) null);
      planoTreino_AtividadeIteracoes1.equals(planoTreino_AtividadeIteracoes0);
      planoTreino_AtividadeIteracoes1.getAtividade();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "Vx(lsAo:q8e4Py", "", 0, 0, 0, localDate0, 'd');
      UtilizadorAmador utilizadorAmador1 = new UtilizadorAmador(utilizadorAmador0);
      List<Atividade> list0 = utilizadorAmador1.getAtividadesIsoladas();
      int int0 = 10;
      BenchPress benchPress0 = new BenchPress();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      ZoneId zoneId0 = zoneOffset0.normalized();
      planoTreino0.caloriasDispendidas((Utilizador) null);
      HijrahDate hijrahDate0 = MockHijrahDate.now(zoneId0);
      benchPress0.equals(hijrahDate0);
      BenchPress benchPress1 = new BenchPress(benchPress0);
      planoTreino0.addAtividade(benchPress1, 10);
      // Undeclared exception!
      planoTreino0.geraPlanoTreino(utilizadorAmador1, list0, 0, 10, 10, localDate0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1L));
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      Flexoes flexoes0 = new Flexoes();
      Flexoes flexoes1 = new Flexoes(flexoes0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(1642, flexoes1);
      planoTreino_AtividadeIteracoes0.clone();
      planoTreino0.toString();
      LocalDate localDate1 = MockLocalDate.from(localDate0);
      planoTreino0.getAtividadesNumPeriodo(localDate1, localDate0);
      planoTreino_AtividadeIteracoes0.clone();
      planoTreino0.setProximoCodigo(1642);
      planoTreino_AtividadeIteracoes0.setAtividade(flexoes0);
      Period.ofMonths(2);
      // Undeclared exception!
      try { 
        ZoneId.of("=H%0X{*;XMk0");
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid ID for region-based ZoneId, invalid format: =H%0X{*;XMk0
         //
         verifyException("java.time.ZoneRegion", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "Vx(lsAo:q8e4Py", "", 0, 0, 0, localDate0, 'd');
      UtilizadorAmador utilizadorAmador1 = new UtilizadorAmador(utilizadorAmador0);
      utilizadorAmador1.getAtividadesIsoladas();
      BenchPress benchPress0 = new BenchPress();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      ZoneOffset zoneOffset1 = (ZoneOffset)zoneOffset0.normalized();
      ZoneId.ofOffset("", zoneOffset1);
      planoTreino0.caloriasDispendidas((Utilizador) null);
      HijrahDate hijrahDate0 = MockHijrahDate.now((ZoneId) zoneOffset1);
      benchPress0.equals(hijrahDate0);
      BenchPress benchPress1 = new BenchPress(benchPress0);
      planoTreino0.addAtividade(benchPress1, (-45));
      planoTreino0.toString();
      planoTreino0.clone();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        ZoneId.of("", (Map<String, String>) hashMap0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid ID for ZoneOffset, invalid format: 
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      Trail trail0 = new Trail();
      planoTreino0.addAtividade(trail0, 3849);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      // Undeclared exception!
      try { 
        planoTreino0.caloriasDispendidas(utilizadorAmador0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      PlanoTreino planoTreino0 = new PlanoTreino();
      planoTreino0.getAtividades();
      Abdominais abdominais0 = new Abdominais();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(2387, abdominais0);
      boolean boolean0 = planoTreino_AtividadeIteracoes0.equals((Object) null);
      assertEquals(0, planoTreino0.getCodPlano());
      assertFalse(boolean0);
      assertEquals(2387, planoTreino_AtividadeIteracoes0.getIteracoes());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1692L);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("0~UyqC?Wdo#aL>pg9r", "0~UyqC?Wdo#aL>pg9r", "", 0, 0, (-1141), localDate0, '~');
      UtilizadorAmador utilizadorAmador1 = new UtilizadorAmador(utilizadorAmador0, localDate0, localDate0);
      UtilizadorAmador utilizadorAmador2 = new UtilizadorAmador(utilizadorAmador1);
      PlanoTreino planoTreino0 = utilizadorAmador2.getPlanoTreinoId((-1141));
      planoTreino0.planoTreinoNumPeriodo(localDate0, localDate0);
      LegPress legPress0 = new LegPress();
      Function<Atividade, Integer> function0 = (Function<Atividade, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      LocalDate localDate1 = MockLocalDate.ofYearDay((-2743), 5);
      List<Atividade> list0 = utilizadorAmador0.atividadesIsoladas(localDate1, localDate1, (Predicate<Atividade>) null);
      planoTreino0.geraPlanoTreino(utilizadorAmador0, list0, (-2743), 0, 0.0, localDate1);
      utilizadorAmador1.infoDasAtividadesNumPeriodoQueRespeitamP(localDate0, localDate0, (Predicate<Atividade>) null, function0);
      utilizadorAmador2.toString();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(0, legPress0);
      planoTreino_AtividadeIteracoes0.setIteracoes(2347);
      planoTreino0.addAtividade(legPress0, (-1141));
      planoTreino_AtividadeIteracoes0.equals(legPress0);
      planoTreino0.getCodPlano();
      utilizadorAmador2.allMetrosAltimetria(localDate0, localDate0);
      planoTreino_AtividadeIteracoes0.setIteracoes(2347);
      assertEquals(2347, planoTreino_AtividadeIteracoes0.getIteracoes());
      
      utilizadorAmador2.clone();
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) utilizadorAmador2);
      planoTreino0.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
      planoTreino0.getAtividadesNumPeriodo(localDate1, localDate0);
      assertEquals(0, planoTreino0.getCodPlano());
  }
}
