/*
 * This file was automatically generated by EvoSuite
 * Wed May 28 22:00:56 GMT 2025
 */

package Projeto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Projeto.Abdominais;
import Projeto.Atividade;
import Projeto.BenchPress;
import Projeto.BicepCurls;
import Projeto.Btt;
import Projeto.Ciclismo;
import Projeto.Corrida;
import Projeto.Flexoes;
import Projeto.LegPress;
import Projeto.PlanoTreino;
import Projeto.Utilizador;
import Projeto.UtilizadorAmador;
import Projeto.UtilizadorPraticanteOcasional;
import Projeto.UtilizadorProfissional;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Month;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import java.time.temporal.TemporalAccessor;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PlanoTreino_ESTest extends PlanoTreino_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("L,~S>+8Z'9P\"S", "L,~S>+8Z'9P\"S", "L,~S>+8Z'9P\"S", (-995), (-995), (-995), localDate0, ' ');
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId((-995));
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      LocalTime localTime0 = MockLocalTime.now();
      Flexoes flexoes0 = new Flexoes(localDateTime0, localTime0, (-995), (-995));
      Flexoes flexoes1 = new Flexoes(flexoes0);
      flexoes0.toString();
      planoTreino0.addAtividade(flexoes1, (-995));
      planoTreino0.getAtividades();
      planoTreino0.getAtividades();
      planoTreino0.getCodPlano();
      planoTreino0.caloriasDispendidas(utilizadorAmador0);
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0);
      planoTreino0.clone();
      planoTreino0.getAtividadesNumPeriodo(localDate0, localDate0);
      planoTreino0.getCodPlano();
      utilizadorAmador0.setMorada("Plano de Treino\nCodigo de Plano de Treino: ");
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) null);
      List<Atividade> list0 = planoTreino0.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
      planoTreino0.geraPlanoTreino(utilizadorAmador0, list0, 1555, (-1905), (-650.803), localDate0);
      utilizadorAmador0.planosTreinos(localDate0, localDate0);
      planoTreino1.getCodPlano();
      planoTreino0.toString();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("L,~S>+8Z'9P\"S", "L,~S>+8Z'9P\"S", "L,~S>+8Z'9P\"S", (-995), (-995), (-995), localDate0, ' ');
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId((-995));
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      LocalTime localTime0 = MockLocalTime.now();
      Flexoes flexoes0 = new Flexoes(localDateTime0, localTime0, (-995), (-995));
      Flexoes flexoes1 = new Flexoes(flexoes0);
      planoTreino0.addAtividade(flexoes1, 2728);
      planoTreino0.getAtividades();
      planoTreino0.getAtividades();
      planoTreino0.getCodPlano();
      planoTreino0.caloriasDispendidas(utilizadorAmador0);
      planoTreino0.clone();
      planoTreino0.clone();
      planoTreino0.getAtividadesNumPeriodo(localDate0, localDate0);
      planoTreino0.getCodPlano();
      utilizadorAmador0.setMorada("Plano de Treino\nCodigo de Plano de Treino: ");
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) null);
      List<Atividade> list0 = planoTreino0.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
      planoTreino0.geraPlanoTreino(utilizadorAmador0, list0, 1555, (-1905), (-650.803), localDate0);
      // Undeclared exception!
      planoTreino0.geraPlanoTreino(utilizadorAmador0, list0, 0, 7, 2748.7447598752, localDate0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Month month0 = Month.DECEMBER;
      LocalDate localDate0 = MockLocalDate.of(0, month0, 1);
      PlanoTreino planoTreino0 = new PlanoTreino();
      planoTreino0.getAtividadesNumPeriodo(localDate0, localDate0);
      PlanoTreino planoTreino1 = new PlanoTreino(localDate0);
      planoTreino0.compareTo(planoTreino1);
      planoTreino0.caloriasDispendidas((Utilizador) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      planoTreino0.toString();
      planoTreino0.toString();
      planoTreino0.toString();
      LocalDate localDate0 = planoTreino0.getDataRealizacao();
      Corrida corrida0 = new Corrida();
      corrida0.setProximoCodigo(2);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("Plano de Treino\nCodigo de Plano de Treino: 0\nData de realiza\u00E7ao: 2014-02-14\nAtividades e suas itera\u00E7oes: \n", "s1;}u", "Plano de Treino\nCodigo de Plano de Treino: 0\nData de realiza\u00E7ao: 2014-02-14\nAtividades e suas itera\u00E7oes: \n", 1798, 1798, 1798, localDate0, 'p');
      Atividade atividade0 = corrida0.geraAtividade(utilizadorAmador0, 1798);
      planoTreino0.caloriasDispendidas((Utilizador) null);
      planoTreino0.addAtividade(atividade0, 332);
      planoTreino0.toString();
      System.setCurrentTimeMillis(168L);
      // Undeclared exception!
      try { 
        planoTreino0.caloriasDispendidas((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Corrida", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(0);
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      Flexoes flexoes0 = new Flexoes();
      planoTreino0.addAtividade(flexoes0, 0);
      List<PlanoTreino.AtividadeIteracoes> list0 = planoTreino0.getAtividades();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(70, flexoes0);
      planoTreino_AtividadeIteracoes0.setAtividade(flexoes0);
      Object object0 = planoTreino0.clone();
      LocalDate localDate1 = MockLocalDate.from(localDate0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("f=*(M*e-$rzGc", "&8ABJ|#`YGLTWUIGpw", "&8ABJ|#`YGLTWUIGpw", 0, 70, 0, localDate1, '[');
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      linkedList0.add((Atividade) flexoes0);
      planoTreino_AtividadeIteracoes0.equals(list0);
      planoTreino0.geraPlanoTreino(utilizadorProfissional0, linkedList0, 70, 70, 70, localDate1);
      object0.toString();
      planoTreino_AtividadeIteracoes0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino((LocalDate) null);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      planoTreino0.caloriasDispendidas(utilizadorAmador0);
      planoTreino0.getDataRealizacao();
      planoTreino0.getAtividades();
      PlanoTreino planoTreino1 = new PlanoTreino();
      // Undeclared exception!
      try { 
        planoTreino0.compareTo(planoTreino1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.PlanoTreino", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-3040L));
      planoTreino1.setDataRealizacao(localDate0);
      Period period0 = Period.ofWeeks((-1318));
      IsoChronology isoChronology0 = period0.getChronology();
      long long0 = 0L;
      period0.plusMonths(0L);
      period0.equals(isoChronology0);
      LocalDate localDate1 = MockIsoChronology.dateNow(isoChronology0);
      planoTreino1.planoTreinoNumPeriodo(localDate1, localDate1);
      planoTreino1.clone();
      planoTreino1.toString();
      planoTreino0.setProximoCodigo((-1318));
      planoTreino1.clone();
      planoTreino1.compareTo(planoTreino0);
      planoTreino0.toString();
      planoTreino1.getAtividades();
      LegPress legPress0 = new LegPress();
      LegPress legPress1 = new LegPress(legPress0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino1.new AtividadeIteracoes((-136), legPress1);
      planoTreino_AtividadeIteracoes0.equals(isoChronology0);
      planoTreino1.toString();
      System.setCurrentTimeMillis((-1L));
      planoTreino0.getDataRealizacao();
      int int0 = 1;
      // Undeclared exception!
      try { 
        MockLocalDateTime.of(0, 10, 1, 302, 1, (-53), 10);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for HourOfDay (valid values 0 - 23): 302
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Period period0 = Period.ofWeeks(0);
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, zoneId0);
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      planoTreino0.getAtividades();
      planoTreino0.toString();
      LocalDate localDate1 = planoTreino0.getDataRealizacao();
      PlanoTreino planoTreino1 = (PlanoTreino)planoTreino0.planoTreinoNumPeriodo(localDate0, localDate0);
      planoTreino1.setDataRealizacao(localDate0);
      BicepCurls bicepCurls0 = new BicepCurls();
      BicepCurls bicepCurls1 = new BicepCurls(bicepCurls0);
      Period period1 = period0.multipliedBy(1629);
      period0.minus(period1);
      Ciclismo ciclismo0 = new Ciclismo();
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) ciclismo0);
      planoTreino0.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("Plano de Treino\nCodigo de Plano de Treino: 1\nData de realiza\u00E7ao: 2014-02-14\nAtividades e suas itera\u00E7oes: \n", "Plano de Treino\nCodigo de Plano de Treino: 1\nData de realiza\u00E7ao: 2014-02-14\nAtividades e suas itera\u00E7oes: \n", "E1.:zN.L;WTa}T|$O'2", 0, 1629, (-3286), localDate1, '`');
      bicepCurls0.setPeso(0.0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes((-3286), bicepCurls1);
      planoTreino0.addAtividade(bicepCurls1, (-3286));
      planoTreino_AtividadeIteracoes0.setIteracoes(0);
      PlanoTreino planoTreino2 = new PlanoTreino(localDate0);
      planoTreino2.compareTo(planoTreino0);
      planoTreino0.compareTo(planoTreino2);
      planoTreino0.getAtividadesNumPeriodo(localDate1, localDate0);
      planoTreino_AtividadeIteracoes0.getIteracoes();
      planoTreino2.caloriasDispendidas(utilizadorAmador0);
      planoTreino_AtividadeIteracoes0.setIteracoes(445);
      planoTreino2.addAtividade(bicepCurls0, (-3286));
      planoTreino0.getAtividades();
      planoTreino2.atividadesQueRespeitamP(localDate1, localDate1, predicate0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      BenchPress benchPress0 = new BenchPress();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      BenchPress benchPress1 = (BenchPress)benchPress0.geraAtividade(utilizadorProfissional0, 1);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(1, benchPress1);
      benchPress1.toString();
      planoTreino_AtividadeIteracoes0.getAtividade();
      benchPress0.setRepeticoes(1);
      planoTreino_AtividadeIteracoes0.equals(benchPress0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes2 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      planoTreino_AtividadeIteracoes1.setIteracoes((-774));
      planoTreino_AtividadeIteracoes1.equals(planoTreino_AtividadeIteracoes2);
      planoTreino_AtividadeIteracoes1.setAtividade(benchPress0);
      planoTreino_AtividadeIteracoes1.equals(planoTreino_AtividadeIteracoes0);
      planoTreino0.toString();
      // Undeclared exception!
      try { 
        benchPress1.getFatorRepeticoes(1, 1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("Projeto.AtivRepeticoes", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      int int0 = 1;
      BenchPress benchPress0 = new BenchPress();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      BenchPress benchPress1 = (BenchPress)benchPress0.geraAtividade(utilizadorProfissional0, 1);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(1, benchPress1);
      planoTreino_AtividadeIteracoes0.getAtividade();
      benchPress0.setRepeticoes(1);
      planoTreino_AtividadeIteracoes0.equals(benchPress0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      planoTreino_AtividadeIteracoes0.setAtividade(benchPress0);
      planoTreino_AtividadeIteracoes0.equals(planoTreino_AtividadeIteracoes0);
      planoTreino0.toString();
      // Undeclared exception!
      try { 
        benchPress1.getFatorRepeticoes(1, 1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("Projeto.AtivRepeticoes", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      int int0 = 1;
      BenchPress benchPress0 = new BenchPress();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      Atividade atividade0 = benchPress0.geraAtividade(utilizadorProfissional0, 1);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(1, atividade0);
      planoTreino_AtividadeIteracoes0.getAtividade();
      benchPress0.setRepeticoes(1);
      planoTreino_AtividadeIteracoes0.equals(benchPress0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes2 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      planoTreino_AtividadeIteracoes2.setIteracoes(0);
      planoTreino_AtividadeIteracoes1.equals(planoTreino_AtividadeIteracoes2);
      planoTreino_AtividadeIteracoes1.setAtividade(benchPress0);
      planoTreino_AtividadeIteracoes1.equals(planoTreino_AtividadeIteracoes0);
      Btt btt0 = null;
      try {
        btt0 = new Btt((Btt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      long long0 = 1847L;
      String string0 = " 4oR3/";
      Month month0 = Month.FEBRUARY;
      int int0 = 19;
      LocalDate localDate0 = MockLocalDate.of(1, month0, 19);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional(" 4oR3/", " 4oR3/", " 4oR3/", 1, (-6), (-6), localDate0, '8');
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      LocalDate localDate1 = null;
      List<Atividade> list0 = utilizadorAmador0.allAtividades((LocalDate) null, (LocalDate) null);
      // Undeclared exception!
      try { 
        planoTreino0.geraPlanoTreino(utilizadorPraticanteOcasional0, list0, 19, 19, 1847L, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.PlanoTreino", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      PlanoTreino planoTreino0 = new PlanoTreino((LocalDate) null);
      planoTreino0.toString();
      Predicate.isEqual((Object) planoTreino0);
      PlanoTreino planoTreino1 = null;
      Corrida corrida0 = new Corrida();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      utilizadorProfissional0.setNome("Plano de Treino\nCodigo de Plano de Treino: 1\nData de realiza\u00E7ao: null\nAtividades e suas itera\u00E7oes: \n");
      Atividade atividade0 = corrida0.geraAtividade(utilizadorProfissional0, 10);
      planoTreino0.addAtividade(atividade0, 10);
      // Undeclared exception!
      try { 
        planoTreino0.planoTreinoNumPeriodo((LocalDate) null, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino((LocalDate) null);
      BicepCurls bicepCurls0 = new BicepCurls();
      planoTreino0.clone();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("=C~\"O", "=C~\"O", "=C~\"O", (-1482), 0, 684, (LocalDate) null, 'i');
      planoTreino0.caloriasDispendidas(utilizadorPraticanteOcasional0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(7, bicepCurls0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      planoTreino_AtividadeIteracoes1.clone();
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      linkedList0.add((Atividade) bicepCurls0);
      planoTreino0.geraPlanoTreino(utilizadorPraticanteOcasional0, linkedList0, (-1), (-1), 0.0, (LocalDate) null);
      int int0 = (-960);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("=C~\"O", "=C~\"O", "=C~\"O", 0, 0, (-960), (LocalDate) null, 'r');
      UtilizadorAmador utilizadorAmador1 = new UtilizadorAmador(utilizadorAmador0);
      UtilizadorAmador utilizadorAmador2 = null;
      try {
        utilizadorAmador2 = new UtilizadorAmador(utilizadorAmador1, (LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      BenchPress benchPress0 = new BenchPress();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      Atividade atividade0 = benchPress0.geraAtividade(utilizadorProfissional0, 1);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(1, atividade0);
      planoTreino_AtividadeIteracoes0.getAtividade();
      benchPress0.setRepeticoes(1);
      planoTreino_AtividadeIteracoes0.equals(benchPress0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes2 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      planoTreino_AtividadeIteracoes1.equals(planoTreino_AtividadeIteracoes2);
      planoTreino_AtividadeIteracoes1.setAtividade(benchPress0);
      planoTreino_AtividadeIteracoes1.equals(planoTreino_AtividadeIteracoes0);
      planoTreino0.toString();
      System.setCurrentTimeMillis(1);
      // Undeclared exception!
      try { 
        ZoneOffset.from((TemporalAccessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // temporal
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Period period0 = Period.ofWeeks(0);
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, zoneId0);
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      planoTreino0.getAtividades();
      planoTreino0.toString();
      LocalDate localDate1 = planoTreino0.getDataRealizacao();
      planoTreino0.planoTreinoNumPeriodo(localDate0, localDate0);
      BicepCurls bicepCurls0 = new BicepCurls();
      BicepCurls bicepCurls1 = new BicepCurls(bicepCurls0);
      Period period1 = period0.multipliedBy(1629);
      period0.minus(period1);
      Ciclismo ciclismo0 = new Ciclismo();
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) ciclismo0);
      planoTreino0.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("Plano de Treino\nCodigo de Plano de Treino: 1\nData de realiza\u00E7ao: 2014-02-14\nAtividades e suas itera\u00E7oes: \n", "Plano de Treino\nCodigo de Plano de Treino: 1\nData de realiza\u00E7ao: 2014-02-14\nAtividades e suas itera\u00E7oes: \n", "E1.:zN.L;WTa}T|$O'2", 0, 1629, (-3286), localDate1, '`');
      Atividade atividade0 = bicepCurls0.geraAtividade(utilizadorAmador0, (-3286));
      bicepCurls0.setPeso(0.0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes((-3286), bicepCurls1);
      planoTreino_AtividadeIteracoes0.setIteracoes(0);
      utilizadorAmador0.atividadesNumPeriodoQueRespeitamP(localDate0, localDate1, predicate0);
      PlanoTreino planoTreino1 = new PlanoTreino(localDate0);
      planoTreino1.compareTo(planoTreino0);
      planoTreino0.compareTo(planoTreino1);
      planoTreino0.getAtividadesNumPeriodo(localDate1, localDate0);
      planoTreino_AtividadeIteracoes0.getIteracoes();
      planoTreino1.caloriasDispendidas(utilizadorAmador0);
      planoTreino_AtividadeIteracoes0.setIteracoes(445);
      planoTreino1.addAtividade(atividade0, (-3286));
      planoTreino0.getAtividades();
      LocalDate localDate2 = MockLocalDate.ofYearDay(3, 33);
      planoTreino0.getAtividadesNumPeriodo(localDate2, localDate1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalDate localDate0 = null;
      PlanoTreino planoTreino0 = new PlanoTreino((LocalDate) null);
      int int0 = 10;
      LocalDate localDate1 = MockLocalDate.now();
      PlanoTreino planoTreino1 = new PlanoTreino();
      planoTreino1.toString();
      Predicate.isEqual((Object) planoTreino1);
      Predicate.isEqual((Object) planoTreino0);
      // Undeclared exception!
      try { 
        planoTreino1.getAtividadesNumPeriodo((LocalDate) null, localDate1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      int int0 = 817;
      Abdominais abdominais0 = new Abdominais();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(817, abdominais0);
      int int1 = 0;
      String string0 = "kx/YC#";
      String string1 = "7?<01}D}";
      String string2 = null;
      int int2 = (-3851);
      int int3 = 2360;
      planoTreino0.addAtividade(abdominais0, 817);
      Period period0 = Period.of(18, 817, 817);
      Period period1 = period0.normalized();
      IsoChronology isoChronology0 = period1.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) null);
      planoTreino0.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
      DayOfWeek dayOfWeek0 = DayOfWeek.FRIDAY;
      // Undeclared exception!
      try { 
        ZoneOffset.ofHoursMinutesSeconds(817, 2360, 817);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Zone offset hours not in valid range: value 817 is not in the range -18 to 18
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(10);
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      PlanoTreino planoTreino0 = new PlanoTreino();
      Flexoes flexoes0 = new Flexoes();
      planoTreino0.addAtividade(flexoes0, 10);
      planoTreino0.getAtividades();
      int int0 = 70;
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(70, flexoes0);
      planoTreino_AtividadeIteracoes0.setAtividade(flexoes0);
      PlanoTreino planoTreino1 = (PlanoTreino)planoTreino0.clone();
      LocalDate localDate1 = MockLocalDate.from(localDate0);
      planoTreino0.addAtividade(flexoes0, 1710);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("f=*(M*e-$rzGc", "&8ABJ|#`YGLTWUIGpw", "&8ABJ|#`YGLTWUIGpw", 10, 70, 10, localDate1, '[');
      planoTreino0.getAtividadesNumPeriodo(localDate0, localDate0);
      // Undeclared exception!
      try { 
        planoTreino1.caloriasDispendidas(utilizadorProfissional0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("Projeto.AtivRepeticoes", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(10);
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      PlanoTreino planoTreino0 = new PlanoTreino();
      Flexoes flexoes0 = new Flexoes();
      planoTreino0.addAtividade(flexoes0, 10);
      planoTreino0.getAtividades();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(70, flexoes0);
      planoTreino_AtividadeIteracoes0.setAtividade(flexoes0);
      planoTreino0.clone();
      LocalDate localDate1 = MockLocalDate.from(localDate0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("f=*(M*e-$rzGc", "&8ABJ|#`YGLTWUIGpw", "&8ABJ|#`YGLTWUIGpw", 10, 70, 10, localDate1, '[');
      planoTreino0.getAtividadesNumPeriodo(localDate0, localDate0);
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      // Undeclared exception!
      try { 
        planoTreino0.geraPlanoTreino(utilizadorProfissional0, linkedList0, 70, 70, 70, localDate1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(0);
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      Flexoes flexoes0 = new Flexoes();
      planoTreino0.addAtividade(flexoes0, 0);
      planoTreino0.getAtividades();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(41, flexoes0);
      planoTreino_AtividadeIteracoes0.setAtividade(flexoes0);
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0, localDate0, localDate0);
      LocalDate localDate1 = MockLocalDate.from(localDate0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("f=*(M*e-$rzGc", "&8ABJ|#`YGLTWUIGpw", "&8ABJ|#`YGLTWUIGpw", 0, 41, 0, localDate1, '[');
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      // Undeclared exception!
      try { 
        planoTreino0.geraPlanoTreino(utilizadorProfissional0, linkedList0, 41, 41, 41, localDate1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("E", "a7'CSHUBEH!ax@", "'", 2053, 2053, 2053, localDate0, '0');
      UtilizadorAmador utilizadorAmador1 = new UtilizadorAmador(utilizadorAmador0);
      UtilizadorAmador utilizadorAmador2 = new UtilizadorAmador(utilizadorAmador1, localDate0, localDate0);
      PlanoTreino planoTreino0 = utilizadorAmador2.getPlanoTreinoId(1500);
      List<Atividade> list0 = utilizadorAmador0.getAtividadesIsoladas();
      planoTreino0.geraPlanoTreino(utilizadorAmador0, list0, 0, (-1493), 644.07794, localDate0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      planoTreino0.clone();
      planoTreino0.toString();
      Corrida corrida0 = new Corrida();
      Corrida corrida1 = new Corrida(corrida0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(0, corrida1);
      corrida1.setProximoCodigo(0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      Period period0 = Period.ZERO;
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      planoTreino0.setDataRealizacao(localDate0);
      planoTreino0.toString();
      planoTreino0.addAtividade(corrida1, 0);
      planoTreino0.toString();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      planoTreino0.toString();
      planoTreino0.clone();
      planoTreino0.getDataRealizacao();
      int int0 = 451;
      // Undeclared exception!
      try { 
        planoTreino0.addAtividade((Atividade) null, 451);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.PlanoTreino", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Period period0 = Period.ofWeeks(0);
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, zoneId0);
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      planoTreino0.getAtividades();
      planoTreino0.toString();
      LocalDate localDate1 = planoTreino0.getDataRealizacao();
      planoTreino0.planoTreinoNumPeriodo(localDate0, localDate0);
      BicepCurls bicepCurls0 = new BicepCurls();
      BicepCurls bicepCurls1 = new BicepCurls(bicepCurls0);
      Period period1 = period0.multipliedBy(1629);
      period0.minus(period1);
      Ciclismo ciclismo0 = new Ciclismo();
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) ciclismo0);
      planoTreino0.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("Plano de Treino\nCodigo de Plano de Treino: 1\nData de realiza\u00E7ao: 2014-02-14\nAtividades e suas itera\u00E7oes: \n", "Plano de Treino\nCodigo de Plano de Treino: 1\nData de realiza\u00E7ao: 2014-02-14\nAtividades e suas itera\u00E7oes: \n", "E1.:zN.L;WTa}T|$O'2", 0, 1629, (-3286), localDate1, '`');
      Atividade atividade0 = bicepCurls0.geraAtividade(utilizadorAmador0, (-3286));
      bicepCurls0.setPeso(0.0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes((-3286), bicepCurls1);
      planoTreino_AtividadeIteracoes0.setIteracoes(0);
      PlanoTreino planoTreino1 = new PlanoTreino(localDate0);
      planoTreino1.compareTo(planoTreino0);
      planoTreino0.compareTo(planoTreino1);
      planoTreino0.getAtividadesNumPeriodo(localDate1, localDate0);
      planoTreino_AtividadeIteracoes0.getIteracoes();
      planoTreino1.caloriasDispendidas(utilizadorAmador0);
      planoTreino_AtividadeIteracoes0.setIteracoes(445);
      planoTreino1.addAtividade(atividade0, (-3286));
      planoTreino0.getAtividades();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LocalDate localDate0 = null;
      PlanoTreino planoTreino0 = new PlanoTreino((LocalDate) null);
      BicepCurls bicepCurls0 = new BicepCurls();
      planoTreino0.addAtividade(bicepCurls0, (-1));
      String string0 = "=C~\"O";
      int int0 = 0;
      planoTreino0.clone();
      bicepCurls0.setProximoCodigo((-1));
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("=C~\"O", "=C~\"O", "=C~\"O", (-1482), 0, 684, (LocalDate) null, 'i');
      // Undeclared exception!
      try { 
        planoTreino0.caloriasDispendidas(utilizadorPraticanteOcasional0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("Projeto.AtivRepeticoes", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("E", "a7'CSHUBEH!ax@", "unt~j_^!p`DqK]", 2053, 2053, 2053, localDate0, '0');
      UtilizadorAmador utilizadorAmador1 = new UtilizadorAmador(utilizadorAmador0);
      UtilizadorAmador utilizadorAmador2 = new UtilizadorAmador(utilizadorAmador1, localDate0, localDate0);
      PlanoTreino planoTreino0 = utilizadorAmador2.getPlanoTreinoId(1500);
      List<Atividade> list0 = utilizadorAmador2.atividadesIsoladas(localDate0, localDate0, (Predicate<Atividade>) null);
      planoTreino0.geraPlanoTreino(utilizadorAmador0, list0, 0, (-1488), 644.07794, localDate0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      LocalDate localDate0 = MockLocalDate.now();
      String string0 = "Iteracoes: ";
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) "Iteracoes: ");
      planoTreino0.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
      BenchPress benchPress0 = new BenchPress();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(0, benchPress0);
      planoTreino0.clone();
      planoTreino_AtividadeIteracoes0.toString();
      planoTreino_AtividadeIteracoes0.equals(benchPress0);
      planoTreino0.addAtividade(benchPress0, 0);
      // Undeclared exception!
      try { 
        planoTreino0.compareTo((PlanoTreino) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.PlanoTreino", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PlanoTreino planoTreino0 = null;
      try {
        planoTreino0 = new PlanoTreino((PlanoTreino) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.PlanoTreino", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LocalDate localDate0 = null;
      PlanoTreino planoTreino0 = new PlanoTreino((LocalDate) null);
      int int0 = 10;
      LocalDate localDate1 = MockLocalDate.now();
      PlanoTreino planoTreino1 = new PlanoTreino();
      planoTreino1.toString();
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) planoTreino1);
      Predicate.isEqual((Object) planoTreino0);
      // Undeclared exception!
      try { 
        planoTreino0.atividadesQueRespeitamP(localDate1, (LocalDate) null, predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(0);
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      Flexoes flexoes0 = new Flexoes();
      planoTreino0.addAtividade(flexoes0, 0);
      planoTreino0.getAtividades();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(70, flexoes0);
      planoTreino_AtividadeIteracoes0.setAtividade(flexoes0);
      planoTreino0.clone();
      LocalDate localDate1 = MockLocalDate.from(localDate0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("f=*(M*e-$rzGc", "&8ABJ|#`YGLTWUIGpw", "&8ABJ|#`YGLTWUIGpw", 0, 70, 0, localDate1, '[');
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      // Undeclared exception!
      try { 
        planoTreino0.geraPlanoTreino(utilizadorProfissional0, linkedList0, 70, 70, 70, localDate1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LocalDate localDate0 = null;
      PlanoTreino planoTreino0 = new PlanoTreino((LocalDate) null);
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      int int0 = (-1513);
      utilizadorPraticanteOcasional0.getAtividadesIsoladas();
      planoTreino1.setProximoCodigo((-2274));
      planoTreino1.toString();
      planoTreino0.setProximoCodigo((-1513));
      List<Atividade> list0 = utilizadorAmador0.getAtividadesIsoladas();
      planoTreino1.setDataRealizacao((LocalDate) null);
      // Undeclared exception!
      planoTreino1.geraPlanoTreino(utilizadorPraticanteOcasional0, list0, 0, 6, 0, (LocalDate) null);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional(utilizadorProfissional0);
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorProfissional utilizadorProfissional2 = new UtilizadorProfissional(utilizadorProfissional1, localDate0, localDate0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      UtilizadorAmador utilizadorAmador1 = new UtilizadorAmador(utilizadorAmador0);
      UtilizadorAmador utilizadorAmador2 = new UtilizadorAmador(utilizadorAmador1, localDate0, localDate0);
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) utilizadorAmador1);
      List<Atividade> list0 = utilizadorAmador2.atividadesIsoladas(localDate0, localDate0, predicate0);
      // Undeclared exception!
      try { 
        planoTreino0.geraPlanoTreino(utilizadorProfissional2, list0, 1457, 1457, 1.0, localDate0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      planoTreino0.getCodPlano();
      LocalDate localDate0 = MockLocalDate.now();
      planoTreino0.setDataRealizacao(localDate0);
      Btt btt0 = new Btt();
      Btt btt1 = new Btt(btt0);
      // Undeclared exception!
      try { 
        MockLocalDate.ofYearDay(0, 0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfYear (valid values 1 - 365/366): 0
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(823);
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0, localDate0, localDate0);
      PlanoTreino planoTreino2 = new PlanoTreino(planoTreino1);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional(utilizadorProfissional0, localDate0, localDate0);
      UtilizadorProfissional utilizadorProfissional2 = new UtilizadorProfissional(utilizadorProfissional1);
      planoTreino0.caloriasDispendidas(utilizadorProfissional2);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      planoTreino0.getAtividades();
      planoTreino0.getAtividades();
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) planoTreino0);
      // Undeclared exception!
      try { 
        planoTreino0.atividadesQueRespeitamP((LocalDate) null, (LocalDate) null, predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      // Undeclared exception!
      try { 
        planoTreino0.planoTreinoNumPeriodo((LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      LocalDate localDate0 = null;
      // Undeclared exception!
      try { 
        planoTreino0.getAtividadesNumPeriodo((LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      planoTreino0.toString();
      planoTreino0.getCodPlano();
      Btt btt0 = new Btt();
      Btt btt1 = new Btt(btt0);
      // Undeclared exception!
      try { 
        MockLocalDate.ofYearDay(0, 0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfYear (valid values 1 - 365/366): 0
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      planoTreino0.getDataRealizacao();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      planoTreino0.clone();
      PlanoTreino planoTreino1 = new PlanoTreino((LocalDate) null);
      Ciclismo ciclismo0 = new Ciclismo();
      Ciclismo ciclismo1 = new Ciclismo(ciclismo0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino1.new AtividadeIteracoes((-178), ciclismo1);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      planoTreino_AtividadeIteracoes1.toString();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      PlanoTreino planoTreino1 = new PlanoTreino();
      planoTreino0.compareTo(planoTreino1);
      planoTreino0.setProximoCodigo(0);
      LegPress legPress0 = new LegPress();
      LegPress legPress1 = new LegPress();
      legPress0.compareTo((Atividade) legPress1);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(6, legPress0);
      planoTreino_AtividadeIteracoes0.setIteracoes(0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      planoTreino0.getAtividadesNumPeriodo(localDate0, localDate0);
      planoTreino0.getCodPlano();
      planoTreino0.planoTreinoNumPeriodo(localDate0, localDate0);
      Flexoes flexoes0 = new Flexoes();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional(utilizadorProfissional0);
      Atividade atividade0 = flexoes0.geraAtividade(utilizadorProfissional1, 1);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(1, atividade0);
      planoTreino_AtividadeIteracoes0.getAtividade();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      planoTreino0.planoTreinoNumPeriodo(localDate0, localDate0);
      BicepCurls bicepCurls0 = new BicepCurls();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(1444, bicepCurls0);
      planoTreino_AtividadeIteracoes0.clone();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LocalDate localDate0 = null;
      PlanoTreino planoTreino0 = new PlanoTreino((LocalDate) null);
      planoTreino0.setProximoCodigo(2773);
      PlanoTreino planoTreino1 = null;
      try {
        planoTreino1 = new PlanoTreino(planoTreino0, (LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = null;
      try {
        planoTreino_AtividadeIteracoes0 = planoTreino1.new AtividadeIteracoes((PlanoTreino.AtividadeIteracoes) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.PlanoTreino$AtividadeIteracoes", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(7L);
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      BenchPress benchPress0 = new BenchPress();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      BenchPress benchPress1 = (BenchPress)benchPress0.geraAtividade(utilizadorProfissional0, 1);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(1, benchPress1);
      BenchPress benchPress2 = new BenchPress();
      benchPress0.setRepeticoes(1);
      planoTreino_AtividadeIteracoes0.equals(benchPress0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      planoTreino_AtividadeIteracoes1.equals(planoTreino_AtividadeIteracoes1);
      planoTreino_AtividadeIteracoes1.setIteracoes(272);
      planoTreino_AtividadeIteracoes1.setAtividade(benchPress0);
      benchPress1.setPeso(636.882721594);
      planoTreino_AtividadeIteracoes1.equals(planoTreino_AtividadeIteracoes0);
      LocalDate localDate0 = planoTreino0.getDataRealizacao();
      System.setCurrentTimeMillis(0L);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      UtilizadorAmador utilizadorAmador1 = new UtilizadorAmador(utilizadorAmador0, localDate0, localDate0);
      List<Atividade> list0 = utilizadorAmador1.getAtividadesIsoladas();
      // Undeclared exception!
      planoTreino0.geraPlanoTreino(utilizadorProfissional0, list0, (-408), 70, 249.0, localDate0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("L,~S>+8Z'9P\"S", "L,~S>+8Z'9P\"S", "L,~S>+8Z'9P\"S", (-995), (-995), (-995), localDate0, ' ');
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId((-995));
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      LocalTime localTime0 = MockLocalTime.now();
      Flexoes flexoes0 = new Flexoes(localDateTime0, localTime0, (-995), (-995));
      Flexoes flexoes1 = new Flexoes(flexoes0);
      flexoes0.toString();
      planoTreino0.addAtividade(flexoes1, 2728);
      planoTreino0.getAtividades();
      planoTreino0.getAtividades();
      planoTreino0.getCodPlano();
      planoTreino0.caloriasDispendidas(utilizadorAmador0);
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0);
      planoTreino0.getAtividadesNumPeriodo(localDate0, localDate0);
      planoTreino0.getCodPlano();
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) null);
      planoTreino0.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
      utilizadorAmador0.planosTreinos(localDate0, localDate0);
      planoTreino1.getCodPlano();
      planoTreino0.toString();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      BenchPress benchPress0 = new BenchPress();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      BenchPress benchPress1 = new BenchPress(benchPress0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(1, benchPress1);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes2 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      planoTreino_AtividadeIteracoes2.setIteracoes(0);
      planoTreino_AtividadeIteracoes1.equals(planoTreino_AtividadeIteracoes2);
      planoTreino_AtividadeIteracoes1.setAtividade(benchPress0);
      planoTreino_AtividadeIteracoes1.equals((Object) null);
      planoTreino0.getAtividades();
      System.setCurrentTimeMillis(647L);
      planoTreino0.toString();
      planoTreino0.toString();
      // Undeclared exception!
      try { 
        benchPress1.getFatorRepeticoes(1, 1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("Projeto.AtivRepeticoes", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      BenchPress benchPress0 = new BenchPress();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      BenchPress benchPress1 = (BenchPress)benchPress0.geraAtividade(utilizadorProfissional0, 1);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(1, benchPress1);
      planoTreino_AtividadeIteracoes0.getAtividade();
      benchPress0.setRepeticoes(1);
      planoTreino_AtividadeIteracoes0.equals(benchPress0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes2 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      planoTreino_AtividadeIteracoes1.equals(planoTreino_AtividadeIteracoes2);
      planoTreino_AtividadeIteracoes1.setAtividade(benchPress0);
      planoTreino_AtividadeIteracoes1.equals(planoTreino_AtividadeIteracoes0);
      planoTreino0.toString();
      // Undeclared exception!
      try { 
        benchPress1.getFatorRepeticoes(1, 1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("Projeto.AtivRepeticoes", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(0);
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      Flexoes flexoes0 = new Flexoes();
      planoTreino0.addAtividade(flexoes0, 0);
      List<PlanoTreino.AtividadeIteracoes> list0 = planoTreino0.getAtividades();
      int int0 = 70;
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(70, flexoes0);
      planoTreino_AtividadeIteracoes0.setAtividade(flexoes0);
      Object object0 = planoTreino0.clone();
      LocalDate localDate1 = MockLocalDate.from(localDate0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("f=*(M*e-$rzGc", "f=*(M*e-$rzGc", "f=*(M*e-$rzGc", 0, 70, 0, localDate1, '[');
      planoTreino_AtividadeIteracoes0.toString();
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      linkedList0.add((Atividade) flexoes0);
      planoTreino_AtividadeIteracoes0.equals(list0);
      planoTreino0.geraPlanoTreino(utilizadorProfissional0, linkedList0, 70, 70, 70, localDate1);
      object0.toString();
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) "Plano de Treino\nCodigo de Plano de Treino: 1\nData de realiza\u00E7ao: 2014-02-14\nAtividades e suas itera\u00E7oes: \nAtividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nRepeti\u00E7oes: 0\nTipo de atividade: Flex\u00F5es\nIteracoes: 0\n");
      planoTreino0.atividadesQueRespeitamP(localDate1, localDate0, predicate0);
      // Undeclared exception!
      try { 
        planoTreino0.caloriasDispendidas(utilizadorProfissional0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("Projeto.AtivRepeticoes", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      planoTreino0.setProximoCodigo(21);
      LocalDate localDate0 = MockLocalDate.now();
      List<Atividade> list0 = planoTreino0.atividadesQueRespeitamP(localDate0, localDate0, (Predicate<Atividade>) null);
      // Undeclared exception!
      planoTreino0.geraPlanoTreino((Utilizador) null, list0, 21, 1471, 1471, localDate0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Period period0 = Period.ofWeeks(0);
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, zoneId0);
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      planoTreino0.getAtividades();
      planoTreino0.toString();
      LocalDate localDate1 = planoTreino0.getDataRealizacao();
      PlanoTreino planoTreino1 = (PlanoTreino)planoTreino0.planoTreinoNumPeriodo(localDate0, localDate0);
      planoTreino1.setDataRealizacao(localDate0);
      BicepCurls bicepCurls0 = new BicepCurls();
      BicepCurls bicepCurls1 = new BicepCurls(bicepCurls0);
      Period period1 = period0.multipliedBy(1629);
      period1.withYears((-3286));
      period0.minus(period1);
      Ciclismo ciclismo0 = new Ciclismo();
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) ciclismo0);
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("Plano de Treino\nCodigo de Plano de Treino: 1\nData de realiza\u00E7ao: 2014-02-14\nAtividades e suas itera\u00E7oes: \n", "Plano de Treino\nCodigo de Plano de Treino: 1\nData de realiza\u00E7ao: 2014-02-14\nAtividades e suas itera\u00E7oes: \n", "E1.:zN.L;WTa}T|$O'2", 0, 1629, (-3286), localDate1, '`');
      bicepCurls0.setPeso(0.0);
      planoTreino0.addAtividade(bicepCurls1, (-3286));
      PlanoTreino planoTreino2 = new PlanoTreino(localDate0);
      int int0 = planoTreino2.compareTo(planoTreino0);
      assertEquals(1, int0);
      
      int int1 = planoTreino0.compareTo(planoTreino2);
      assertEquals((-1), int1);
      
      List<PlanoTreino.AtividadeIteracoes> list0 = planoTreino0.getAtividadesNumPeriodo(localDate1, localDate0);
      double double0 = planoTreino2.caloriasDispendidas(utilizadorAmador0);
      assertEquals(0.0, double0, 0.01);
      
      planoTreino2.addAtividade(bicepCurls0, (-3286));
      planoTreino0.getAtividades();
      planoTreino2.atividadesQueRespeitamP(localDate1, localDate1, predicate0);
      String string0 = planoTreino1.toString();
      assertEquals("Plano de Treino\nCodigo de Plano de Treino: 1\nData de realiza\u00E7ao: 2014-02-14\nAtividades e suas itera\u00E7oes: \n", string0);
      
      planoTreino2.planoTreinoNumPeriodo(localDate0, localDate1);
      List<PlanoTreino.AtividadeIteracoes> list1 = planoTreino0.getAtividades();
      assertFalse(list1.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      assertEquals(1, bicepCurls0.getCodAtividade());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Month month0 = Month.DECEMBER;
      LocalDate localDate0 = MockLocalDate.of(0, month0, 1);
      PlanoTreino planoTreino0 = new PlanoTreino();
      planoTreino0.getAtividadesNumPeriodo(localDate0, localDate0);
      PlanoTreino planoTreino1 = new PlanoTreino(localDate0);
      int int0 = planoTreino0.compareTo(planoTreino1);
      assertEquals(1, planoTreino1.getCodPlano());
      assertEquals(2014, int0);
      
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      UtilizadorAmador utilizadorAmador1 = new UtilizadorAmador(utilizadorAmador0);
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) planoTreino0);
      List<Atividade> list0 = utilizadorAmador1.atividadesIsoladas(localDate0, localDate0, predicate0);
      planoTreino0.geraPlanoTreino(utilizadorAmador0, list0, (-762), (-1790), (-108.26143446), localDate0);
      double double0 = planoTreino0.caloriasDispendidas((Utilizador) null);
      assertEquals(0.0, double0, 0.01);
  }
}
