/*
 * This file was automatically generated by EvoSuite
 * Wed May 28 21:58:32 GMT 2025
 */

package Projeto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Projeto.Abdominais;
import Projeto.Atividade;
import Projeto.Btt;
import Projeto.GestorDesportivo;
import Projeto.LegPress;
import Projeto.PlanoTreino;
import java.io.EOFException;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.StreamCorruptedException;
import java.time.Clock;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Month;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import java.util.List;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GestorDesportivo_ESTest extends GestorDesportivo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalDate localDate0 = MockLocalDate.now(zoneId0);
      Period period0 = Period.ofDays(0);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate1 = MockIsoChronology.dateNow(isoChronology0, zoneId0);
      // Undeclared exception!
      try { 
        gestorDesportivo0.metrosAltimetria(70, localDate1, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1L));
      LocalDate localDate1 = MockLocalDate.ofEpochDay((-190L));
      // Undeclared exception!
      try { 
        gestorDesportivo0.kmsPercorridos(484, localDate0, localDate1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      // Undeclared exception!
      try { 
        gestorDesportivo0.registaPlanoTreino(6, (-510));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now();
      // Undeclared exception!
      try { 
        gestorDesportivo0.addAtivRepsPesoPlano(5, 0, localDateTime0, localTime0, 934, 5130, 1766.0, 5130);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Clock clock0 = MockClock.systemUTC();
      LocalTime localTime0 = MockLocalTime.now(clock0);
      // Undeclared exception!
      try { 
        gestorDesportivo0.addAtivRepPlano(1, 989, localDateTime0, localTime0, 0, 1, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Instant instant0 = MockInstant.ofEpochMilli(1292L);
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(0);
      LocalDateTime localDateTime0 = MockLocalDateTime.ofInstant(instant0, zoneOffset0);
      LocalTime localTime0 = MockLocalTime.now();
      // Undeclared exception!
      try { 
        gestorDesportivo0.addAtivDistAltPlano(0, (-1010), localDateTime0, localTime0, 1907, 1, 1396.739751598386, 3710);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Month month0 = Month.APRIL;
      LocalDateTime localDateTime0 = MockLocalDateTime.of(2, month0, 2, 0, 0, 0);
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(944L);
      // Undeclared exception!
      try { 
        gestorDesportivo0.addAtivDistPlano(0, 2, localDateTime0, localTime0, 0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      // Undeclared exception!
      try { 
        gestorDesportivo0.addAtivDistPlano(1902, 1902, localDateTime0, localTime0, 0, (-2279.83629838186), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(2, 2);
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(1537L, 2, zoneOffset0);
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      int int0 = gestorDesportivo0.addAtivRepsPeso(localDateTime0, localTime0, 9, 3, 0.0, 3);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Clock clock0 = MockClock.systemUTC();
      LocalTime localTime0 = MockLocalTime.now(clock0);
      int int0 = gestorDesportivo0.addAtivRepsPeso(localDateTime0, localTime0, 0, 0, 0, 484);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      LocalTime localTime0 = MockLocalTime.now();
      int int0 = gestorDesportivo0.addAtivRep(localDateTime0, localTime0, 5, 5, (-359));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Instant instant0 = MockInstant.ofEpochMilli(1292L);
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(0);
      LocalDateTime localDateTime0 = MockLocalDateTime.ofInstant(instant0, zoneOffset0);
      LocalTime localTime0 = MockLocalTime.now();
      int int0 = gestorDesportivo0.addAtivDistAlt(localDateTime0, localTime0, (-1010), 0.0, (-1010), 4056);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDate localDate0 = MockLocalDate.now();
      int int0 = gestorDesportivo0.addUtilizador("A]", "ku[kkJ]#tNUc6/`", (String) null, 2, 2, 2, localDate0, 'K', 3);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(3177L);
      // Undeclared exception!
      try { 
        gestorDesportivo0.maisCaloriasGastas(localDate0, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDate localDate0 = MockLocalDate.now();
      LocalDate localDate1 = MockLocalDate.ofEpochDay(0L);
      // Undeclared exception!
      try { 
        gestorDesportivo0.maisAtividades(localDate1, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDate localDate0 = MockLocalDate.now();
      gestorDesportivo0.addPlanoTreino(localDate0);
      Clock clock0 = MockClock.systemUTC();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      gestorDesportivo0.addAtivRepPlano(1, (-375), localDateTime0, (LocalTime) null, 1, (-375), 1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[0];
      List<Atividade> list0 = gestorDesportivo0.listaAtividades(intArray0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      // Undeclared exception!
      try { 
        gestorDesportivo0.listaAtividades((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      // Undeclared exception!
      try { 
        gestorDesportivo0.guardaEstado((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("RGOW");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      try { 
        gestorDesportivo0.guardaEstado("RGOW/C}E~mu");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(2119L);
      // Undeclared exception!
      try { 
        gestorDesportivo0.geraPlanoTreinoUtilizador((-1152), (int[]) null, (-1152), (-1152), (-1152), localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[0];
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      // Undeclared exception!
      try { 
        gestorDesportivo0.geraPlanoTreinoUtilizador(3802, intArray0, 3802, 3802, 0.0, localDate0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Clock clock0 = MockClock.systemUTC();
      int[] intArray0 = new int[8];
      LocalDate localDate0 = MockLocalDate.now();
      gestorDesportivo0.geraPlanoTreinoUtilizador(4541, intArray0, 7, (-557), 4541, localDate0);
      LocalTime localTime0 = MockLocalTime.now(clock0);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      gestorDesportivo0.addAtivDistAlt(localDateTime0, localTime0, 2, 10.0, 10.0, 2);
      // Undeclared exception!
      try { 
        gestorDesportivo0.estadoAtualizado();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      // Undeclared exception!
      try { 
        gestorDesportivo0.carregaEstado((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".ZaVk7d,n~(.y@Cy");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "1jz&;f+7!");
      try { 
        gestorDesportivo0.carregaEstado(".ZaVk7d,n~(.y@Cy");
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // invalid stream header: 316A7A26
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".ZaVk7d,n~(.y@Cy");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      try { 
        gestorDesportivo0.carregaEstado(".ZaVk7d,n~(.y@Cy");
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      // Undeclared exception!
      try { 
        gestorDesportivo0.atividadesUtilizador(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      // Undeclared exception!
      try { 
        gestorDesportivo0.atividadesExecutadasUtilizador(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[8];
      intArray0[2] = 4;
      List<Atividade> list0 = gestorDesportivo0.listaAtividades(intArray0);
      assertEquals(8, list0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Class<Btt> class0 = Btt.class;
      Function<Atividade, Integer> function0 = (Function<Atividade, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      int int0 = gestorDesportivo0.recordInt(class0, function0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Class<Abdominais> class0 = Abdominais.class;
      Function<Atividade, Double> function0 = (Function<Atividade, Double>) mock(Function.class, new ViolatedAssumptionAnswer());
      double double0 = gestorDesportivo0.recordDouble(class0, function0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[17];
      intArray0[0] = 8;
      List<Atividade> list0 = gestorDesportivo0.listaAtividades(intArray0);
      assertEquals(17, list0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[9];
      intArray0[5] = 7;
      List<Atividade> list0 = gestorDesportivo0.listaAtividades(intArray0);
      assertEquals(9, list0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[9];
      intArray0[2] = 6;
      List<Atividade> list0 = gestorDesportivo0.listaAtividades(intArray0);
      assertEquals(9, list0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[9];
      intArray0[7] = 5;
      List<Atividade> list0 = gestorDesportivo0.listaAtividades(intArray0);
      assertEquals(9, list0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[9];
      intArray0[1] = 4;
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      // Undeclared exception!
      gestorDesportivo0.geraPlanoTreinoUtilizador((-336), intArray0, (-336), 1507, 4, localDate0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[17];
      intArray0[3] = 3;
      List<Atividade> list0 = gestorDesportivo0.listaAtividades(intArray0);
      assertEquals(17, list0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      List<Atividade> list0 = gestorDesportivo0.listaAtividades(intArray0);
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      List<Atividade> list0 = gestorDesportivo0.listaAtividades(intArray0);
      assertEquals(9, list0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      String string0 = gestorDesportivo0.mostraInfo();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now();
      // Undeclared exception!
      try { 
        gestorDesportivo0.addAtivRepsPesoPlano((-5), (-22), localDateTime0, localTime0, (-22), 718, (-2473.46), 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Clock clock0 = MockClock.systemUTC();
      LocalTime localTime0 = MockLocalTime.now(clock0);
      // Undeclared exception!
      try { 
        gestorDesportivo0.addAtivRepPlano(3157, 6, localDateTime0, localTime0, 8, 1, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now();
      // Undeclared exception!
      try { 
        gestorDesportivo0.addAtivRepPlano(0, 0, localDateTime0, localTime0, 4171, 3, 4171);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(zoneId0);
      // Undeclared exception!
      try { 
        gestorDesportivo0.addAtivDistAltPlano(0, 6, localDateTime0, (LocalTime) null, (-1541), 0.0, 1224.3393282, (-870));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Clock clock0 = MockClock.systemUTC();
      LocalTime localTime0 = MockLocalTime.now(clock0);
      // Undeclared exception!
      try { 
        gestorDesportivo0.addAtivDistPlano(4171, (-1501), localDateTime0, localTime0, (-1501), 1605.534, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Clock clock0 = MockClock.systemUTC();
      LocalTime localTime0 = MockLocalTime.now(clock0);
      int int0 = gestorDesportivo0.addAtivRepsPeso(localDateTime0, localTime0, 7, 7, 7, 7);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now();
      int int0 = gestorDesportivo0.addAtivRep(localDateTime0, localTime0, 5, 5, 5);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now();
      int int0 = gestorDesportivo0.addAtivDist(localDateTime0, localTime0, 12, (-1.0), 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now();
      int int0 = gestorDesportivo0.addAtivDist(localDateTime0, localTime0, 1, 0.0, 5);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      boolean boolean0 = gestorDesportivo0.existePlano(2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now();
      LocalTime localTime0 = MockLocalTime.now(clock0);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      gestorDesportivo0.addAtivDistAlt(localDateTime0, localTime0, 2, 10.0, 10.0, 2);
      boolean boolean0 = gestorDesportivo0.existeAtividade(1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      boolean boolean0 = gestorDesportivo0.existeAtividade(3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      boolean boolean0 = gestorDesportivo0.existeUtilizador(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      String string0 = gestorDesportivo0.showPlanoTreino((-2773));
      assertEquals("Nao existe plano de treino com este codigo\n", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Clock clock0 = MockClock.systemUTC();
      LocalTime localTime0 = MockLocalTime.now(clock0);
      gestorDesportivo0.addAtivRep(localDateTime0, localTime0, 2114, 484, 2114);
      String string0 = gestorDesportivo0.showAtividade(1);
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 20:21:21.320\nFrequencia Cardiaca: 2114 bpm\nRepeti\u00E7oes: 484\nTipo de atividade: Abdominais\n", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      String string0 = gestorDesportivo0.showAtividade(1425);
      assertEquals("Nao existe atividade com este codigo\n", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      String string0 = gestorDesportivo0.showUtilizador(6);
      assertEquals("Nao existe utilizador com este codigo\n", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDate localDate0 = MockLocalDate.now();
      int int0 = gestorDesportivo0.addUtilizador("", "g[=A", "", 0, 3, 750, localDate0, ':', 3);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1L));
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int int0 = gestorDesportivo0.addUtilizador("Projeto.Corrida", (String) null, "", 0, 1, 77, localDate0, 'R', 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      String string0 = gestorDesportivo0.atividadeMaisRealizada();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      PlanoTreino planoTreino0 = gestorDesportivo0.planoTreinoMaisCalorias(localDate0);
      assertNull(planoTreino0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDate localDate0 = MockLocalDate.now();
      gestorDesportivo0.addUtilizador("Ok\n", "", "Nao existe plano de treino com este codigo\n", 4, (-4411), 0, localDate0, '!', (-4411));
      gestorDesportivo0.atualizaInfo(localDate0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now();
      LocalTime localTime0 = MockLocalTime.now(clock0);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      gestorDesportivo0.addAtivDistAlt(localDateTime0, localTime0, 2, 10.0, 10.0, 2);
      gestorDesportivo0.estadoAtualizado();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      gestorDesportivo0.estadoAtualizado();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDate localDate0 = MockLocalDate.now();
      gestorDesportivo0.addUtilizador("Nao existe utilizador com este codigo\n", (String) null, (String) null, 471, 471, 471, localDate0, '0', 3557);
      gestorDesportivo0.estadoAtualizado();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      try { 
        gestorDesportivo0.carregaEstado("Nao existe plano de treino com este codigo\n");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Class<Btt> class0 = Btt.class;
      double double0 = gestorDesportivo0.recordMaisCalorias(class0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Class<Abdominais> class0 = Abdominais.class;
      int int0 = gestorDesportivo0.recordMaisTempo(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Class<LegPress> class0 = LegPress.class;
      double double0 = gestorDesportivo0.recordMaisVelocidade(class0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Class<Integer> class0 = Integer.class;
      double double0 = gestorDesportivo0.recordMaisPeso(class0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDate localDate0 = MockLocalDate.now();
      gestorDesportivo0.addPlanoTreino(localDate0);
      gestorDesportivo0.estadoAtualizado();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      try { 
        gestorDesportivo0.guardaEstado("RGOW/C}E~mu");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Class<Abdominais> class0 = Abdominais.class;
      double double0 = gestorDesportivo0.recordMaisDistancia(class0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Class<PlanoTreino> class0 = PlanoTreino.class;
      double double0 = gestorDesportivo0.recordMaiorAltimetria(class0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      // Undeclared exception!
      try { 
        gestorDesportivo0.registaAtividade((-3486), (-1037));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Class<Object> class0 = Object.class;
      int int0 = gestorDesportivo0.recordMaisRepeticoes(class0);
      assertEquals(0, int0);
  }
}
