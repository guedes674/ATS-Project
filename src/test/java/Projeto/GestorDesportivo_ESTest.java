/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 15:19:19 GMT 2025
 */

package Projeto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Projeto.Abdominais;
import Projeto.Atividade;
import Projeto.BenchPress;
import Projeto.BicepCurls;
import Projeto.Ciclismo;
import Projeto.Flexoes;
import Projeto.GestorDesportivo;
import Projeto.PlanoTreino;
import Projeto.Utilizador;
import Projeto.UtilizadorAmador;
import java.io.EOFException;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.StreamCorruptedException;
import java.time.Clock;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import java.util.List;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GestorDesportivo_ESTest extends GestorDesportivo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDate localDate0 = MockLocalDate.ofYearDay(8, 7);
      Period period0 = Period.between(localDate0, localDate0);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate1 = MockIsoChronology.dateNow(isoChronology0);
      // Undeclared exception!
      try { 
        gestorDesportivo0.metrosAltimetria((-1), localDate0, localDate1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDate localDate0 = MockLocalDate.ofYearDay(8, 7);
      Period period0 = Period.between(localDate0, localDate0);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate1 = MockIsoChronology.dateNow(isoChronology0);
      // Undeclared exception!
      try { 
        gestorDesportivo0.kmsPercorridos(18, localDate1, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDate localDate0 = MockLocalDate.now();
      LocalTime localTime0 = MockLocalTime.of(0, 0, 0, 0);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      // Undeclared exception!
      try { 
        gestorDesportivo0.addAtivRepsPesoPlano(1887, 411, localDateTime0, localTime0, 0, (-1162), 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDate localDate0 = MockLocalDate.now();
      LocalTime localTime0 = MockLocalTime.of(0, 0, 0, 0);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      // Undeclared exception!
      try { 
        gestorDesportivo0.addAtivRepsPesoPlano(1887, 411, localDateTime0, localTime0, 0, (-1162), 0, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.of(6, 6, 6);
      // Undeclared exception!
      try { 
        gestorDesportivo0.addAtivRepsPesoPlano(6, 6, localDateTime0, localTime0, 6, 6, 0.0, 70);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      // Undeclared exception!
      try { 
        gestorDesportivo0.addAtivRepPlano(1051, (-1612), (LocalDateTime) null, localTime0, 5, (-1612), 1469);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-280));
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      // Undeclared exception!
      try { 
        gestorDesportivo0.addAtivDistAltPlano(6, 9, (LocalDateTime) null, localTime0, (-138), (-1.0), 1444.937, (-138));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalTime localTime0 = MockLocalTime.ofNanoOfDay(0L);
      // Undeclared exception!
      try { 
        gestorDesportivo0.addAtivDistAltPlano(6, 2, (LocalDateTime) null, localTime0, 4, (-775.6573269), 0.0, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      // Undeclared exception!
      try { 
        gestorDesportivo0.addAtivDistAltPlano(1051, 0, localDateTime0, localTime0, 0, 1.25, 112.31623229287, 1051);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      // Undeclared exception!
      try { 
        gestorDesportivo0.registaAtividade(584, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalTime localTime0 = MockLocalTime.ofNanoOfDay(0L);
      int int0 = gestorDesportivo0.addAtivRepsPeso((LocalDateTime) null, localTime0, 3572, 3608, 0.22, 1051);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.from(localDateTime0);
      int int0 = gestorDesportivo0.addAtivRep(localDateTime0, localTime0, 138, 5, 138);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.from(localDateTime0);
      int int0 = gestorDesportivo0.addAtivRep(localDateTime0, localTime0, 0, (-2139), (-2139));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now();
      int int0 = gestorDesportivo0.addAtivDistAlt(localDateTime0, localTime0, (-909), 2879, (-909), 22);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(3261L);
      int int0 = gestorDesportivo0.addUtilizador("\n", "", "", 5, 8, 43, localDate0, 'Y', 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalDate localDate0 = MockLocalDate.from(localDateTime0);
      LocalDate localDate1 = MockLocalDate.ofEpochDay(1460L);
      // Undeclared exception!
      try { 
        gestorDesportivo0.maisCaloriasGastas(localDate0, localDate1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      LocalDate localDate1 = MockLocalDate.now();
      // Undeclared exception!
      try { 
        gestorDesportivo0.maisAtividades(localDate0, localDate1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(3261L);
      gestorDesportivo0.addUtilizador("=a\"fH>8", "A", "=a\"fH>8", (-987), (-1592), (-987), localDate0, '=', (-1757));
      gestorDesportivo0.addPlanoTreino(localDate0);
      gestorDesportivo0.registaPlanoTreino(1, 1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      gestorDesportivo0.addPlanoTreino(localDate0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      gestorDesportivo0.addAtivRepsPesoPlano(1, (-312), localDateTime0, (LocalTime) null, 1, 1, (-312), (-1287));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDate localDate0 = MockLocalDate.ofYearDay(0, 7);
      gestorDesportivo0.addUtilizador("", "", "", 1051, 0, 7, localDate0, 'Y', 1051);
      gestorDesportivo0.atualizaInfo(localDate0);
      Utilizador utilizador0 = gestorDesportivo0.maisCaloriasGastas(localDate0, localDate0);
      assertEquals(1051, utilizador0.getFreqCardiaca());
      assertEquals('Y', utilizador0.getGenero());
      assertEquals(7, utilizador0.getAltura());
      assertEquals(0.0, utilizador0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[0];
      List<Atividade> list0 = gestorDesportivo0.listaAtividades(intArray0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      // Undeclared exception!
      try { 
        gestorDesportivo0.listaAtividades((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      try { 
        gestorDesportivo0.guardaEstado("Projeto.LegPress");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      try { 
        gestorDesportivo0.guardaEstado("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("SF_");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Nao existe plano de treino com este codigo\n");
      try { 
        gestorDesportivo0.carregaEstado("SF_");
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // invalid stream header: 4E616F20
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      try { 
        gestorDesportivo0.carregaEstado("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/I;[&3");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      try { 
        gestorDesportivo0.carregaEstado("/I;[&3");
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      // Undeclared exception!
      try { 
        gestorDesportivo0.atividadesUtilizador((-3188));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      // Undeclared exception!
      try { 
        gestorDesportivo0.atividadesExecutadasUtilizador(1832);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[5];
      intArray0[0] = 7;
      List<Atividade> list0 = gestorDesportivo0.listaAtividades(intArray0);
      assertEquals(5, list0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[2];
      intArray0[1] = 4;
      List<Atividade> list0 = gestorDesportivo0.listaAtividades(intArray0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[8];
      intArray0[7] = 1;
      List<Atividade> list0 = gestorDesportivo0.listaAtividades(intArray0);
      assertEquals(8, list0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Class<BenchPress> class0 = BenchPress.class;
      Function<Atividade, Integer> function0 = (Function<Atividade, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      int int0 = gestorDesportivo0.recordInt(class0, function0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Class<BicepCurls> class0 = BicepCurls.class;
      Function<Atividade, Double> function0 = (Function<Atividade, Double>) mock(Function.class, new ViolatedAssumptionAnswer());
      double double0 = gestorDesportivo0.recordDouble(class0, function0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      Period period0 = Period.ofMonths(0);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      gestorDesportivo0.addUtilizador((String) null, (String) null, "gn1", 7, 7, (-2286), localDate0, 'y', (-417));
      int[] intArray0 = new int[5];
      gestorDesportivo0.geraPlanoTreinoUtilizador(1, intArray0, 7, 7, 0.0, localDate0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[9];
      intArray0[0] = 9;
      List<Atividade> list0 = gestorDesportivo0.listaAtividades(intArray0);
      assertEquals(9, list0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[5];
      intArray0[3] = 8;
      List<Atividade> list0 = gestorDesportivo0.listaAtividades(intArray0);
      assertEquals(5, list0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      Period period0 = Period.ofMonths(0);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      int[] intArray0 = new int[5];
      intArray0[1] = 7;
      // Undeclared exception!
      try { 
        gestorDesportivo0.geraPlanoTreinoUtilizador(1, intArray0, 7, 7, 0.0, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Corrida", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[5];
      intArray0[4] = 6;
      List<Atividade> list0 = gestorDesportivo0.listaAtividades(intArray0);
      assertEquals(5, list0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[2];
      intArray0[0] = 5;
      List<Atividade> list0 = gestorDesportivo0.listaAtividades(intArray0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[9];
      intArray0[0] = 4;
      LocalDate localDate0 = MockLocalDate.now();
      // Undeclared exception!
      gestorDesportivo0.geraPlanoTreinoUtilizador(4, intArray0, (-1807), 4, 0.0, localDate0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[9];
      intArray0[8] = 3;
      List<Atividade> list0 = gestorDesportivo0.listaAtividades(intArray0);
      assertEquals(9, list0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      List<Atividade> list0 = gestorDesportivo0.listaAtividades(intArray0);
      assertEquals(5, list0.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[16];
      intArray0[3] = 1;
      LocalDate localDate0 = MockLocalDate.ofEpochDay(209L);
      gestorDesportivo0.geraPlanoTreinoUtilizador(7, intArray0, 7, (-1015), (-2309.0), localDate0);
      assertEquals(16, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      String string0 = gestorDesportivo0.mostraInfo();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      // Undeclared exception!
      try { 
        gestorDesportivo0.addAtivRepsPesoPlano(1, (-312), localDateTime0, (LocalTime) null, 1, 1, (-312), 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      // Undeclared exception!
      try { 
        gestorDesportivo0.addAtivRepPlano(1051, (-1612), (LocalDateTime) null, localTime0, 5, (-1612), 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      // Undeclared exception!
      try { 
        gestorDesportivo0.addAtivRepPlano(298, 9, (LocalDateTime) null, localTime0, (-1612), (-3292), 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Clock clock0 = MockClock.systemUTC();
      LocalTime localTime0 = MockLocalTime.now(clock0);
      // Undeclared exception!
      try { 
        gestorDesportivo0.addAtivDistPlano(10, 0, (LocalDateTime) null, localTime0, 1, 0.0, (-1608));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(1, 1);
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      LocalTime localTime0 = MockLocalTime.ofNanoOfDay(1);
      int int0 = gestorDesportivo0.addAtivRepsPeso(localDateTime0, localTime0, 1, (-1576), 1, 7);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now();
      int int0 = gestorDesportivo0.addAtivRepsPeso(localDateTime0, localTime0, 0, 5, 5, 5);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now();
      int int0 = gestorDesportivo0.addAtivDist(localDateTime0, localTime0, 0, 9, 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      int int0 = gestorDesportivo0.addAtivDist(localDateTime0, (LocalTime) null, 542, 1945.0, 34);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(3261L);
      gestorDesportivo0.addPlanoTreino(localDate0);
      boolean boolean0 = gestorDesportivo0.existePlano(1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      boolean boolean0 = gestorDesportivo0.existePlano(61);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      boolean boolean0 = gestorDesportivo0.existeAtividade(298);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(3261L);
      gestorDesportivo0.addUtilizador("=a\"fH>8", "=a\"fH>8", "=a\"fH>8", (-987), (-1592), (-987), localDate0, '=', (-1740));
      boolean boolean0 = gestorDesportivo0.existeUtilizador(1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      boolean boolean0 = gestorDesportivo0.existeUtilizador(5);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(3261L);
      gestorDesportivo0.addPlanoTreino(localDate0);
      String string0 = gestorDesportivo0.showPlanoTreino(1);
      assertEquals("Plano de Treino\nCodigo de Plano de Treino: 1\nData de realiza\u00E7ao: 1978-12-06\nAtividades e suas itera\u00E7oes: \n", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      String string0 = gestorDesportivo0.showPlanoTreino(1);
      assertEquals("Nao existe plano de treino com este codigo\n", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Clock clock0 = MockClock.systemUTC();
      LocalTime localTime0 = MockLocalTime.now(clock0);
      gestorDesportivo0.addAtivDistAlt(localDateTime0, localTime0, 311, 311, (-3944.190632), 3);
      String string0 = gestorDesportivo0.showAtividade(1);
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 20:21:21.320\nFrequencia Cardiaca: 311 bpm\nDistancia: 311.0 metros\nAltimetria: -3944.190632 metros\nTipo de atividade: Trail\n", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      String string0 = gestorDesportivo0.showAtividade((-3655));
      assertEquals("Nao existe atividade com este codigo\n", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDate localDate0 = MockLocalDate.now();
      gestorDesportivo0.addUtilizador("", "", "", 1044, 0, (-8), localDate0, 'Y', 1044);
      String string0 = gestorDesportivo0.showUtilizador(1);
      assertEquals("Utilizador\nCodigo de Utilizador: 1\nNome: \nMorada: \nEmail: \nFrequencia Cardiaca: 1044 bpm\nPeso: 0.0 kilos\nAltura: -8 centimetros\nData de nascimento 14/02/2014\nIdade: 0 anos\nGenero: Y\nAtividades: \n\nPlanos de treino: \n\nTipo de Utilizador: Praticante Ocasional\n", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      String string0 = gestorDesportivo0.showUtilizador(9);
      assertEquals("Nao existe utilizador com este codigo\n", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      String string0 = gestorDesportivo0.atividadeMaisRealizada();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(12L);
      PlanoTreino planoTreino0 = gestorDesportivo0.planoTreinoMaisCalorias(localDate0);
      assertNull(planoTreino0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDate localDate0 = MockLocalDate.ofYearDay(0, 7);
      gestorDesportivo0.addUtilizador("", "", "", 1051, 0, 7, localDate0, 'Y', 1051);
      gestorDesportivo0.atualizaInfo(localDate0);
      String string0 = gestorDesportivo0.mostraInfo();
      assertEquals("Utilizador\nCodigo de Utilizador: 1\nNome: \nMorada: \nEmail: \nFrequencia Cardiaca: 1051 bpm\nPeso: 0.0 kilos\nAltura: 7 centimetros\nData de nascimento 07/01/0001\nIdade: 2014 anos\nGenero: Y\nAtividades: \n\nPlanos de treino: \n\nTipo de Utilizador: Praticante Ocasional\n", string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      gestorDesportivo0.addAtivDistAlt(localDateTime0, (LocalTime) null, 0, 0, 1945.0, 0);
      gestorDesportivo0.estadoAtualizado();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      gestorDesportivo0.estadoAtualizado();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(3261L);
      gestorDesportivo0.addUtilizador("=a\"fH>8", "=a\"fH>8", "=a\"fH>8", (-987), (-1592), (-987), localDate0, '=', (-1740));
      gestorDesportivo0.estadoAtualizado();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      // Undeclared exception!
      try { 
        gestorDesportivo0.carregaEstado((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Class<UtilizadorAmador> class0 = UtilizadorAmador.class;
      double double0 = gestorDesportivo0.recordMaisCalorias(class0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      // Undeclared exception!
      try { 
        gestorDesportivo0.registaPlanoTreino((-1741), 11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Class<Ciclismo> class0 = Ciclismo.class;
      int int0 = gestorDesportivo0.recordMaisTempo(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Class<Flexoes> class0 = Flexoes.class;
      double double0 = gestorDesportivo0.recordMaisVelocidade(class0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Class<Object> class0 = Object.class;
      double double0 = gestorDesportivo0.recordMaisPeso(class0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(3261L);
      gestorDesportivo0.addPlanoTreino(localDate0);
      gestorDesportivo0.estadoAtualizado();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      // Undeclared exception!
      try { 
        gestorDesportivo0.guardaEstado((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Class<Flexoes> class0 = Flexoes.class;
      double double0 = gestorDesportivo0.recordMaisDistancia(class0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Class<BicepCurls> class0 = BicepCurls.class;
      double double0 = gestorDesportivo0.recordMaiorAltimetria(class0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Class<Abdominais> class0 = Abdominais.class;
      int int0 = gestorDesportivo0.recordMaisRepeticoes(class0);
      assertEquals(0, int0);
  }
}
