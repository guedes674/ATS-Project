/*
 * This file was automatically generated by EvoSuite
 * Wed May 28 22:15:53 GMT 2025
 */

package Projeto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Projeto.UtilizadorAmador;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UtilizadorAmador_ESTest extends UtilizadorAmador_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      LocalDate localDate0 = MockLocalDate.now();
      LocalDate localDate1 = MockLocalDate.now();
      Object object0 = utilizadorAmador0.utilizadorNumPeriodo(localDate0, localDate1);
      assertNotSame(object0, utilizadorAmador0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "5zHtW%zCvWo&X?", "f/0\"!7EK=xZgb)!G!t", 0, 0, 5, (LocalDate) null, 'I');
      // Undeclared exception!
      try { 
        utilizadorAmador0.utilizadorNumPeriodo((LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "", "\nTipo de Utilizador: Amador\n", 493, 493, 493, (LocalDate) null, '.');
      // Undeclared exception!
      try { 
        utilizadorAmador0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador((String) null, (String) null, "c(fx7r3J", '+', (-2047), '+', (LocalDate) null, '+');
      UtilizadorAmador utilizadorAmador1 = new UtilizadorAmador(utilizadorAmador0, localDate0, localDate0);
      // Undeclared exception!
      try { 
        utilizadorAmador0.equals(utilizadorAmador1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      UtilizadorAmador utilizadorAmador0 = null;
      try {
        utilizadorAmador0 = new UtilizadorAmador((UtilizadorAmador) null, localDate0, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = null;
      try {
        utilizadorAmador0 = new UtilizadorAmador((UtilizadorAmador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      UtilizadorAmador utilizadorAmador1 = new UtilizadorAmador(utilizadorAmador0);
      assertEquals(0, utilizadorAmador1.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador((String) null, (String) null, "qt_Ye*y]0s.k3K", ')', (-2054), ')', localDate0, ')');
      boolean boolean0 = utilizadorAmador0.equals("Utilizador\nCodigo de Utilizador: 0\nNome: \nMorada: \nEmail: \nFrequencia Cardiaca: 0 bpm\nPeso: 0.0 kilos\nAltura: 0 centimetros\nData de nascimento 14/02/2014\nIdade: 0 anos\nGenero: \u0000\nAtividades: \n\nPlanos de treino: \n\nTipo de Utilizador: Amador\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador((String) null, (String) null, "qt_Ye*y]0s.k3K", ')', (-2054), ')', localDate0, ')');
      boolean boolean0 = utilizadorAmador0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      boolean boolean0 = utilizadorAmador0.equals(utilizadorAmador0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Period period0 = Period.of(2566, 2566, 2566);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("&%~9Tkg<Hpa2Je", "", "Projeto.PlanoTreino", 0, (-2344), 0, localDate0, '6');
      Object object0 = utilizadorAmador0.clone();
      assertNotSame(object0, utilizadorAmador0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Period period0 = Period.of(2566, 2566, 2566);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("&%~9Tkg<Hpa2Je", "", "Projeto.PlanoTreino", 0, (-2344), 0, localDate0, '6');
      double double0 = utilizadorAmador0.getFatorMultiplicativo();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador((String) null, (String) null, "qt_Ye*y]0s.k3K", ')', (-2054), ')', localDate0, ')');
      String string0 = utilizadorAmador0.toString();
      assertEquals("Utilizador\nCodigo de Utilizador: 1\nNome: null\nMorada: null\nEmail: qt_Ye*y]0s.k3K\nFrequencia Cardiaca: 41 bpm\nPeso: -2054.0 kilos\nAltura: 41 centimetros\nData de nascimento 14/02/2014\nIdade: 0 anos\nGenero: )\nAtividades: \n\nPlanos de treino: \n\nTipo de Utilizador: Amador\n", string0);
  }
}
