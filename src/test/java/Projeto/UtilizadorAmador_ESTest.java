/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 15:35:59 GMT 2025
 */

package Projeto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Projeto.UtilizadorAmador;
import java.time.LocalDate;
import java.time.Month;
import java.time.Period;
import java.time.chrono.IsoChronology;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UtilizadorAmador_ESTest extends UtilizadorAmador_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      Month month0 = Month.NOVEMBER;
      LocalDate localDate0 = MockLocalDate.of(1, month0, 1);
      LocalDate localDate1 = MockLocalDate.now();
      Object object0 = utilizadorAmador0.utilizadorNumPeriodo(localDate1, localDate0);
      assertNotSame(object0, utilizadorAmador0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      // Undeclared exception!
      try { 
        utilizadorAmador0.utilizadorNumPeriodo((LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "", "", 1497, 1497, 0, (LocalDate) null, 'I');
      // Undeclared exception!
      try { 
        utilizadorAmador0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      utilizadorAmador0.setDataNascimento((LocalDate) null);
      Object object0 = utilizadorAmador0.clone();
      // Undeclared exception!
      try { 
        utilizadorAmador0.equals(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = null;
      try {
        utilizadorAmador0 = new UtilizadorAmador((UtilizadorAmador) null, localDate0, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = null;
      try {
        utilizadorAmador0 = new UtilizadorAmador((UtilizadorAmador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      Month month0 = Month.NOVEMBER;
      LocalDate localDate0 = MockLocalDate.of(1, month0, 1);
      UtilizadorAmador utilizadorAmador1 = new UtilizadorAmador(utilizadorAmador0, localDate0, localDate0);
      assertEquals('\u0000', utilizadorAmador1.getGenero());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      UtilizadorAmador utilizadorAmador1 = new UtilizadorAmador(utilizadorAmador0);
      assertEquals("", utilizadorAmador1.getMorada());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      Object object0 = utilizadorAmador0.clone();
      utilizadorAmador0.equals(object0);
      assertNotSame(object0, utilizadorAmador0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador((String) null, (String) null, (String) null, (-149), (-149), 'b', localDate0, 'b');
      boolean boolean0 = utilizadorAmador0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      boolean boolean0 = utilizadorAmador0.equals(utilizadorAmador0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      boolean boolean0 = utilizadorAmador0.equals("f7bp");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Period period0 = Period.ofYears(2238);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("Projeto.UtilizadorAmador", (String) null, "Projeto.UtilizadorAmador", 5, (-229), 2238, localDate0, 'B');
      String string0 = utilizadorAmador0.toString();
      assertEquals("Utilizador\nCodigo de Utilizador: 1\nNome: Projeto.UtilizadorAmador\nMorada: null\nEmail: Projeto.UtilizadorAmador\nFrequencia Cardiaca: 5 bpm\nPeso: -229.0 kilos\nAltura: 2238 centimetros\nData de nascimento 14/02/2014\nIdade: 0 anos\nGenero: B\nAtividades: \n\nPlanos de treino: \n\nTipo de Utilizador: Amador\n", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador((String) null, (String) null, (String) null, (-149), (-149), 'b', localDate0, 'b');
      double double0 = utilizadorAmador0.getFatorMultiplicativo();
      assertEquals(1.0, double0, 0.01);
  }
}
