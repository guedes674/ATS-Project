/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 15:27:37 GMT 2025
 */

package Projeto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Projeto.Btt;
import Projeto.Utilizador;
import Projeto.UtilizadorAmador;
import Projeto.UtilizadorPraticanteOcasional;
import Projeto.UtilizadorProfissional;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Btt_ESTest extends Btt_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      LocalTime localTime0 = MockLocalTime.now();
      Btt btt0 = new Btt(localDateTime0, localTime0, 2639, (-1997.4407430416138), 2639);
      Period period0 = Period.ofMonths(0);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("", "", "", 0, 1235, 1235, localDate0, '3');
      Btt btt1 = (Btt)btt0.geraAtividade(utilizadorProfissional0, 0.11);
      assertEquals(0.0, btt1.getDistancia(), 0.01);
      assertEquals(0, btt1.getFreqCardiaca());
      assertEquals(0.0, btt1.getFatorAltimetria(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Btt btt0 = new Btt();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      utilizadorAmador0.setAltura(70);
      Btt btt1 = (Btt)btt0.geraAtividade(utilizadorAmador0, 4.0);
      assertEquals(0, btt1.getFreqCardiaca());
      assertEquals(819.0, btt1.getDistancia(), 0.01);
      assertEquals(0.0, btt1.getAltimetria(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Btt btt0 = new Btt();
      assertEquals(1.05, btt0.getFatorHard(), 0.01);
      
      btt0.setAltimetria(2000.0);
      double double0 = btt0.getFatorHard();
      assertEquals(1.1500000000000001, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now();
      Btt btt0 = new Btt(localDateTime0, localTime0, (-1), 1473L, (-1));
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      btt0.setAltimetria(1000.0);
      double double0 = btt0.consumoCalorias(utilizadorProfissional0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.05, btt0.getFatorHard(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Btt btt0 = new Btt();
      btt0.setProximoCodigo(0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      Btt btt1 = (Btt)btt0.geraAtividade(utilizadorPraticanteOcasional0, 1000.0);
      assertEquals(2.25485782935E10, btt1.getDistancia(), 0.01);
      assertEquals(0, btt1.getFreqCardiaca());
      assertEquals(0.0, btt1.getAltimetria(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Btt btt0 = new Btt();
      btt0.setProximoCodigo((-1));
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      Btt btt1 = (Btt)btt0.geraAtividade(utilizadorPraticanteOcasional0, (-1));
      assertEquals(0, btt1.getFreqCardiaca());
      assertEquals(0.0, btt1.getFatorAltimetria(), 0.01);
      assertEquals((-2.2548578304E10), btt1.getDistancia(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Btt btt0 = new Btt();
      btt0.setFreqCardiaca(6);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      LocalTime localTime0 = MockLocalTime.of(6, 6);
      btt0.setTempo(localTime0);
      double double0 = btt0.consumoCalorias(utilizadorProfissional0);
      assertEquals(-0.0, double0, 0.01);
      assertEquals(1.05, btt0.getFatorHard(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(1L);
      Btt btt0 = new Btt(localDateTime0, localTime0, 3, 1.15, 4077.31);
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalDate localDate0 = MockLocalDate.now(zoneId0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("", "", "", (-1620), 0, 3, localDate0, 'V');
      System.setCurrentTimeMillis(0L);
      double double0 = btt0.consumoCalorias(utilizadorProfissional0);
      assertEquals(6.239269575557004, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(1L);
      Btt btt0 = new Btt(localDateTime0, localTime0, 3, 1.15, 4077.31);
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalDate localDate0 = MockLocalDate.now(zoneId0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("", "", "", (-1620), 0, 3, localDate0, 'V');
      double double0 = btt0.consumoCalorias(utilizadorProfissional0);
      assertEquals((-0.5812984076605904), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      Btt btt0 = new Btt((LocalDateTime) null, localTime0, 1575, 1575, 1575);
      // Undeclared exception!
      try { 
        btt0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Btt btt0 = new Btt();
      // Undeclared exception!
      try { 
        btt0.geraAtividade((Utilizador) null, (-930.884598));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Btt", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Btt btt0 = new Btt();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      // Undeclared exception!
      try { 
        btt0.consumoCalorias(utilizadorProfissional0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Btt btt0 = null;
      try {
        btt0 = new Btt((Btt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      Btt btt0 = new Btt((LocalDateTime) null, localTime0, 0, 0, 427.907817);
      double double0 = btt0.getFatorHard();
      assertEquals(1.05, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      Btt btt0 = new Btt((LocalDateTime) null, localTime0, 0, 0, 427.907817);
      Btt btt1 = new Btt(btt0);
      // Undeclared exception!
      try { 
        btt1.equals(btt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Btt btt0 = new Btt();
      boolean boolean0 = btt0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      Btt btt0 = new Btt((LocalDateTime) null, localTime0, 0, 0, 427.907817);
      boolean boolean0 = btt0.equals(btt0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Btt btt0 = new Btt();
      Double double0 = new Double(3138.0156731);
      boolean boolean0 = btt0.equals(double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      Btt btt0 = new Btt((LocalDateTime) null, localTime0, 1575, 1575, 1575);
      double double0 = btt0.getFatorHard();
      assertEquals(1.1500000000000001, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.ofNanoOfDay(1461L);
      Btt btt0 = new Btt(localDateTime0, localTime0, 33, 1461L, 33);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      double double0 = btt0.consumoCalorias(utilizadorProfissional0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(1.05, btt0.getFatorHard(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Btt btt0 = new Btt();
      // Undeclared exception!
      try { 
        btt0.consumoCalorias((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Btt", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Btt btt0 = new Btt();
      Object object0 = btt0.clone();
      assertNotSame(object0, btt0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now();
      Btt btt0 = new Btt(localDateTime0, localTime0, 2090, 2090, 2090);
      double double0 = btt0.getFatorHard();
      assertEquals(1.2500000000000002, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Btt btt0 = new Btt();
      String string0 = btt0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nDistancia: 0.0 metros\nAltimetria: 0.0 metros\nTipo de atividade: BTT\n", string0);
  }
}
