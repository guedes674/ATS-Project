/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 15:37:27 GMT 2025
 */

package Projeto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Projeto.Corrida;
import Projeto.Utilizador;
import Projeto.UtilizadorAmador;
import Projeto.UtilizadorProfissional;
import java.time.Clock;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Month;
import java.time.ZoneId;
import java.time.ZoneOffset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Corrida_ESTest extends Corrida_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: -1911 bpm\nDistancia: 0.0 metros\nTipo de atividade: Corrida\n", "Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: -1911 bpm\nDistancia: 0.0 metros\nTipo de atividade: Corrida\n", "[1`", (-2241), 7, 7, localDate0, '>');
      Corrida corrida1 = (Corrida)corrida0.geraAtividade(utilizadorProfissional0, (-1178.154));
      assertEquals(0, corrida1.getFreqCardiaca());
      assertEquals((-164060.6), corrida1.getDistancia(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      corrida0.setProximoCodigo(0);
      Corrida corrida1 = (Corrida)corrida0.geraAtividade(utilizadorProfissional0, 261.73);
      assertEquals(4.724464023400001E9, corrida1.getDistancia(), 0.01);
      assertEquals(0, corrida1.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      corrida0.setProximoCodigo((-1));
      Corrida corrida1 = (Corrida)corrida0.geraAtividade(utilizadorAmador0, 86400.0);
      assertEquals(0, corrida1.getFreqCardiaca());
      assertEquals(4.724464023400001E9, corrida1.getDistancia(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now();
      Corrida corrida0 = new Corrida(localDateTime0, localTime0, (-2109), (-2109));
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      double double0 = corrida0.consumoCalorias(utilizadorAmador0);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      Corrida corrida0 = new Corrida(localDateTime0, localTime0, (-2451), (-776.822214));
      Clock clock0 = MockClock.system(zoneOffset0);
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("\nPeso: ", "", "ZzF`u(>", (-2451), 0, 2283, localDate0, 'V');
      double double0 = corrida0.consumoCalorias(utilizadorAmador0);
      assertEquals(11005.031216896043, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.of(4, 4, 4, 4, 4);
      Clock clock0 = MockClock.systemDefaultZone();
      LocalTime localTime0 = MockLocalTime.now(clock0);
      Corrida corrida0 = new Corrida(localDateTime0, localTime0, 4, 4);
      Month month0 = Month.APRIL;
      LocalDate localDate0 = MockLocalDate.of(0, month0, 2);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "N", "Atividade\nId: 1\nData e hora: 04/04/0004 04:04:00\nDura\u00E7ao: 23:59:59.999\nFrequencia Cardiaca: 4 bpm\nDistancia: 4.0 metros\nTipo de atividade: Corrida\n", 0, 0, 193, localDate0, ':');
      double double0 = corrida0.consumoCalorias(utilizadorAmador0);
      assertEquals((-21728.62794027779), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      Corrida corrida0 = new Corrida((LocalDateTime) null, localTime0, 228, (-2268.0317946930872));
      // Undeclared exception!
      try { 
        corrida0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      // Undeclared exception!
      try { 
        corrida0.geraAtividade((Utilizador) null, 0.1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Corrida", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Month month0 = Month.DECEMBER;
      LocalDateTime localDateTime0 = MockLocalDateTime.of(0, month0, 10, 10, 0, 0);
      Corrida corrida0 = new Corrida(localDateTime0, (LocalTime) null, 10, 0);
      Object object0 = corrida0.clone();
      // Undeclared exception!
      try { 
        corrida0.equals(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      // Undeclared exception!
      try { 
        corrida0.consumoCalorias((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Corrida", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Corrida corrida0 = null;
      try {
        corrida0 = new Corrida((Corrida) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      Corrida corrida1 = new Corrida(corrida0);
      assertEquals(0.0, corrida1.getDistancia(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      boolean boolean0 = corrida0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Month month0 = Month.DECEMBER;
      LocalDateTime localDateTime0 = MockLocalDateTime.of(0, month0, 10, 10, 0, 0);
      Corrida corrida0 = new Corrida(localDateTime0, (LocalTime) null, 10, 0);
      boolean boolean0 = corrida0.equals(corrida0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      boolean boolean0 = corrida0.equals(utilizadorAmador0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      String string0 = corrida0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nDistancia: 0.0 metros\nTipo de atividade: Corrida\n", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      // Undeclared exception!
      try { 
        corrida0.consumoCalorias(utilizadorAmador0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("Projeto.Atividade", e);
      }
  }
}
