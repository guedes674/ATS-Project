/*
 * This file was automatically generated by EvoSuite
 * Wed May 28 22:16:37 GMT 2025
 */

package Projeto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Projeto.Corrida;
import Projeto.Utilizador;
import Projeto.UtilizadorAmador;
import Projeto.UtilizadorPraticanteOcasional;
import Projeto.UtilizadorProfissional;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Month;
import java.time.OffsetTime;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.MockOffsetTime;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Corrida_ESTest extends Corrida_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.ofNanoOfDay(0L);
      Corrida corrida0 = new Corrida(localDateTime0, localTime0, (-633), (-633));
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("T>'S@H! uE!ni@", "Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: -633 bpm\nDistancia: -633.0 metros\nTipo de atividade: Corrida\n", "T>'S@H! uE!ni@", (-2364), (-633), (-2364), localDate0, '\"');
      Corrida corrida1 = (Corrida)corrida0.geraAtividade(utilizadorPraticanteOcasional0, (-2364));
      assertEquals(2127.4, corrida1.getDistancia(), 0.01);
      assertEquals(0, corrida1.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      utilizadorAmador0.setAltura((-1));
      Corrida corrida1 = (Corrida)corrida0.geraAtividade(utilizadorAmador0, 690.9948506610928);
      assertEquals((-2626885.8000000003), corrida1.getDistancia(), 0.01);
      assertEquals(0, corrida1.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      corrida0.setProximoCodigo(0);
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalDate localDate0 = MockLocalDate.now(zoneId0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("Projeto.Abdominais", "Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nDistancia: 0.0 metros\nTipo de atividade: Corrida\n", "", 0, 0, 0, localDate0, 'N');
      Corrida corrida1 = (Corrida)corrida0.geraAtividade(utilizadorAmador0, 0);
      assertTrue(corrida1.equals((Object)corrida0));
      assertEquals(0.0, corrida1.getDistancia(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      corrida0.setProximoCodigo((-1097));
      Corrida corrida1 = (Corrida)corrida0.geraAtividade(utilizadorAmador0, (-1097));
      assertEquals((-4.7244640256E9), corrida1.getDistancia(), 0.01);
      assertEquals(0, corrida1.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      LocalTime localTime0 = MockLocalTime.of(0, 0, 5);
      Corrida corrida0 = new Corrida(localDateTime0, localTime0, 982, 982);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      double double0 = corrida0.consumoCalorias(utilizadorProfissional0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Month month0 = Month.JANUARY;
      LocalDateTime localDateTime0 = MockLocalDateTime.of(2, month0, 2, 2, 2);
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(68L);
      Corrida corrida0 = new Corrida(localDateTime0, localTime0, 1636, 2);
      Period period0 = Period.ZERO;
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("`2WG][j", "`2WG][j", "`2WG][j", 2, (-1632), (-161), localDate0, '_');
      double double0 = corrida0.consumoCalorias(utilizadorAmador0);
      assertEquals(30.27601759259261, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Month month0 = Month.MARCH;
      LocalDateTime localDateTime0 = MockLocalDateTime.of(2, month0, 2, 2, 2);
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(68L);
      Corrida corrida0 = new Corrida(localDateTime0, localTime0, 1636, 2);
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("", "jPh2nfMubB|&Ahy", "Iteracoes: ", 1362, 1636, 2, localDate0, ')');
      double double0 = corrida0.consumoCalorias(utilizadorPraticanteOcasional0);
      assertEquals((-2.837900000000015), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 1);
      OffsetTime offsetTime0 = MockOffsetTime.now((ZoneId) zoneOffset0);
      LocalTime localTime0 = MockLocalTime.from(offsetTime0);
      Corrida corrida0 = new Corrida((LocalDateTime) null, localTime0, (-1), 0.0);
      // Undeclared exception!
      try { 
        corrida0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Month month0 = Month.MAY;
      LocalDateTime localDateTime0 = MockLocalDateTime.of(5, month0, 5, 0, 5, 0);
      LocalTime localTime0 = MockLocalTime.now();
      Corrida corrida0 = new Corrida(localDateTime0, localTime0, (-1231), 0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("!=Mt$\"3w", "!=Mt$\"3w", "!U5,", (-1), 2244, 1307, (LocalDate) null, 'Y');
      // Undeclared exception!
      try { 
        corrida0.geraAtividade(utilizadorAmador0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      corrida0.setDataRealizacao((LocalDateTime) null);
      Corrida corrida1 = new Corrida();
      // Undeclared exception!
      try { 
        corrida0.equals(corrida1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      // Undeclared exception!
      try { 
        corrida0.consumoCalorias((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Corrida", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Corrida corrida0 = null;
      try {
        corrida0 = new Corrida((Corrida) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      Corrida corrida1 = new Corrida(corrida0);
      assertEquals(1, corrida1.getCodAtividade());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      boolean boolean0 = corrida0.equals(utilizadorAmador0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      boolean boolean0 = corrida0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      boolean boolean0 = corrida0.equals(corrida0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      String string0 = corrida0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nDistancia: 0.0 metros\nTipo de atividade: Corrida\n", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      Object object0 = corrida0.clone();
      assertTrue(object0.equals((Object)corrida0));
      
      corrida0.setFreqCardiaca((-1137));
      boolean boolean0 = corrida0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      // Undeclared exception!
      try { 
        corrida0.consumoCalorias(utilizadorAmador0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("Projeto.Atividade", e);
      }
  }
}
