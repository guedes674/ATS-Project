/*
 * This file was automatically generated by EvoSuite
 * Wed May 28 22:14:26 GMT 2025
 */

package Projeto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Projeto.Ciclismo;
import Projeto.Corrida;
import Projeto.Utilizador;
import Projeto.UtilizadorAmador;
import Projeto.UtilizadorPraticanteOcasional;
import java.time.Clock;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Ciclismo_ESTest extends Ciclismo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("", "", "IeQ#Zg;", (-1122), 0, (-2305), localDate0, 'J');
      Ciclismo ciclismo1 = (Ciclismo)ciclismo0.geraAtividade(utilizadorPraticanteOcasional0, 0);
      assertTrue(ciclismo1.equals((Object)ciclismo0));
      assertEquals(0.0, ciclismo1.getDistancia(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      ciclismo0.setProximoCodigo(0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      Ciclismo ciclismo1 = (Ciclismo)ciclismo0.geraAtividade(utilizadorPraticanteOcasional0, 3190.4411433928367);
      assertEquals(0, ciclismo1.getFreqCardiaca());
      assertEquals(2.25485782935E10, ciclismo1.getDistancia(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      ciclismo0.setProximoCodigo((-1798));
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "", "", (-1798), (-1798), (-1798), localDate0, 'b');
      Ciclismo ciclismo1 = (Ciclismo)ciclismo0.geraAtividade(utilizadorAmador0, 0.4);
      assertEquals(0.0, ciclismo1.getDistancia(), 0.01);
      assertTrue(ciclismo1.equals((Object)ciclismo0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      Ciclismo ciclismo0 = new Ciclismo((LocalDateTime) null, localTime0, (-3013), (-3013));
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      double double0 = ciclismo0.consumoCalorias(utilizadorAmador0);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      Clock clock0 = MockClock.tickSeconds(zoneId0);
      LocalDate localDate0 = MockLocalDate.now(clock0);
      LocalTime localTime0 = MockLocalTime.now(zoneId0);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      Ciclismo ciclismo0 = new Ciclismo(localDateTime0, localTime0, (-900), (-900));
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("Projeto.Ciclismo", "q)VD|WD\"|-}a", "Projeto.Ciclismo", (-1387), (-900), 0, localDate0, 'r');
      double double0 = ciclismo0.consumoCalorias(utilizadorPraticanteOcasional0);
      assertEquals(14031.065625000001, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      Clock clock0 = MockClock.tickSeconds(zoneId0);
      LocalDate localDate0 = MockLocalDate.now(clock0);
      LocalTime localTime0 = MockLocalTime.now(zoneId0);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      Ciclismo ciclismo0 = new Ciclismo(localDateTime0, localTime0, (-900), (-900));
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("Projeto.Ciclismo", "q)VD|WD\"|-}a", "Projeto.Ciclismo", (-900), (-900), 0, localDate0, 'r');
      utilizadorPraticanteOcasional0.setPeso(1369.5313945299079);
      double double0 = ciclismo0.consumoCalorias(utilizadorPraticanteOcasional0);
      assertEquals((-21351.094302385452), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(0L);
      Ciclismo ciclismo0 = new Ciclismo((LocalDateTime) null, localTime0, 7, 1260.6);
      // Undeclared exception!
      try { 
        ciclismo0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      // Undeclared exception!
      try { 
        ciclismo0.geraAtividade((Utilizador) null, (-1.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Ciclismo", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      // Undeclared exception!
      try { 
        ciclismo0.consumoCalorias(utilizadorPraticanteOcasional0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Ciclismo ciclismo0 = null;
      try {
        ciclismo0 = new Ciclismo((Ciclismo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      Ciclismo ciclismo1 = new Ciclismo(ciclismo0);
      assertTrue(ciclismo1.equals((Object)ciclismo0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      Corrida corrida0 = new Corrida();
      boolean boolean0 = ciclismo0.equals(corrida0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Ciclismo ciclismo0 = new Ciclismo(localDateTime0, (LocalTime) null, 0, (-203.029362074279));
      boolean boolean0 = ciclismo0.equals(ciclismo0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Ciclismo ciclismo0 = new Ciclismo(localDateTime0, localTime0, (-932), (-932));
      boolean boolean0 = ciclismo0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Ciclismo ciclismo0 = new Ciclismo(localDateTime0, (LocalTime) null, 0, (-203.029362074279));
      String string0 = ciclismo0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: null\nFrequencia Cardiaca: 0 bpm\nDistancia: -203.029362074279 metros\nTipo de atividade: Ciclismo\n", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Ciclismo ciclismo0 = new Ciclismo(localDateTime0, (LocalTime) null, 0, (-203.029362074279));
      Object object0 = ciclismo0.clone();
      // Undeclared exception!
      try { 
        ciclismo0.equals(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      // Undeclared exception!
      try { 
        ciclismo0.consumoCalorias((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Ciclismo", e);
      }
  }
}
