/*
 * This file was automatically generated by EvoSuite
 * Wed May 28 22:02:38 GMT 2025
 */

package Projeto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Projeto.Abdominais;
import Projeto.Atividade;
import Projeto.BenchPress;
import Projeto.BicepCurls;
import Projeto.Flexoes;
import Projeto.LegPress;
import Projeto.PlanoTreino;
import Projeto.Utilizador;
import Projeto.UtilizadorAmador;
import Projeto.UtilizadorPraticanteOcasional;
import Projeto.UtilizadorProfissional;
import java.time.Clock;
import java.time.LocalDate;
import java.time.Month;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.IsoChronology;
import java.util.LinkedList;
import java.util.List;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utilizador_ESTest extends Utilizador_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional(utilizadorProfissional0);
      utilizadorProfissional1.setAltura((-4));
      boolean boolean0 = utilizadorProfissional1.equals(utilizadorProfissional0);
      assertEquals((-4), utilizadorProfissional1.getAltura());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional(utilizadorProfissional0);
      assertEquals(0.0, utilizadorProfissional1.getPeso(), 0.01);
      
      utilizadorProfissional1.setPeso(1);
      boolean boolean0 = utilizadorProfissional1.equals(utilizadorProfissional0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.of(6, 6, 6);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("$NZRd4YQ{y^%^WSR", "$NZRd4YQ{y^%^WSR", "$NZRd4YQ{y^%^WSR", 6, 0, 0, localDate0, 'R');
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional1 = new UtilizadorPraticanteOcasional(utilizadorPraticanteOcasional0, localDate0, localDate0);
      boolean boolean0 = utilizadorPraticanteOcasional1.equals(utilizadorPraticanteOcasional0);
      assertEquals(0, utilizadorPraticanteOcasional1.getAltura());
      assertEquals(6, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertTrue(utilizadorPraticanteOcasional0.equals((Object)utilizadorPraticanteOcasional1));
      assertEquals('R', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals(0.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("\nTipo de atividade: Abdominais\n", "_kPQ", "\nTipo de atividade: Abdominais\n", (-2746), (-2746), (-2746), localDate0, 'n');
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional1 = new UtilizadorPraticanteOcasional("\nTipo de atividade: Abdominais\n", "_kPQ", "_kPQ", 'n', (-2746), 'n', localDate0, 'n');
      boolean boolean0 = utilizadorPraticanteOcasional1.equals(utilizadorPraticanteOcasional0);
      assertEquals((-2746.0), utilizadorPraticanteOcasional1.getPeso(), 0.01);
      assertEquals("\nTipo de atividade: Abdominais\n", utilizadorPraticanteOcasional0.getEmail());
      assertEquals("_kPQ", utilizadorPraticanteOcasional0.getMorada());
      assertEquals("\nTipo de atividade: Abdominais\n", utilizadorPraticanteOcasional1.getNome());
      assertFalse(boolean0);
      assertEquals(2, utilizadorPraticanteOcasional1.getCodUtilizador());
      assertEquals("_kPQ", utilizadorPraticanteOcasional1.getEmail());
      assertEquals(110, utilizadorPraticanteOcasional1.getFreqCardiaca());
      assertEquals('n', utilizadorPraticanteOcasional1.getGenero());
      assertEquals(110, utilizadorPraticanteOcasional1.getAltura());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofYearDay(988, 1);
      Period period0 = Period.between(localDate0, localDate0);
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(1);
      LocalDate localDate1 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional((String) null, "a\"gC[JzV7|f8g2*Q^", "a\"gC[JzV7|f8g2*Q^", 1, 1, 1, localDate1, 'K');
      // Undeclared exception!
      try { 
        utilizadorProfissional0.planoTreinoMaisCalorias(localDate0, localDate1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      Period period0 = Period.of(103, 103, 103);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      LocalDate localDate1 = utilizadorAmador0.getDataNascimento();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("OXuS78", "^aEd(", "", 103, 0, 103, localDate1, 'N');
      utilizadorProfissional0.allMetrosAltimetria(localDate0, localDate1);
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals(103, utilizadorProfissional0.getFreqCardiaca());
      assertEquals("", utilizadorProfissional0.getEmail());
      assertEquals('N', utilizadorProfissional0.getGenero());
      assertEquals("^aEd(", utilizadorProfissional0.getMorada());
      assertEquals("OXuS78", utilizadorProfissional0.getNome());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(103, utilizadorProfissional0.getAltura());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      LocalDate localDate1 = MockLocalDate.ofYearDay(6, 70);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      double double0 = utilizadorAmador0.allKmsDistancia(localDate1, localDate0);
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getAltura());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1847L);
      LocalDate localDate1 = utilizadorPraticanteOcasional0.getDataNascimento();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      utilizadorProfissional0.numeroAtividades(localDate1, localDate0);
      assertEquals('\u0000', utilizadorProfissional0.getGenero());
      assertEquals(0, utilizadorProfissional0.getAltura());
      assertEquals(0, utilizadorProfissional0.getCodUtilizador());
      assertEquals(0, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.of(6, 6, 6);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("$NZRd4YQ{y^%^WSR", "$NZRd4YQ{y^%^WSR", "$NZRd4YQ{y^%^WSR", 6, 0, 0, localDate0, 'R');
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      utilizadorPraticanteOcasional0.addPlanoTreino(planoTreino0);
      PlanoTreino planoTreino1 = utilizadorPraticanteOcasional0.getPlanoTreinoId(0);
      assertEquals(0.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals(0, utilizadorPraticanteOcasional0.getAltura());
      assertEquals('R', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(6, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals(0, planoTreino1.getCodPlano());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador(";i4T+,)", ";i4T+,)", "7Y&ch)Xyp", 72, 218, (-161), (LocalDate) null, 'Y');
      Abdominais abdominais0 = new Abdominais();
      utilizadorAmador0.addAtividadePlanoTreino(1091, abdominais0, 2432);
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals(218.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals("7Y&ch)Xyp", utilizadorAmador0.getEmail());
      assertEquals((-161), utilizadorAmador0.getAltura());
      assertEquals(";i4T+,)", utilizadorAmador0.getMorada());
      assertEquals('Y', utilizadorAmador0.getGenero());
      assertEquals(72, utilizadorAmador0.getFreqCardiaca());
      assertEquals(";i4T+,)", utilizadorAmador0.getNome());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Period period0 = Period.ZERO;
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("pPv#x FH", "pPv#x FH", "", 0, 0, 0, localDate0, '{');
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional1 = (UtilizadorPraticanteOcasional)utilizadorPraticanteOcasional0.utilizadorNumPeriodo(localDate0, localDate0);
      assertEquals("", utilizadorPraticanteOcasional1.getEmail());
      assertEquals(0, utilizadorPraticanteOcasional1.getAltura());
      assertTrue(utilizadorPraticanteOcasional1.equals((Object)utilizadorPraticanteOcasional0));
      assertEquals("pPv#x FH", utilizadorPraticanteOcasional1.getNome());
      assertEquals("pPv#x FH", utilizadorPraticanteOcasional1.getMorada());
      assertEquals('{', utilizadorPraticanteOcasional1.getGenero());
      assertEquals(1, utilizadorPraticanteOcasional1.getCodUtilizador());
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals(0.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals(0, utilizadorPraticanteOcasional1.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("JNTWyKkRLj]cK", "JNTWyKkRLj]cK", "JNTWyKkRLj]cK", (-2815), (-2815), 77, localDate0, '3');
      String string0 = utilizadorPraticanteOcasional0.toString();
      assertEquals("Utilizador\nCodigo de Utilizador: 1\nNome: JNTWyKkRLj]cK\nMorada: JNTWyKkRLj]cK\nEmail: JNTWyKkRLj]cK\nFrequencia Cardiaca: -2815 bpm\nPeso: -2815.0 kilos\nAltura: 77 centimetros\nData de nascimento 14/02/2014\nIdade: 0 anos\nGenero: 3\nAtividades: \n\nPlanos de treino: \n\nTipo de Utilizador: Praticante Ocasional\n", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Period period0 = Period.ZERO;
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("pPv#x FH", "pPv#x FH", "", 0, 0, 0, localDate0, '{');
      double double0 = utilizadorPraticanteOcasional0.getPeso();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals(0, utilizadorPraticanteOcasional0.getAltura());
      assertEquals("pPv#x FH", utilizadorPraticanteOcasional0.getMorada());
      assertEquals('{', utilizadorPraticanteOcasional0.getGenero());
      assertEquals("pPv#x FH", utilizadorPraticanteOcasional0.getNome());
      assertEquals("", utilizadorPraticanteOcasional0.getEmail());
      assertEquals(0, utilizadorPraticanteOcasional0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional(">", ">", ">", (-1), (-1), (-1), (LocalDate) null, 'j');
      double double0 = utilizadorPraticanteOcasional0.getPeso();
      assertEquals((-1), utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals('j', utilizadorPraticanteOcasional0.getGenero());
      assertEquals((-1), utilizadorPraticanteOcasional0.getAltura());
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Period period0 = Period.of(103, 103, 103);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("^Eud(", "^Eud(", "?S$.%.K<", 0, (-4772), (-4772), localDate0, '.');
      String string0 = utilizadorPraticanteOcasional0.getNome();
      assertEquals('.', utilizadorPraticanteOcasional0.getGenero());
      assertEquals("^Eud(", string0);
      assertEquals("^Eud(", utilizadorPraticanteOcasional0.getMorada());
      assertEquals("?S$.%.K<", utilizadorPraticanteOcasional0.getEmail());
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals(0, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals((-4772.0), utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals((-4772), utilizadorPraticanteOcasional0.getAltura());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      utilizadorProfissional0.getNome();
      assertEquals(0, utilizadorProfissional0.getAltura());
      assertEquals('\u0000', utilizadorProfissional0.getGenero());
      assertEquals(0, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(0, utilizadorProfissional0.getCodUtilizador());
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "", "", 72, 72, 72, localDate0, ';');
      utilizadorAmador0.getMorada();
      assertEquals(';', utilizadorAmador0.getGenero());
      assertEquals(72.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(72, utilizadorAmador0.getFreqCardiaca());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals(72, utilizadorAmador0.getAltura());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      int int0 = utilizadorProfissional0.getIdade();
      assertEquals(0, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(0, int0);
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals('\u0000', utilizadorProfissional0.getGenero());
      assertEquals(0, utilizadorProfissional0.getAltura());
      assertEquals(0, utilizadorProfissional0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      System.setCurrentTimeMillis(451);
      int int0 = utilizadorProfissional0.getIdade();
      assertEquals(0, utilizadorProfissional0.getAltura());
      assertEquals(0, utilizadorProfissional0.getCodUtilizador());
      assertEquals('\u0000', utilizadorProfissional0.getGenero());
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals((-44), int0);
      assertEquals(0, utilizadorProfissional0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      utilizadorProfissional0.setGenero('9');
      char char0 = utilizadorProfissional0.getGenero();
      assertEquals('9', char0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("\nTipo de atividade: Abdominais\n", "_kPQ", "\nTipo de atividade: Abdominais\n", (-2746), (-2746), (-2746), localDate0, 'n');
      char char0 = utilizadorPraticanteOcasional0.getGenero();
      assertEquals((-2746.0), utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals('n', char0);
      assertEquals((-2746), utilizadorPraticanteOcasional0.getAltura());
      assertEquals("\nTipo de atividade: Abdominais\n", utilizadorPraticanteOcasional0.getNome());
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals("_kPQ", utilizadorPraticanteOcasional0.getMorada());
      assertEquals((-2746), utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals("\nTipo de atividade: Abdominais\n", utilizadorPraticanteOcasional0.getEmail());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      int int0 = utilizadorPraticanteOcasional0.getFreqCardiaca();
      assertEquals(0.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals(0, utilizadorPraticanteOcasional0.getAltura());
      assertEquals('\u0000', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(0, int0);
      assertEquals(0, utilizadorPraticanteOcasional0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("\nTipo de atividade: Abdominais\n", "_kPQ", "_kPQ", 'n', (-2746), 'n', localDate0, 'n');
      int int0 = utilizadorPraticanteOcasional0.getFreqCardiaca();
      assertEquals(110, int0);
      assertEquals("_kPQ", utilizadorPraticanteOcasional0.getEmail());
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals("_kPQ", utilizadorPraticanteOcasional0.getMorada());
      assertEquals("\nTipo de atividade: Abdominais\n", utilizadorPraticanteOcasional0.getNome());
      assertEquals((-2746.0), utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals('n', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(110, utilizadorPraticanteOcasional0.getAltura());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofYearDay((-2037), 77);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "", "", 72, 72, 2062, localDate0, ';');
      utilizadorAmador0.getFatorMultiplicativo();
      assertEquals(72.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals(72, utilizadorAmador0.getFreqCardiaca());
      assertEquals(2062, utilizadorAmador0.getAltura());
      assertEquals(';', utilizadorAmador0.getGenero());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Period period0 = Period.ofYears(953);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional((String) null, "Utilizador\nCodigo de Utilizador: ", (String) null, 2322, 2322, 2322, localDate0, 'd');
      String string0 = utilizadorProfissional0.getEmail();
      assertNull(string0);
      assertEquals(2322, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(2322.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals(2322, utilizadorProfissional0.getAltura());
      assertEquals('d', utilizadorProfissional0.getGenero());
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      utilizadorProfissional0.getEmail();
      assertEquals(0, utilizadorProfissional0.getAltura());
      assertEquals(0, utilizadorProfissional0.getCodUtilizador());
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals(0, utilizadorProfissional0.getFreqCardiaca());
      assertEquals('\u0000', utilizadorProfissional0.getGenero());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("tZ", "tZ", "tZ", 1295, 1, 1295, (LocalDate) null, 'q');
      utilizadorProfissional0.getDataNascimento();
      assertEquals('q', utilizadorProfissional0.getGenero());
      assertEquals(1295, utilizadorProfissional0.getAltura());
      assertEquals(1.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals(1295, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      int int0 = utilizadorProfissional0.getCodUtilizador();
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals(0, utilizadorProfissional0.getFreqCardiaca());
      assertEquals('\u0000', utilizadorProfissional0.getGenero());
      assertEquals(0, int0);
      assertEquals(0, utilizadorProfissional0.getAltura());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      utilizadorProfissional0.setCodUtilizador((-135));
      int int0 = utilizadorProfissional0.getCodUtilizador();
      assertEquals((-135), int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      double double0 = utilizadorProfissional0.getBMR();
      assertEquals('\u0000', utilizadorProfissional0.getGenero());
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals(0, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, utilizadorProfissional0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.of(6, 6, 6);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("$NZRd4YQ{y^%^WSR", "$NZRd4YQ{y^%^WSR", "$NZRd4YQ{y^%^WSR", 6, 0, 0, localDate0, 'R');
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      utilizadorPraticanteOcasional0.addPlanoTreino(planoTreino0);
      utilizadorPraticanteOcasional0.getAtividadesPlanoTreino();
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals('R', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(6, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals(0, utilizadorPraticanteOcasional0.getAltura());
      assertEquals(0.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofYearDay((-2037), 77);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "", "", 72, 72, 2062, localDate0, ';');
      BicepCurls bicepCurls0 = new BicepCurls();
      utilizadorAmador0.addAtividade(bicepCurls0);
      utilizadorAmador0.getAtividadesIsoladas();
      assertEquals(72, utilizadorAmador0.getFreqCardiaca());
      assertEquals(72.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(2062, utilizadorAmador0.getAltura());
      assertEquals(';', utilizadorAmador0.getGenero());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      int int0 = utilizadorPraticanteOcasional0.getAltura();
      assertEquals(0.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals(0, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals('\u0000', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(0, int0);
      assertEquals(0, utilizadorPraticanteOcasional0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("gy/Ta?WuB2'XE3$.LvU", "TPm`S3CI2 -L", "gy/Ta?WuB2'XE3$.LvU", 3718, 3718, 3718, (LocalDate) null, '+');
      int int0 = utilizadorAmador0.getAltura();
      assertEquals('+', utilizadorAmador0.getGenero());
      assertEquals(3718.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(3718, int0);
      assertEquals("TPm`S3CI2 -L", utilizadorAmador0.getMorada());
      assertEquals("gy/Ta?WuB2'XE3$.LvU", utilizadorAmador0.getEmail());
      assertEquals("gy/Ta?WuB2'XE3$.LvU", utilizadorAmador0.getNome());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals(3718, utilizadorAmador0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      utilizadorAmador0.equals(utilizadorAmador0);
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("HR3Sd^pk/Mw", "HR3Sd^pk/Mw", "HR3Sd^pk/Mw", (-2746), 2031, 2031, localDate0, '>');
      UtilizadorProfissional utilizadorProfissional1 = (UtilizadorProfissional)utilizadorProfissional0.clone();
      assertEquals('>', utilizadorProfissional1.getGenero());
      assertEquals(2031, utilizadorProfissional0.getAltura());
      assertEquals(2031.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals((-2746), utilizadorProfissional0.getFreqCardiaca());
      assertTrue(utilizadorProfissional1.equals((Object)utilizadorProfissional0));
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofYearDay((-2037), 77);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "", "", 72, 72, 2062, localDate0, ';');
      BicepCurls bicepCurls0 = new BicepCurls();
      utilizadorAmador0.addAtividade(bicepCurls0);
      List<Atividade> list0 = utilizadorAmador0.allAtividades(localDate0, localDate0);
      assertEquals(72, utilizadorAmador0.getFreqCardiaca());
      assertEquals(2062, utilizadorAmador0.getAltura());
      assertEquals(';', utilizadorAmador0.getGenero());
      assertEquals(72.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      Period period0 = Period.ofYears((-2746));
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      // Undeclared exception!
      try { 
        utilizadorPraticanteOcasional0.utilizadorNumPeriodo((LocalDate) null, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.of(6, 6, 6);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("$NZRd4YQ{y^%^WSR", "$NZRd4YQ{y^%^WSR", "$NZRd4YQ{y^%^WSR", 6, 0, 0, localDate0, 'R');
      // Undeclared exception!
      try { 
        utilizadorPraticanteOcasional0.totalCaloriasDispendidas((LocalDate) null, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("Projeto.Abdominais", "Projeto.Abdominais", "Projeto.Abdominais", 0, (-574), 0, (LocalDate) null, '[');
      // Undeclared exception!
      try { 
        utilizadorProfissional0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      // Undeclared exception!
      try { 
        utilizadorPraticanteOcasional0.numeroAtividades((LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("", "", "", 103, 103, 103, (LocalDate) null, 'g');
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) "");
      LocalDate localDate0 = MockLocalDate.now();
      // Undeclared exception!
      try { 
        utilizadorProfissional0.infoDasAtividadesUtilizadorNumPeriodoQueRespeitamP((LocalDate) null, localDate0, predicate0, (BiFunction<Atividade, Utilizador, String>) null, (Utilizador) utilizadorPraticanteOcasional0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador((String) null, "2^},/$aGnoR^-l", "\nMorada: ", 5, 1737, 89, (LocalDate) null, 'X');
      // Undeclared exception!
      try { 
        utilizadorAmador0.getIdade();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador(")Qc-w", "8'&MX{3N", "8'&MX{3N", (-2746), (-96), (-96), (LocalDate) null, '8');
      // Undeclared exception!
      try { 
        utilizadorAmador0.getBMR();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("l/4=g9%/ww^5", "kg#T1E/B", "Hc", 3840, 1242, 0, (LocalDate) null, 'p');
      LocalDate localDate0 = MockLocalDate.now();
      // Undeclared exception!
      try { 
        utilizadorPraticanteOcasional0.atividadesNumPeriodoQueRespeitamP((LocalDate) null, localDate0, (Predicate<Atividade>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("\nMorada: ", "\nMorada: ", "\nMorada: ", 0, 0, 0, (LocalDate) null, '#');
      Flexoes flexoes0 = new Flexoes();
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) flexoes0);
      // Undeclared exception!
      try { 
        utilizadorPraticanteOcasional0.atividadesIsoladas((LocalDate) null, (LocalDate) null, predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      // Undeclared exception!
      try { 
        utilizadorPraticanteOcasional0.allMetrosAltimetria((LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador(";i4T+,)", ";i4T+,)", "7Y&ch)Xyp", 72, 218, (-161), (LocalDate) null, 'Y');
      // Undeclared exception!
      try { 
        utilizadorAmador0.allKmsDistancia((LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      // Undeclared exception!
      try { 
        utilizadorPraticanteOcasional0.addPlanoTreino((PlanoTreino) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      // Undeclared exception!
      try { 
        utilizadorProfissional0.addAtividade((Atividade) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Month month0 = Month.JUNE;
      LocalDate localDate0 = MockLocalDate.of(1, month0, 1);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("", "", "", 1, 1, 1, localDate0, 'M');
      LegPress legPress0 = new LegPress();
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) legPress0);
      utilizadorPraticanteOcasional0.atividadesNumPeriodoQueRespeitamP(localDate0, localDate0, predicate0);
      assertEquals(1, utilizadorPraticanteOcasional0.getAltura());
      assertEquals('M', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(1.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals(1, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Period period0 = Period.ofYears(953);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional((String) null, "Utilizador\nCodigo de Utilizador: ", (String) null, 2322, 2322, 2322, localDate0, 'd');
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) utilizadorProfissional0);
      Function<Atividade, LinkedList<BenchPress>> function0 = (Function<Atividade, LinkedList<BenchPress>>) mock(Function.class, new ViolatedAssumptionAnswer());
      utilizadorProfissional0.infoDasAtividadesNumPeriodoQueRespeitamP(localDate0, localDate0, predicate0, function0);
      assertEquals('d', utilizadorProfissional0.getGenero());
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertEquals(2322, utilizadorProfissional0.getAltura());
      assertEquals(2322, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(2322.0, utilizadorProfissional0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofYearDay(988, 1);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional((String) null, "a\"gC[JzV7|f8g2*Q^", "a\"gC[JzV7|f8g2*Q^", 1, 1, 1, localDate0, 'K');
      double double0 = utilizadorProfissional0.getPeso();
      assertEquals(1, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertEquals(1.0, double0, 0.01);
      assertEquals(1, utilizadorProfissional0.getAltura());
      assertEquals('K', utilizadorProfissional0.getGenero());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("HR3Sd^pk/Mw", "HR3Sd^pk/Mw", "HR3Sd^pk/Mw", (-2746), 2031, 2031, localDate0, '>');
      char char0 = utilizadorProfissional0.getGenero();
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertEquals(2031.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals((-2746), utilizadorProfissional0.getFreqCardiaca());
      assertEquals('>', char0);
      assertEquals(2031, utilizadorProfissional0.getAltura());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Period period0 = Period.of((-995), 0, 2608);
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, zoneId0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "", "", 2608, 974, (-995), localDate0, '^');
      int int0 = utilizadorAmador0.getCodUtilizador();
      assertEquals(1, int0);
      assertEquals('^', utilizadorAmador0.getGenero());
      assertEquals(2608, utilizadorAmador0.getFreqCardiaca());
      assertEquals((-995), utilizadorAmador0.getAltura());
      assertEquals(974.0, utilizadorAmador0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofYearDay((-2037), 77);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "", "", 72, 72, 2062, localDate0, ';');
      utilizadorAmador0.getAtividadesIsoladas();
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals(2062, utilizadorAmador0.getAltura());
      assertEquals(72, utilizadorAmador0.getFreqCardiaca());
      assertEquals(72.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(';', utilizadorAmador0.getGenero());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("om)_P?~T %s+W={my", "\nTipo de Utilizador: Praticante Ocasional\n", "\nTipo de Utilizador: Praticante Ocasional\n", 2, 3, 2, localDate0, ')');
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) null);
      utilizadorProfissional0.atividadesIsoladas(localDate0, localDate0, predicate0);
      assertEquals(2, utilizadorProfissional0.getFreqCardiaca());
      assertEquals("\nTipo de Utilizador: Praticante Ocasional\n", utilizadorProfissional0.getEmail());
      assertEquals(2, utilizadorProfissional0.getAltura());
      assertEquals("\nTipo de Utilizador: Praticante Ocasional\n", utilizadorProfissional0.getMorada());
      assertEquals("om)_P?~T %s+W={my", utilizadorProfissional0.getNome());
      assertEquals(3.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertEquals(')', utilizadorProfissional0.getGenero());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("\nTipo de atividade: Abdominais\n", "_kPQ", "\nTipo de atividade: Abdominais\n", (-2746), (-2746), (-2746), localDate0, 'n');
      int int0 = utilizadorPraticanteOcasional0.getFreqCardiaca();
      assertEquals('n', utilizadorPraticanteOcasional0.getGenero());
      assertEquals((-2746.0), utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals("\nTipo de atividade: Abdominais\n", utilizadorPraticanteOcasional0.getNome());
      assertEquals((-2746), utilizadorPraticanteOcasional0.getAltura());
      assertEquals("\nTipo de atividade: Abdominais\n", utilizadorPraticanteOcasional0.getEmail());
      assertEquals((-2746), int0);
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals("_kPQ", utilizadorPraticanteOcasional0.getMorada());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("\nTipo de atividade: Abdominais\n", "_kPQ", "\nTipo de atividade: Abdominais\n", (-2746), (-2746), (-2746), localDate0, 'n');
      int int0 = utilizadorPraticanteOcasional0.getAltura();
      assertEquals("\nTipo de atividade: Abdominais\n", utilizadorPraticanteOcasional0.getEmail());
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals((-2746), int0);
      assertEquals('n', utilizadorPraticanteOcasional0.getGenero());
      assertEquals((-2746), utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals("_kPQ", utilizadorPraticanteOcasional0.getMorada());
      assertEquals((-2746.0), utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals("\nTipo de atividade: Abdominais\n", utilizadorPraticanteOcasional0.getNome());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1642));
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "", "", (-1642), (-1642), (-1642), localDate0, 'T');
      int int0 = utilizadorAmador0.getIdade();
      assertEquals((-1642), utilizadorAmador0.getFreqCardiaca());
      assertEquals((-1642.0), utilizadorAmador0.getPeso(), 0.01);
      assertEquals('T', utilizadorAmador0.getGenero());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals((-1642), utilizadorAmador0.getAltura());
      assertEquals(49, int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("JNTWyKkRLj]cK", "JNTWyKkRLj]cK", "Utilizador\nCodigo de Utilizador: 1\nNome: JNTWyKkRLj]cK\nMorada: JNTWyKkRLj]cK\nEmail: JNTWyKkRLj]cK\nFrequencia Cardiaca: -2815 bpm\nPeso: -2815.0 kilos\nAltura: 77 centimetros\nData de nascimento 14/02/2014\nIdade: 0 anos\nGenero: 3\nAtividades: \n\nPlanos de treino: \n\nTipo de Utilizador: Praticante Ocasional\n", 77, 1, 1, localDate0, '3');
      List<PlanoTreino> list0 = utilizadorProfissional0.planosTreinos(localDate0, localDate0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) list0);
      Function<Atividade, ChronoLocalDate> function0 = (Function<Atividade, ChronoLocalDate>) mock(Function.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        utilizadorAmador0.infoDasAtividadesNumPeriodoQueRespeitamP((LocalDate) null, localDate0, predicate0, function0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("HR3Sd^pk/Mw", "HR3Sd^pk/Mw", "HR3Sd^pk/Mw", (-2746), 2031, 2031, localDate0, '>');
      utilizadorProfissional0.getEmail();
      assertEquals((-2746), utilizadorProfissional0.getFreqCardiaca());
      assertEquals(2031.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals(2031, utilizadorProfissional0.getAltura());
      assertEquals('>', utilizadorProfissional0.getGenero());
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional((String) null, "", (String) null, 3, 0, 1472, localDate0, 'S');
      String string0 = utilizadorProfissional0.getNome();
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
      assertNull(string0);
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertEquals(1472, utilizadorProfissional0.getAltura());
      assertEquals(3, utilizadorProfissional0.getFreqCardiaca());
      assertEquals('S', utilizadorProfissional0.getGenero());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.of(6, 6, 6);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("$NZRd4YQ{y^%^WSR", "$NZRd4YQ{y^%^WSR", "$NZRd4YQ{y^%^WSR", 6, 0, 0, localDate0, 'R');
      utilizadorPraticanteOcasional0.getMorada();
      assertEquals('R', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(0, utilizadorPraticanteOcasional0.getAltura());
      assertEquals(6, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals(0.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      utilizadorProfissional0.getAtividadesPlanoTreino();
      assertEquals('\u0000', utilizadorProfissional0.getGenero());
      assertEquals(0, utilizadorProfissional0.getCodUtilizador());
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals(0, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(0, utilizadorProfissional0.getAltura());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional(utilizadorProfissional0);
      utilizadorProfissional1.setAltura(1);
      boolean boolean0 = utilizadorProfissional1.equals(utilizadorProfissional0);
      assertFalse(boolean0);
      assertEquals(1, utilizadorProfissional1.getAltura());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional(utilizadorProfissional0);
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
      
      utilizadorProfissional0.setPeso(1);
      boolean boolean0 = utilizadorProfissional1.equals(utilizadorProfissional0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional(utilizadorProfissional0, localDate0, localDate0);
      assertTrue(utilizadorProfissional1.equals((Object)utilizadorProfissional0));
      
      utilizadorProfissional0.setEmail("\nAtivi3daes: \n");
      boolean boolean0 = utilizadorProfissional0.equals(utilizadorProfissional1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("\nTipo de atividade: Abdominais\n", "_kPQ", "\nTipo de atividade: Abdominais\n", (-2777), (-2777), (-2777), localDate0, 'n');
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional1 = new UtilizadorPraticanteOcasional(utilizadorPraticanteOcasional0, localDate0, localDate0);
      assertEquals("_kPQ", utilizadorPraticanteOcasional1.getMorada());
      
      utilizadorPraticanteOcasional1.setMorada("\nTipo de atividade: Abdominais\n");
      boolean boolean0 = utilizadorPraticanteOcasional0.equals(utilizadorPraticanteOcasional1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      UtilizadorAmador utilizadorAmador1 = new UtilizadorAmador(utilizadorAmador0);
      assertTrue(utilizadorAmador1.equals((Object)utilizadorAmador0));
      
      utilizadorAmador1.setNome("k)=nP~CTp\ntoL");
      boolean boolean0 = utilizadorAmador1.equals(utilizadorAmador0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("JNTWyKkRLj]cK", "JNTWyKkRLj]cK", "JNTWyKkRLj]cK", (-2815), (-2815), 77, localDate0, '3');
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional1 = new UtilizadorPraticanteOcasional(".YF8!", "5nGo];{4<,c>", ".YF8!", (-1789), 5, 70, localDate0, ',');
      boolean boolean0 = utilizadorPraticanteOcasional0.equals(utilizadorPraticanteOcasional1);
      assertEquals(".YF8!", utilizadorPraticanteOcasional1.getNome());
      assertEquals((-1789), utilizadorPraticanteOcasional1.getFreqCardiaca());
      assertEquals(2, utilizadorPraticanteOcasional1.getCodUtilizador());
      assertEquals(',', utilizadorPraticanteOcasional1.getGenero());
      assertEquals(5.0, utilizadorPraticanteOcasional1.getPeso(), 0.01);
      assertFalse(boolean0);
      assertEquals(70, utilizadorPraticanteOcasional1.getAltura());
      assertEquals(".YF8!", utilizadorPraticanteOcasional1.getEmail());
      assertEquals("5nGo];{4<,c>", utilizadorPraticanteOcasional1.getMorada());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.of(6, 6, 6);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("$NZRd4YQ{y^%^WSR", "$NZRd4YQ{y^%^WSR", "$NZRd4YQ{y^%^WSR", 6, 0, 0, localDate0, 'R');
      PlanoTreino planoTreino0 = new PlanoTreino();
      utilizadorPraticanteOcasional0.addPlanoTreino(planoTreino0);
      String string0 = utilizadorPraticanteOcasional0.toString();
      assertEquals("Utilizador\nCodigo de Utilizador: 1\nNome: $NZRd4YQ{y^%^WSR\nMorada: $NZRd4YQ{y^%^WSR\nEmail: $NZRd4YQ{y^%^WSR\nFrequencia Cardiaca: 6 bpm\nPeso: 0.0 kilos\nAltura: 0 centimetros\nData de nascimento 06/06/0006\nIdade: 2008 anos\nGenero: R\nAtividades: \n\nPlanos de treino: \nPlano de Treino\nCodigo de Plano de Treino: 0\nData de realiza\u00E7ao: 2014-02-14\nAtividades e suas itera\u00E7oes: \n\nTipo de Utilizador: Praticante Ocasional\n", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "", "", 72, 72, 72, localDate0, ';');
      BicepCurls bicepCurls0 = new BicepCurls();
      utilizadorAmador0.addAtividade(bicepCurls0);
      String string0 = utilizadorAmador0.toString();
      assertEquals("Utilizador\nCodigo de Utilizador: 1\nNome: \nMorada: \nEmail: \nFrequencia Cardiaca: 72 bpm\nPeso: 72.0 kilos\nAltura: 72 centimetros\nData de nascimento 14/02/2014\nIdade: 0 anos\nGenero: ;\nAtividades: \nAtividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nRepeti\u00E7oes: 0\nPeso: 0.0 kilos\nTipo de atividade: Bicep curls\n\nPlanos de treino: \n\nTipo de Utilizador: Amador\n", string0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofYearDay(0, 10);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("O!x^O3~hBPZl<%LYr", "b5q_gr1sel_Y", "\nFrequencia Cardiaca: ", 0, 0, 0, localDate0, 'F');
      double double0 = utilizadorAmador0.getBMR();
      assertEquals(9909.0, double0, 0.01);
      assertEquals("b5q_gr1sel_Y", utilizadorAmador0.getMorada());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals("O!x^O3~hBPZl<%LYr", utilizadorAmador0.getNome());
      assertEquals("\nFrequencia Cardiaca: ", utilizadorAmador0.getEmail());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Month month0 = Month.JUNE;
      LocalDate localDate0 = MockLocalDate.of(1, month0, 1);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("", "", "", 1, 1, 1, localDate0, 'M');
      double double0 = utilizadorPraticanteOcasional0.getBMR();
      assertEquals(1, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals(10086.25, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("\nTipo de atividade: Abdominais\n", "\nTipo de atividade: Abdominais\n", "\nTipo de atividade: Abdominais\n", (-2746), (-2746), (-2746), localDate0, 'n');
      double double0 = utilizadorPraticanteOcasional0.getBMR();
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals((-2746), utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals((-44622.5), double0, 0.01);
      assertEquals('n', utilizadorPraticanteOcasional0.getGenero());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.of(6, 6, 6);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("$NZRd4YQ{y^%^WSR", "$NZRd4YQ{y^%^WSR", "$NZRd4YQ{y^%^WSR", 6, 0, 0, localDate0, 'R');
      PlanoTreino planoTreino0 = new PlanoTreino();
      utilizadorPraticanteOcasional0.addPlanoTreino(planoTreino0);
      List<Atividade> list0 = utilizadorPraticanteOcasional0.allAtividades(localDate0, localDate0);
      assertEquals(6, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals(0, utilizadorPraticanteOcasional0.getAltura());
      assertEquals(0.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals(0, list0.size());
      assertEquals('R', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.of(6, 6, 6);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("$NZRd4YQ{y^%^WSR", "$NZRd4YQ{y^%^WSR", "$NZRd4YQ{y^%^WSR", 6, 0, 0, localDate0, 'R');
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) utilizadorPraticanteOcasional0);
      utilizadorPraticanteOcasional0.infoDasAtividadesUtilizadorNumPeriodoQueRespeitamP(localDate0, localDate0, predicate0, (BiFunction<Atividade, Utilizador, PlanoTreino>) null, (Utilizador) utilizadorPraticanteOcasional0);
      assertEquals(0, utilizadorPraticanteOcasional0.getAltura());
      assertEquals(0.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals('R', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(6, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.of(6, 6, 6);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("$NZRd4YQ{y^%^WSR", "$NZRd4YQ{y^%^WSR", "$NZRd4YQ{y^%^WSR", 6, 0, 0, localDate0, 'R');
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      utilizadorPraticanteOcasional0.addPlanoTreino(planoTreino0);
      PlanoTreino planoTreino1 = utilizadorPraticanteOcasional0.getPlanoTreinoId(1);
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals(0.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals(1, planoTreino1.getCodPlano());
      assertEquals(6, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals('R', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(0, utilizadorPraticanteOcasional0.getAltura());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.of(6, 6, 6);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("$NZRd4YQ{y^%^WSR", "$NZRd4YQ{y^%^WSR", "$NZRd4YQ{y^%^WSR", 6, 0, 0, localDate0, 'R');
      PlanoTreino planoTreino0 = new PlanoTreino();
      utilizadorPraticanteOcasional0.addPlanoTreino(planoTreino0);
      utilizadorPraticanteOcasional0.getPlanoTreinoId(6);
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals('R', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(6, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals(0, utilizadorPraticanteOcasional0.getAltura());
      assertEquals(0.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("\nTipo de atividade: Abdominais\n", "\nTipo de atividade: Abdominais\n", "\nTipo de atividade: Abdominais\n", (-2746), (-2746), (-2746), localDate0, 'n');
      double double0 = utilizadorPraticanteOcasional0.totalCaloriasDispendidas(localDate0, localDate0);
      assertEquals((-2746.0), utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals('n', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(0.0, double0, 0.01);
      assertEquals((-2746), utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals((-2746), utilizadorPraticanteOcasional0.getAltura());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.of(6, 6, 6);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("$NZRd4YQ{y^%^WSR", "$NZRd4YQ{y^%^WSR", "$NZRd4YQ{y^%^WSR", 6, 0, 0, localDate0, 'R');
      utilizadorPraticanteOcasional0.setProximoCodigo((-19));
      assertEquals('R', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(0, utilizadorPraticanteOcasional0.getAltura());
      assertEquals(0.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals(6, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "", "", 72, 72, 72, localDate0, ';');
      BicepCurls bicepCurls0 = new BicepCurls();
      utilizadorAmador0.addAtividade(bicepCurls0);
      UtilizadorAmador utilizadorAmador1 = new UtilizadorAmador(utilizadorAmador0);
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals(72.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(72, utilizadorAmador0.getAltura());
      assertEquals(72, utilizadorAmador0.getFreqCardiaca());
      assertTrue(utilizadorAmador1.equals((Object)utilizadorAmador0));
      assertEquals(';', utilizadorAmador0.getGenero());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.of(6, 6, 6);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("", "", "6@?2", 5, 5, 5, localDate0, 'S');
      // Undeclared exception!
      try { 
        utilizadorPraticanteOcasional0.addAtividadePlanoTreino(3168, (Atividade) null, 580);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.PlanoTreino", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.of(6, 6, 6);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("$NZRd4YQ{y^%^WSR", "$NZRd4YQ{y^%^WSR", "$NZRd4YQ{y^%^WSR", 6, 0, 0, localDate0, 'R');
      PlanoTreino planoTreino0 = new PlanoTreino();
      utilizadorPraticanteOcasional0.addPlanoTreino(planoTreino0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional1 = (UtilizadorPraticanteOcasional)utilizadorPraticanteOcasional0.clone();
      assertEquals(6, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals(0.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals(0, utilizadorPraticanteOcasional1.getAltura());
      assertEquals(1, utilizadorPraticanteOcasional1.getCodUtilizador());
      assertTrue(utilizadorPraticanteOcasional1.equals((Object)utilizadorPraticanteOcasional0));
      assertEquals('R', utilizadorPraticanteOcasional0.getGenero());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.of(6, 6, 6);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("$NZRd4YQ{y^%^WSR", "$NZRd4YQ{y^%^WSR", "$NZRd4YQ{y^%^WSR", 6, 0, 0, localDate0, 'R');
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional1 = new UtilizadorPraticanteOcasional(utilizadorPraticanteOcasional0, localDate0, localDate0);
      utilizadorPraticanteOcasional0.setFreqCardiaca(1);
      boolean boolean0 = utilizadorPraticanteOcasional1.equals(utilizadorPraticanteOcasional0);
      assertEquals(1, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("\nTipo de atividade: Abdominais\n", "\nTipo de atividade: Abdominais\n", "\nTipo de atividade: Abdominais\n", (-2746), (-2746), (-2746), localDate0, 'n');
      utilizadorPraticanteOcasional0.setDataNascimento(localDate0);
      assertEquals((-2746), utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals((-2746.0), utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals((-2746), utilizadorPraticanteOcasional0.getAltura());
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals('n', utilizadorPraticanteOcasional0.getGenero());
  }
}
