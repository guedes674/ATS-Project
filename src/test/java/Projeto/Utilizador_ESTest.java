/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 15:23:29 GMT 2025
 */

package Projeto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Projeto.Abdominais;
import Projeto.Atividade;
import Projeto.BenchPress;
import Projeto.PlanoTreino;
import Projeto.Trail;
import Projeto.Utilizador;
import Projeto.UtilizadorAmador;
import Projeto.UtilizadorPraticanteOcasional;
import Projeto.UtilizadorProfissional;
import java.time.Clock;
import java.time.LocalDate;
import java.time.Month;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import java.util.List;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utilizador_ESTest extends Utilizador_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorProfissional utilizadorProfissional1 = (UtilizadorProfissional)utilizadorProfissional0.utilizadorNumPeriodo(localDate0, localDate0);
      utilizadorProfissional1.setGenero('l');
      boolean boolean0 = utilizadorProfissional0.equals(utilizadorProfissional1);
      assertEquals('l', utilizadorProfissional1.getGenero());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      UtilizadorProfissional utilizadorProfissional1 = (UtilizadorProfissional)utilizadorProfissional0.clone();
      utilizadorProfissional1.setAltura(5);
      boolean boolean0 = utilizadorProfissional0.equals(utilizadorProfissional1);
      assertEquals(5, utilizadorProfissional1.getAltura());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      UtilizadorProfissional utilizadorProfissional1 = (UtilizadorProfissional)utilizadorProfissional0.clone();
      utilizadorProfissional1.setPeso((-812.909601542229));
      boolean boolean0 = utilizadorProfissional0.equals(utilizadorProfissional1);
      assertEquals((-812.909601542229), utilizadorProfissional1.getPeso(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("P5H16DM9_+4gSas_c", "P5H16DM9_+4gSas_c", "5", 1481, 113, 7, localDate0, 'h');
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional(utilizadorProfissional0);
      utilizadorProfissional1.setFreqCardiaca((-2443));
      boolean boolean0 = utilizadorProfissional0.equals(utilizadorProfissional1);
      assertEquals((-2443), utilizadorProfissional1.getFreqCardiaca());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorProfissional utilizadorProfissional1 = (UtilizadorProfissional)utilizadorProfissional0.utilizadorNumPeriodo(localDate0, localDate0);
      utilizadorProfissional1.setCodUtilizador((-208));
      boolean boolean0 = utilizadorProfissional0.equals(utilizadorProfissional1);
      assertEquals((-208), utilizadorProfissional1.getCodUtilizador());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofYearDay(6, 203);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("", "", (String) null, (-1698), (-1698), 861, localDate0, 'S');
      Abdominais abdominais0 = new Abdominais();
      abdominais0.geraAtividade(utilizadorProfissional0, 0.0);
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertEquals(861, utilizadorProfissional0.getAltura());
      assertEquals((-1698.0), utilizadorProfissional0.getPeso(), 0.01);
      assertEquals((-1698), utilizadorProfissional0.getFreqCardiaca());
      assertEquals('S', utilizadorProfissional0.getGenero());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("", "", "", 0, 0, 0, localDate0, 'o');
      Trail trail0 = new Trail();
      Trail trail1 = (Trail)trail0.geraAtividade(utilizadorProfissional0, 0.2);
      assertEquals(4.724464023400001E9, trail1.getDistancia(), 0.01);
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertEquals('o', utilizadorProfissional0.getGenero());
      assertEquals(0, utilizadorProfissional0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      Month month0 = Month.JUNE;
      LocalDate localDate0 = MockLocalDate.of(5, month0, 5);
      Period period0 = Period.of(1385, 0, 1);
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(7);
      LocalDate localDate1 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      // Undeclared exception!
      try { 
        utilizadorPraticanteOcasional0.planoTreinoMaisCalorias(localDate1, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      LocalDate localDate0 = MockLocalDate.ofYearDay((-717), 1);
      BenchPress benchPress0 = new BenchPress();
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) benchPress0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate1 = MockLocalDate.now(clock0);
      BiFunction<Atividade, Utilizador, String> biFunction0 = (BiFunction<Atividade, Utilizador, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      utilizadorPraticanteOcasional0.infoDasAtividadesUtilizadorNumPeriodoQueRespeitamP(localDate1, localDate0, predicate0, biFunction0, (Utilizador) utilizadorProfissional0);
      assertEquals(0.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals(0, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals('\u0000', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(0, utilizadorPraticanteOcasional0.getAltura());
      assertEquals(0, utilizadorPraticanteOcasional0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      LocalDate localDate0 = MockLocalDate.now();
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalDate localDate1 = MockLocalDate.now(zoneId0);
      utilizadorProfissional0.allMetrosAltimetria(localDate1, localDate0);
      assertEquals(0, utilizadorProfissional0.getAltura());
      assertEquals(0, utilizadorProfissional0.getCodUtilizador());
      assertEquals('\u0000', utilizadorProfissional0.getGenero());
      assertEquals(0, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalDate localDate0 = MockLocalDate.now(zoneId0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("Projeto.Flexoes", "Projeto.AtivDistAltimetria", " kilos\nAltura: ", 0, 1825, 0, localDate0, 'l');
      Clock clock0 = MockClock.system(zoneId0);
      LocalDate localDate1 = MockLocalDate.now(clock0);
      double double0 = utilizadorAmador0.allKmsDistancia(localDate0, localDate1);
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals("Projeto.Flexoes", utilizadorAmador0.getNome());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals("Projeto.AtivDistAltimetria", utilizadorAmador0.getMorada());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals('l', utilizadorAmador0.getGenero());
      assertEquals(" kilos\nAltura: ", utilizadorAmador0.getEmail());
      assertEquals(1825.0, utilizadorAmador0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      LocalDate localDate0 = MockLocalDate.now();
      Period period0 = Period.between(localDate0, localDate0);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate1 = MockIsoChronology.dateNow(isoChronology0);
      double double0 = utilizadorProfissional0.totalCaloriasDispendidas(localDate1, localDate0);
      assertEquals(0.0, double0, 0.01);
      assertEquals('\u0000', utilizadorProfissional0.getGenero());
      assertEquals(0, utilizadorProfissional0.getCodUtilizador());
      assertEquals(0, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals(0, utilizadorProfissional0.getAltura());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      Abdominais abdominais0 = new Abdominais();
      utilizadorProfissional0.addAtividadePlanoTreino((-1200), abdominais0, 4185);
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals(0, utilizadorProfissional0.getCodUtilizador());
      assertEquals(0, utilizadorProfissional0.getAltura());
      assertEquals('\u0000', utilizadorProfissional0.getGenero());
      assertEquals(0, utilizadorProfissional0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("Plano de Treino\nCodigo de Plano de Treino: ", "Plano de Treino\nCodigo de Plano de Treino: ", "Plano de Treino\nCodigo de Plano de Treino: ", 10, 0, 0, localDate0, 'Z');
      PlanoTreino planoTreino0 = new PlanoTreino();
      utilizadorProfissional0.addPlanoTreino(planoTreino0);
      utilizadorProfissional0.getPlanoTreinoId((-855));
      assertEquals('Z', utilizadorProfissional0.getGenero());
      assertEquals(10, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertEquals(0, utilizadorProfissional0.getAltura());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador1 = (UtilizadorAmador)utilizadorAmador0.utilizadorNumPeriodo(localDate0, localDate0);
      assertEquals(0, utilizadorAmador1.getAltura());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals('\u0000', utilizadorAmador1.getGenero());
      assertTrue(utilizadorAmador1.equals((Object)utilizadorAmador0));
      assertEquals(0, utilizadorAmador1.getFreqCardiaca());
      assertEquals(0, utilizadorAmador1.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("Plano de Treino\nCodigo de Plano de Treino: ", "Plano de Treino\nCodigo de Plano de Treino: ", "Plano de Treino\nCodigo de Plano de Treino: ", 10, 0, 3, localDate0, 'Z');
      PlanoTreino planoTreino0 = new PlanoTreino();
      utilizadorProfissional0.addPlanoTreino(planoTreino0);
      Period period0 = Period.ofYears(3);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate1 = MockIsoChronology.dateNow(isoChronology0);
      List<PlanoTreino> list0 = utilizadorProfissional0.planosTreinos(localDate0, localDate1);
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertEquals('Z', utilizadorProfissional0.getGenero());
      assertEquals(10, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(3, utilizadorProfissional0.getAltura());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      double double0 = utilizadorAmador0.getPeso();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofYearDay((-717), 1);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador(" kilos\nAltura: ", " kilos\nAltura: ", " kilos\nAltura: ", 1, (-717), 1, localDate0, '+');
      double double0 = utilizadorAmador0.getPeso();
      assertEquals(1, utilizadorAmador0.getFreqCardiaca());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals(1, utilizadorAmador0.getAltura());
      assertEquals('+', utilizadorAmador0.getGenero());
      assertEquals((-717.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador((String) null, "", "", 0, 0, 0, localDate0, '@');
      String string0 = utilizadorAmador0.getNome();
      assertEquals('@', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertNull(string0);
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      utilizadorPraticanteOcasional0.getNome();
      assertEquals('\u0000', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(0, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals(0, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals(0.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals(0, utilizadorPraticanteOcasional0.getAltura());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("Plano de Treino\nCodigo de Plano de Treino: ", (String) null, (String) null, 10, 0, 3, (LocalDate) null, 'Z');
      String string0 = utilizadorProfissional0.getMorada();
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertNull(string0);
      assertEquals(3, utilizadorProfissional0.getAltura());
      assertEquals(10, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals('Z', utilizadorProfissional0.getGenero());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      utilizadorPraticanteOcasional0.getMorada();
      assertEquals(0, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals(0, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals(0.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals('\u0000', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(0, utilizadorPraticanteOcasional0.getAltura());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      int int0 = utilizadorPraticanteOcasional0.getIdade();
      assertEquals(0, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals(0.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals(0, int0);
      assertEquals(0, utilizadorPraticanteOcasional0.getAltura());
      assertEquals(0, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals('\u0000', utilizadorPraticanteOcasional0.getGenero());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional((String) null, (String) null, (String) null, (-1134), (-1692), (-1134), localDate0, 'b');
      System.setCurrentTimeMillis(7L);
      int int0 = utilizadorPraticanteOcasional0.getIdade();
      assertEquals((-1692.0), utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals((-1134), utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals((-44), int0);
      assertEquals((-1134), utilizadorPraticanteOcasional0.getAltura());
      assertEquals('b', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Period period0 = Period.ZERO;
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("KC@!", "KC@!", "%y!'", 70, 0, 70, localDate0, '4');
      char char0 = utilizadorAmador0.getGenero();
      assertEquals(70, utilizadorAmador0.getAltura());
      assertEquals('4', char0);
      assertEquals(70, utilizadorAmador0.getFreqCardiaca());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals("KC@!", utilizadorAmador0.getNome());
      assertEquals("%y!'", utilizadorAmador0.getEmail());
      assertEquals("KC@!", utilizadorAmador0.getMorada());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("Plano de Treino\nCodigo de Plano de Treino: ", "Plano de Treino\nCodigo de Plano de Treino: ", "Plano de Treino\nCodigo de Plano de Treino: ", 10, 0, 0, localDate0, 'Z');
      char char0 = utilizadorProfissional0.getGenero();
      assertEquals(0, utilizadorProfissional0.getAltura());
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertEquals(10, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals('Z', char0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      int int0 = utilizadorProfissional0.getFreqCardiaca();
      assertEquals(0, int0);
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals(0, utilizadorProfissional0.getCodUtilizador());
      assertEquals(0, utilizadorProfissional0.getAltura());
      assertEquals('\u0000', utilizadorProfissional0.getGenero());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("", "i]{,gtW_", "\nNome: ", (-3339), 0, (-3339), localDate0, '\u0000');
      int int0 = utilizadorProfissional0.getFreqCardiaca();
      assertEquals("\nNome: ", utilizadorProfissional0.getEmail());
      assertEquals("", utilizadorProfissional0.getNome());
      assertEquals("i]{,gtW_", utilizadorProfissional0.getMorada());
      assertEquals((-3339), utilizadorProfissional0.getAltura());
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals((-3339), int0);
      assertEquals('\u0000', utilizadorProfissional0.getGenero());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("", "", "", 0, 0, 0, localDate0, 'o');
      utilizadorProfissional0.getFatorMultiplicativo();
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals(0, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertEquals('o', utilizadorProfissional0.getGenero());
      assertEquals(0, utilizadorProfissional0.getAltura());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional((String) null, (String) null, (String) null, (-1134), (-1692), (-1134), localDate0, 'b');
      utilizadorPraticanteOcasional0.getEmail();
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals('b', utilizadorPraticanteOcasional0.getGenero());
      assertEquals((-1134), utilizadorPraticanteOcasional0.getAltura());
      assertEquals((-1692.0), utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals((-1134), utilizadorPraticanteOcasional0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      utilizadorPraticanteOcasional0.setEmail("\nIdade: ");
      utilizadorPraticanteOcasional0.getEmail();
      assertEquals(0, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals(0, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals(0.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals('\u0000', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(0, utilizadorPraticanteOcasional0.getAltura());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      int int0 = utilizadorAmador0.getCodUtilizador();
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0, int0);
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      LocalDate localDate0 = MockLocalDate.now();
      utilizadorPraticanteOcasional0.setProximoCodigo((-2702));
      assertEquals(0, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals(0.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals('\u0000', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(0, utilizadorPraticanteOcasional0.getAltura());
      assertEquals(0, utilizadorPraticanteOcasional0.getFreqCardiaca());
      
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("", "i]{,gtW_", "\nNome: ", (-3339), 0, (-3339), localDate0, '\u0000');
      int int0 = utilizadorProfissional0.getCodUtilizador();
      assertEquals('\u0000', utilizadorProfissional0.getGenero());
      assertEquals("\nNome: ", utilizadorProfissional0.getEmail());
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals("", utilizadorProfissional0.getNome());
      assertEquals("i]{,gtW_", utilizadorProfissional0.getMorada());
      assertEquals((-2702), int0);
      assertEquals((-3339), utilizadorProfissional0.getFreqCardiaca());
      assertEquals((-3339), utilizadorProfissional0.getAltura());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional((String) null, (String) null, "7O{c4i'+P]Xtc|3-lK", (-124), (-124), 7, localDate0, '5');
      double double0 = utilizadorPraticanteOcasional0.getBMR();
      assertEquals((-124), utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals((-1196.25), double0, 0.01);
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals('5', utilizadorPraticanteOcasional0.getGenero());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("Plano de Treino\nCodigo de Plano de Treino: ", "Plano de Treino\nCodigo de Plano de Treino: ", "Plano de Treino\nCodigo de Plano de Treino: ", 10, 0, 3, localDate0, 'Z');
      PlanoTreino planoTreino0 = new PlanoTreino();
      utilizadorProfissional0.addPlanoTreino(planoTreino0);
      utilizadorProfissional0.getAtividadesPlanoTreino();
      assertEquals(10, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(3, utilizadorProfissional0.getAltura());
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertEquals('Z', utilizadorProfissional0.getGenero());
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "", "", 0, 0, 0, localDate0, 'L');
      Trail trail0 = new Trail();
      utilizadorAmador0.addAtividade(trail0);
      utilizadorAmador0.getAtividadesIsoladas();
      assertEquals('L', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("Plano de Treino\nCodigo de Plano de Treino: ", "Plano de Treino\nCodigo de Plano de Treino: ", "Plano de Treino\nCodigo de Plano de Treino: ", 10, 0, 0, localDate0, 'Z');
      int int0 = utilizadorProfissional0.getAltura();
      assertEquals('Z', utilizadorProfissional0.getGenero());
      assertEquals(0, int0);
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertEquals(10, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("Plano de Treino\nCodigo de Plano de Treino: ", "Plano de Treino\nCodigo de Plano de Treino: ", "Plano de Treino\nCodigo de Plano de Treino: ", 10, 0, 3, localDate0, 'Z');
      int int0 = utilizadorProfissional0.getAltura();
      assertEquals(3, int0);
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals(10, utilizadorProfissional0.getFreqCardiaca());
      assertEquals('Z', utilizadorProfissional0.getGenero());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      utilizadorProfissional0.equals(utilizadorProfissional0);
      assertEquals('\u0000', utilizadorProfissional0.getGenero());
      assertEquals(0, utilizadorProfissional0.getCodUtilizador());
      assertEquals(0, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(0, utilizadorProfissional0.getAltura());
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) clock0);
      utilizadorPraticanteOcasional0.atividadesIsoladas(localDate0, localDate0, predicate0);
      assertEquals(0.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals(0, utilizadorPraticanteOcasional0.getAltura());
      assertEquals(0, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals('\u0000', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(0, utilizadorPraticanteOcasional0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      Period period0 = Period.ofMonths(0);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("\nAtividades: \n", "#r-M[rX `zBYJr8lto$", "", 0, 76, 0, localDate0, 'C');
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId(2689);
      Abdominais abdominais0 = new Abdominais();
      planoTreino0.addAtividade(abdominais0, 76);
      utilizadorProfissional0.addPlanoTreino(planoTreino0);
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals(0, utilizadorAmador0.getAltura());
      
      List<Atividade> list0 = utilizadorProfissional0.allAtividades(localDate0, localDate0);
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertEquals("", utilizadorProfissional0.getEmail());
      assertEquals(76, list0.size());
      assertEquals("\nAtividades: \n", utilizadorProfissional0.getNome());
      assertEquals(0, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(0, utilizadorProfissional0.getAltura());
      assertEquals(76.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals('C', utilizadorProfissional0.getGenero());
      assertEquals("#r-M[rX `zBYJr8lto$", utilizadorProfissional0.getMorada());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      // Undeclared exception!
      try { 
        utilizadorAmador0.utilizadorNumPeriodo(localDate0, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      // Undeclared exception!
      try { 
        utilizadorPraticanteOcasional0.totalCaloriasDispendidas((LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("Plano de Treino\nCodigo de Plano de Treino: ", (String) null, (String) null, 10, 0, 3, (LocalDate) null, 'Z');
      // Undeclared exception!
      try { 
        utilizadorProfissional0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("Plano de Treino\nCodigo de Plano de Treino: ", "Plano de Treino\nCodigo de Plano de Treino: ", "Plano de Treino\nCodigo de Plano de Treino: ", 10, 0, 0, localDate0, 'Z');
      PlanoTreino planoTreino0 = new PlanoTreino();
      utilizadorProfissional0.addPlanoTreino(planoTreino0);
      // Undeclared exception!
      try { 
        utilizadorProfissional0.planosTreinos((LocalDate) null, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.time.chrono.ChronoLocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      LocalDate localDate0 = utilizadorProfissional0.getDataNascimento();
      // Undeclared exception!
      try { 
        utilizadorProfissional0.numeroAtividades(localDate0, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) null);
      BiFunction<Atividade, Utilizador, String> biFunction0 = (BiFunction<Atividade, Utilizador, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "Utilizador\nCodigo de Utilizador: ", "", 0, 0, (-2870), (LocalDate) null, 'g');
      // Undeclared exception!
      try { 
        utilizadorPraticanteOcasional0.infoDasAtividadesUtilizadorNumPeriodoQueRespeitamP((LocalDate) null, (LocalDate) null, predicate0, biFunction0, (Utilizador) utilizadorAmador0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) utilizadorProfissional0);
      // Undeclared exception!
      try { 
        utilizadorProfissional0.infoDasAtividadesNumPeriodoQueRespeitamP((LocalDate) null, (LocalDate) null, predicate0, (Function<Atividade, Trail>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("\nTipo de atividade: Leg press\n", "Lz[?.", "Z,wILhtLr|FF Ed1'", 345, (-4502), 345, (LocalDate) null, '@');
      // Undeclared exception!
      try { 
        utilizadorAmador0.getIdade();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("\"nS.", "", "", 1871, 10, (-700), (LocalDate) null, 'G');
      // Undeclared exception!
      try { 
        utilizadorProfissional0.getBMR();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      PlanoTreino planoTreino0 = new PlanoTreino((LocalDate) null);
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) planoTreino0);
      // Undeclared exception!
      try { 
        utilizadorAmador0.atividadesNumPeriodoQueRespeitamP((LocalDate) null, (LocalDate) null, predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      // Undeclared exception!
      try { 
        utilizadorAmador0.allMetrosAltimetria((LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      // Undeclared exception!
      try { 
        utilizadorProfissional0.allKmsDistancia((LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      // Undeclared exception!
      try { 
        utilizadorAmador0.addPlanoTreino((PlanoTreino) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      // Undeclared exception!
      try { 
        utilizadorPraticanteOcasional0.addAtividadePlanoTreino(0, (Atividade) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.PlanoTreino", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      // Undeclared exception!
      try { 
        utilizadorAmador0.addAtividade((Atividade) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      double double0 = utilizadorAmador0.getBMR();
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      LocalDate localDate0 = MockLocalDate.now();
      utilizadorPraticanteOcasional0.atividadesNumPeriodoQueRespeitamP(localDate0, localDate0, (Predicate<Atividade>) null);
      assertEquals(0, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals(0, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals('\u0000', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(0, utilizadorPraticanteOcasional0.getAltura());
      assertEquals(0.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("Plano de Treino\nCodigo de Plano de Treino: ", "Plano de Treino\nCodigo de Plano de Treino: ", "Plano de Treino\nCodigo de Plano de Treino: ", 10, 0, 0, localDate0, 'Z');
      Function<Atividade, UtilizadorPraticanteOcasional> function0 = (Function<Atividade, UtilizadorPraticanteOcasional>) mock(Function.class, new ViolatedAssumptionAnswer());
      utilizadorProfissional0.infoDasAtividadesNumPeriodoQueRespeitamP(localDate0, localDate0, (Predicate<Atividade>) null, function0);
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals('Z', utilizadorProfissional0.getGenero());
      assertEquals(10, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(0, utilizadorProfissional0.getAltura());
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Period period0 = Period.of(0, 0, 3);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional(" anos\nGenero: ", " anos\nGenero: ", "", (-2710), 7, 0, localDate0, 'C');
      double double0 = utilizadorProfissional0.getPeso();
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertEquals('C', utilizadorProfissional0.getGenero());
      assertEquals(7.0, double0, 0.01);
      assertEquals(" anos\nGenero: ", utilizadorProfissional0.getNome());
      assertEquals(" anos\nGenero: ", utilizadorProfissional0.getMorada());
      assertEquals(0, utilizadorProfissional0.getAltura());
      assertEquals((-2710), utilizadorProfissional0.getFreqCardiaca());
      assertEquals("", utilizadorProfissional0.getEmail());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("r&h0H*uH'!2,", "J", "QkrDk3@,Wv|sG", (-1), (-1), (-1), localDate0, '.');
      char char0 = utilizadorAmador0.getGenero();
      assertEquals('.', char0);
      assertEquals((-1.0), utilizadorAmador0.getPeso(), 0.01);
      assertEquals((-1), utilizadorAmador0.getFreqCardiaca());
      assertEquals("QkrDk3@,Wv|sG", utilizadorAmador0.getEmail());
      assertEquals((-1), utilizadorAmador0.getAltura());
      assertEquals("J", utilizadorAmador0.getMorada());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals("r&h0H*uH'!2,", utilizadorAmador0.getNome());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(3934L);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("=9RYB", "=9RYB", "=9RYB", 304, 0, 304, localDate0, '\'');
      int int0 = utilizadorProfissional0.getCodUtilizador();
      assertEquals(1, int0);
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals(304, utilizadorProfissional0.getAltura());
      assertEquals(304, utilizadorProfissional0.getFreqCardiaca());
      assertEquals('\'', utilizadorProfissional0.getGenero());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      utilizadorPraticanteOcasional0.getAtividadesIsoladas();
      assertEquals(0, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals(0, utilizadorPraticanteOcasional0.getAltura());
      assertEquals('\u0000', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(0, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals(0.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("uATHJQ", "uATHJQ", "Projeto.Corrida", 2, 111, 111, (LocalDate) null, '|');
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) null);
      // Undeclared exception!
      try { 
        utilizadorPraticanteOcasional0.atividadesIsoladas((LocalDate) null, (LocalDate) null, predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("Plano de Treino\nCodigo de Plano de Treino: ", "Plano de Treino\nCodigo de Plano de Treino: ", "Plano de Treino\nCodigo de Plano de Treino: ", 10, 0, 3, localDate0, 'Z');
      int int0 = utilizadorProfissional0.getFreqCardiaca();
      assertEquals(10, int0);
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertEquals(3, utilizadorProfissional0.getAltura());
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals('Z', utilizadorProfissional0.getGenero());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("r&h0H*uH'!2,", "J", "QkrDk3@,Wv|sG", (-1), (-1), (-1), localDate0, '.');
      int int0 = utilizadorAmador0.getAltura();
      assertEquals((-1), utilizadorAmador0.getFreqCardiaca());
      assertEquals("r&h0H*uH'!2,", utilizadorAmador0.getNome());
      assertEquals((-1.0), utilizadorAmador0.getPeso(), 0.01);
      assertEquals("J", utilizadorAmador0.getMorada());
      assertEquals("QkrDk3@,Wv|sG", utilizadorAmador0.getEmail());
      assertEquals('.', utilizadorAmador0.getGenero());
      assertEquals((-1), int0);
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("Plano de Treino\nCodigo de Plano de Treino: ", "Plano de Treino\nCodigo de Plano de Treino: ", "Plano de Treino\nCodigo de Plano de Treino: ", 10, 0, 3, localDate0, 'Z');
      int int0 = utilizadorProfissional0.getIdade();
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals('Z', utilizadorProfissional0.getGenero());
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertEquals(10, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(3, utilizadorProfissional0.getAltura());
      assertEquals(44, int0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("Plano de Treino\nCodigo de Plano de Treino: ", "Plano de Treino\nCodigo de Plano de Treino: ", "Plano de Treino\nCodigo de Plano de Treino: ", 10, 0, 0, localDate0, 'Z');
      utilizadorProfissional0.planosTreinos((LocalDate) null, localDate0);
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals(0, utilizadorProfissional0.getAltura());
      assertEquals(10, utilizadorProfissional0.getFreqCardiaca());
      assertEquals('Z', utilizadorProfissional0.getGenero());
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional(" anos\nGenero: ", "Projeto.PlanoTreino$AtividadeIteracoes", "Projeto.PlanoTreino$AtividadeIteracoes", 3, 5, (-2146746694), (LocalDate) null, '9');
      utilizadorProfissional0.getDataNascimento();
      assertEquals('9', utilizadorProfissional0.getGenero());
      assertEquals("Projeto.PlanoTreino$AtividadeIteracoes", utilizadorProfissional0.getMorada());
      assertEquals(3, utilizadorProfissional0.getFreqCardiaca());
      assertEquals("Projeto.PlanoTreino$AtividadeIteracoes", utilizadorProfissional0.getEmail());
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertEquals(5.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals((-2146746694), utilizadorProfissional0.getAltura());
      assertEquals(" anos\nGenero: ", utilizadorProfissional0.getNome());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      utilizadorPraticanteOcasional0.getEmail();
      assertEquals(0.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals(0, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals(0, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals(0, utilizadorPraticanteOcasional0.getAltura());
      assertEquals('\u0000', utilizadorPraticanteOcasional0.getGenero());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Period period0 = Period.ofWeeks(587);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional(" ", " ", "zW}]}(0WA", 4, (-161), (-1136), localDate0, '9');
      String string0 = utilizadorProfissional0.getNome();
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertEquals(" ", utilizadorProfissional0.getMorada());
      assertEquals(4, utilizadorProfissional0.getFreqCardiaca());
      assertEquals((-1136), utilizadorProfissional0.getAltura());
      assertEquals("zW}]}(0WA", utilizadorProfissional0.getEmail());
      assertEquals('9', utilizadorProfissional0.getGenero());
      assertEquals(" ", string0);
      assertEquals((-161.0), utilizadorProfissional0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("Plano de Treino\nCodigo de Plano de Treino: ", "Plano de Treino\nCodigo de Plano de Treino: ", "Plano de Treino\nCodigo de Plano de Treino: ", 10, 0, 3, localDate0, 'Z');
      utilizadorProfissional0.getMorada();
      assertEquals(10, utilizadorProfissional0.getFreqCardiaca());
      assertEquals('Z', utilizadorProfissional0.getGenero());
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals(3, utilizadorProfissional0.getAltura());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      utilizadorProfissional0.getAtividadesPlanoTreino();
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals(0, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(0, utilizadorProfissional0.getCodUtilizador());
      assertEquals('\u0000', utilizadorProfissional0.getGenero());
      assertEquals(0, utilizadorProfissional0.getAltura());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      UtilizadorAmador utilizadorAmador1 = new UtilizadorAmador();
      utilizadorAmador1.setGenero('B');
      boolean boolean0 = utilizadorAmador1.equals(utilizadorAmador0);
      assertEquals('B', utilizadorAmador1.getGenero());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      UtilizadorAmador utilizadorAmador1 = new UtilizadorAmador();
      assertTrue(utilizadorAmador1.equals((Object)utilizadorAmador0));
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      utilizadorAmador1.setDataNascimento(localDate0);
      boolean boolean0 = utilizadorAmador1.equals(utilizadorAmador0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      UtilizadorProfissional utilizadorProfissional1 = (UtilizadorProfissional)utilizadorProfissional0.clone();
      utilizadorProfissional1.setAltura((-3));
      boolean boolean0 = utilizadorProfissional0.equals(utilizadorProfissional1);
      assertEquals((-3), utilizadorProfissional1.getAltura());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      UtilizadorAmador utilizadorAmador1 = new UtilizadorAmador();
      utilizadorAmador1.setFreqCardiaca((-161));
      boolean boolean0 = utilizadorAmador1.equals(utilizadorAmador0);
      assertEquals((-161), utilizadorAmador1.getFreqCardiaca());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional(utilizadorProfissional0);
      assertTrue(utilizadorProfissional1.equals((Object)utilizadorProfissional0));
      
      utilizadorProfissional0.setEmail("Projeto.Flexoes");
      boolean boolean0 = utilizadorProfissional0.equals(utilizadorProfissional1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      UtilizadorAmador utilizadorAmador1 = new UtilizadorAmador(utilizadorAmador0);
      assertTrue(utilizadorAmador1.equals((Object)utilizadorAmador0));
      
      utilizadorAmador1.setMorada("qH:<MFEFK@BMo<^9xU]");
      boolean boolean0 = utilizadorAmador1.equals(utilizadorAmador0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      LocalDate localDate0 = MockLocalDate.now();
      Object object0 = utilizadorProfissional0.utilizadorNumPeriodo(localDate0, localDate0);
      assertTrue(object0.equals((Object)utilizadorProfissional0));
      
      utilizadorProfissional0.setNome("\nL`Peso: ");
      boolean boolean0 = utilizadorProfissional0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(77);
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("(mG&jYLdvV.-A_U&dZ", "(mG&jYLdvV.-A_U&dZ", "(mG&jYLdvV.-A_U&dZ", 77, 77, 77, localDate0, 'F');
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional1 = new UtilizadorPraticanteOcasional("(mG&jYLdvV.-A_U&dZ", "(mG&jYLdvV.-A_U&dZ", "(mG&jYLdvV.-A_U&dZ", 77, 'F', 77, localDate0, 'F');
      boolean boolean0 = utilizadorPraticanteOcasional0.equals(utilizadorPraticanteOcasional1);
      assertEquals(77, utilizadorPraticanteOcasional1.getFreqCardiaca());
      assertFalse(boolean0);
      assertEquals('F', utilizadorPraticanteOcasional1.getGenero());
      assertEquals(2, utilizadorPraticanteOcasional1.getCodUtilizador());
      assertEquals(70.0, utilizadorPraticanteOcasional1.getPeso(), 0.01);
      assertEquals(77, utilizadorPraticanteOcasional1.getAltura());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorProfissional utilizadorProfissional1 = (UtilizadorProfissional)utilizadorProfissional0.utilizadorNumPeriodo(localDate0, localDate0);
      boolean boolean0 = utilizadorProfissional0.equals(utilizadorProfissional1);
      assertEquals(0, utilizadorProfissional1.getAltura());
      assertEquals('\u0000', utilizadorProfissional1.getGenero());
      assertEquals(0, utilizadorProfissional1.getFreqCardiaca());
      assertTrue(boolean0);
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals(0, utilizadorProfissional1.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("Plano de Treino\nCodigo de Plano de Treino: ", "Plano de Treino\nCodigo de Plano de Treino: ", "Plano de Treino\nCodigo de Plano de Treino: ", 10, 0, 0, localDate0, 'Z');
      PlanoTreino planoTreino0 = new PlanoTreino();
      utilizadorProfissional0.addPlanoTreino(planoTreino0);
      String string0 = utilizadorProfissional0.toString();
      assertEquals("Utilizador\nCodigo de Utilizador: 1\nNome: Plano de Treino\nCodigo de Plano de Treino: \nMorada: Plano de Treino\nCodigo de Plano de Treino: \nEmail: Plano de Treino\nCodigo de Plano de Treino: \nFrequencia Cardiaca: 10 bpm\nPeso: 0.0 kilos\nAltura: 0 centimetros\nData de nascimento 01/01/1970\nIdade: 44 anos\nGenero: Z\nAtividades: \n\nPlanos de treino: \nPlano de Treino\nCodigo de Plano de Treino: 0\nData de realiza\u00E7ao: 2014-02-14\nAtividades e suas itera\u00E7oes: \n\nTipo de Utilizador: Profissional\n", string0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "", "", 0, 0, 0, localDate0, 'L');
      Trail trail0 = new Trail();
      utilizadorAmador0.addAtividade(trail0);
      String string0 = utilizadorAmador0.toString();
      assertEquals("Utilizador\nCodigo de Utilizador: 1\nNome: \nMorada: \nEmail: \nFrequencia Cardiaca: 0 bpm\nPeso: 0.0 kilos\nAltura: 0 centimetros\nData de nascimento 14/02/2014\nIdade: 0 anos\nGenero: L\nAtividades: \nAtividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nDistancia: 0.0 metros\nAltimetria: 0.0 metros\nTipo de atividade: Trail\n\nPlanos de treino: \n\nTipo de Utilizador: Amador\n", string0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(77);
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("(mG&jYLdvV.-A_U&dZ", "(mG&jYLdvV.-A_U&dZ", "(mG&jYLdvV.-A_U&dZ", 77, 77, 77, localDate0, 'F');
      double double0 = utilizadorPraticanteOcasional0.getBMR();
      assertEquals(77, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals(1090.25, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("6ByI*/ALPFuqP@", "6ByI*/ALPFuqP@", "6ByI*/ALPFuqP@", 77, 77, 77, localDate0, 'M');
      double double0 = utilizadorPraticanteOcasional0.getBMR();
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals(77, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals(1256.25, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      Period period0 = Period.of(2838, 2838, 2838);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("\nAtividades: \n", "\nAtividades: \n", "xwD", 2838, 2838, 2838, localDate0, '6');
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId(2838);
      utilizadorProfissional0.addPlanoTreino(planoTreino0);
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals(0, utilizadorAmador0.getAltura());
      
      List<Atividade> list0 = utilizadorProfissional0.allAtividades(localDate0, localDate0);
      assertEquals("xwD", utilizadorProfissional0.getEmail());
      assertEquals("\nAtividades: \n", utilizadorProfissional0.getNome());
      assertEquals(2838, utilizadorProfissional0.getFreqCardiaca());
      assertTrue(list0.isEmpty());
      assertEquals('6', utilizadorProfissional0.getGenero());
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertEquals(2838, utilizadorProfissional0.getAltura());
      assertEquals("\nAtividades: \n", utilizadorProfissional0.getMorada());
      assertEquals(2838.0, utilizadorProfissional0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(21);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("Plano de Treino\nCodigo de Plano de Treino: ", "Plano de Treino\nCodigo de Plano de Treino: ", "Plano de Treino\nCodigo de Plano de Treino: ", 21, 21, 21, localDate0, 'Z');
      PlanoTreino planoTreino0 = new PlanoTreino();
      utilizadorProfissional0.addPlanoTreino(planoTreino0);
      utilizadorProfissional0.getPlanoTreinoId(21);
      assertEquals(21, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertEquals('Z', utilizadorProfissional0.getGenero());
      assertEquals(21.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals(21, utilizadorProfissional0.getAltura());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      PlanoTreino planoTreino0 = utilizadorProfissional0.getPlanoTreinoId((-3));
      utilizadorProfissional0.addPlanoTreino(planoTreino0);
      UtilizadorProfissional utilizadorProfissional1 = (UtilizadorProfissional)utilizadorProfissional0.clone();
      assertEquals(0, utilizadorProfissional1.getFreqCardiaca());
      assertTrue(utilizadorProfissional1.equals((Object)utilizadorProfissional0));
      assertEquals(0, utilizadorProfissional1.getCodUtilizador());
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals(0, utilizadorProfissional1.getAltura());
      assertEquals('\u0000', utilizadorProfissional1.getGenero());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "", "", 0, 0, 0, localDate0, 'L');
      Trail trail0 = new Trail();
      utilizadorAmador0.addAtividade(trail0);
      UtilizadorAmador utilizadorAmador1 = (UtilizadorAmador)utilizadorAmador0.clone();
      assertEquals(0, utilizadorAmador1.getAltura());
      assertEquals('L', utilizadorAmador1.getGenero());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals(1, utilizadorAmador1.getCodUtilizador());
      assertEquals(0, utilizadorAmador1.getFreqCardiaca());
      assertTrue(utilizadorAmador1.equals((Object)utilizadorAmador0));
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("Plano de Treino\nCodigo de Plano de Treino: ", "Plano de Treino\nCodigo de Plano de Treino: ", "Plano de Treino\nCodigo de Plano de Treino: ", 10, 0, 0, localDate0, 'Z');
      utilizadorProfissional0.numeroAtividades(localDate0, localDate0);
      assertEquals(10, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(0, utilizadorProfissional0.getAltura());
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals('Z', utilizadorProfissional0.getGenero());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("Plano de Treino\nCodigo de Plano de Treino: ", "Plano de Treino\nCodigo de Plano de Treino: ", "Plano de Treino\nCodigo de Plano de Treino: ", 10, 0, 0, localDate0, 'Z');
      PlanoTreino planoTreino0 = new PlanoTreino();
      utilizadorProfissional0.addPlanoTreino(planoTreino0);
      utilizadorProfissional0.getPlanoTreinoId(0);
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals(10, utilizadorProfissional0.getFreqCardiaca());
      assertEquals('Z', utilizadorProfissional0.getGenero());
      assertEquals(0, utilizadorProfissional0.getAltura());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      LocalDate localDate0 = MockLocalDate.now();
      Object object0 = utilizadorProfissional0.utilizadorNumPeriodo(localDate0, localDate0);
      utilizadorProfissional0.setPeso((-208));
      boolean boolean0 = utilizadorProfissional0.equals(object0);
      assertEquals((-208.0), utilizadorProfissional0.getPeso(), 0.01);
      assertFalse(boolean0);
  }
}
