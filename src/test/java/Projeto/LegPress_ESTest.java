/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 15:28:30 GMT 2025
 */

package Projeto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Projeto.Atividade;
import Projeto.LegPress;
import Projeto.Utilizador;
import Projeto.UtilizadorAmador;
import Projeto.UtilizadorPraticanteOcasional;
import Projeto.UtilizadorProfissional;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Month;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LegPress_ESTest extends LegPress_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LegPress legPress0 = new LegPress(localDateTime0, localTime0, (-14), (-14), (-14));
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      utilizadorPraticanteOcasional0.setPeso((-14));
      utilizadorPraticanteOcasional0.addAtividade(legPress0);
      LegPress legPress1 = (LegPress)legPress0.geraAtividade(utilizadorPraticanteOcasional0, (-166.23930555555546));
      assertEquals((-11.200000000000001), legPress1.getPeso(), 0.01);
      assertEquals(5129, legPress1.getRepeticoes());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LegPress legPress0 = new LegPress(localDateTime0, localTime0, 19, 19, 19);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      utilizadorPraticanteOcasional0.addAtividade(legPress0);
      LegPress legPress1 = (LegPress)legPress0.geraAtividade(utilizadorPraticanteOcasional0, Double.NaN);
      assertEquals(15.200000000000001, legPress1.getPeso(), 0.01);
      assertEquals(0, legPress1.getRepeticoes());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      legPress0.setProximoCodigo(0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      Atividade atividade0 = legPress0.geraAtividade(utilizadorPraticanteOcasional0, 0);
      assertTrue(atividade0.equals((Object)legPress0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      LocalDate localDate0 = MockLocalDate.now();
      legPress0.setProximoCodigo((-501));
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "", "", 3022, 3022, 3022, localDate0, 'u');
      LegPress legPress1 = (LegPress)legPress0.geraAtividade(utilizadorAmador0, 0L);
      assertEquals(0, legPress1.getRepeticoes());
      assertEquals(3022.0, legPress1.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Month month0 = Month.JULY;
      LocalDateTime localDateTime0 = MockLocalDateTime.of((-2340), month0, 1, 1, 1, 0);
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalTime localTime0 = MockLocalTime.now(zoneId0);
      LegPress legPress0 = new LegPress(localDateTime0, localTime0, 2267, (-1), (-227.0));
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      System.setCurrentTimeMillis((-1));
      double double0 = legPress0.consumoCalorias(utilizadorProfissional0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("aJ1nH4mJ_bQ", "", "", 3548, 3548, 3548, localDate0, 'Y');
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(3548);
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      LegPress legPress0 = new LegPress(localDateTime0, localTime0, (-3386), (-3386), 0.0);
      double double0 = legPress0.consumoCalorias(utilizadorProfissional0);
      assertEquals((-4.553534499051748E-11), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours((-1));
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      LegPress legPress0 = new LegPress((LocalDateTime) null, localTime0, (-1), (-1), 0.0);
      // Undeclared exception!
      try { 
        legPress0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      // Undeclared exception!
      try { 
        legPress0.geraAtividade((Utilizador) null, (-1759.3));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.LegPress", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      legPress0.setTempo((LocalTime) null);
      LegPress legPress1 = new LegPress(legPress0);
      // Undeclared exception!
      try { 
        legPress1.equals(legPress0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      legPress0.setTempo((LocalTime) null);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional((String) null, "", "", (-1647), 0, 0, localDate0, 'm');
      // Undeclared exception!
      try { 
        legPress0.consumoCalorias(utilizadorPraticanteOcasional0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.AtivRepeticoes", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LegPress legPress0 = null;
      try {
        legPress0 = new LegPress((LegPress) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      LegPress legPress1 = new LegPress();
      boolean boolean0 = legPress0.equals(legPress1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      boolean boolean0 = legPress0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      boolean boolean0 = legPress0.equals(legPress0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LegPress legPress0 = new LegPress(localDateTime0, localTime0, (-14), (-14), (-14));
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) utilizadorPraticanteOcasional0);
      boolean boolean0 = legPress0.equals(predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LegPress legPress0 = new LegPress(localDateTime0, localTime0, (-14), (-14), (-14));
      String string0 = legPress0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 20:21:21.320\nFrequencia Cardiaca: -14 bpm\nRepeti\u00E7oes: -14\nPeso: -14.0 kilos\nTipo de atividade: Leg press\n", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      Object object0 = legPress0.clone();
      assertNotSame(object0, legPress0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("", "", "", (-1), 647, 647, localDate0, '3');
      // Undeclared exception!
      try { 
        legPress0.consumoCalorias(utilizadorProfissional0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("Projeto.AtivRepeticoes", e);
      }
  }
}
