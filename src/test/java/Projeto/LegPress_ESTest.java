/*
 * This file was automatically generated by EvoSuite
 * Wed May 28 22:07:40 GMT 2025
 */

package Projeto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Projeto.Atividade;
import Projeto.Flexoes;
import Projeto.LegPress;
import Projeto.Utilizador;
import Projeto.UtilizadorAmador;
import Projeto.UtilizadorPraticanteOcasional;
import Projeto.UtilizadorProfissional;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Month;
import java.time.ZoneId;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LegPress_ESTest extends LegPress_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("wgUQ9Sl", "wgUQ9Sl", "", 77, 690, 1, localDate0, 'L');
      LegPress legPress1 = (LegPress)legPress0.geraAtividade(utilizadorPraticanteOcasional0, (-901.293768347));
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("wgUQ9Sl", "wgUQ9Sl", "wgUQ9Sl", 690, 1, 1, localDate0, 'L');
      utilizadorAmador0.addAtividade(legPress1);
      assertEquals((-563), legPress1.getRepeticoes());
      
      LegPress legPress2 = (LegPress)legPress0.geraAtividade(utilizadorAmador0, (-4.24276506734576));
      assertEquals((-12), legPress2.getRepeticoes());
      assertEquals(552.0, legPress2.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("wgUQ9Sl", "wgUQ9Sl", "", 77, (-912), 1, localDate0, 'L');
      LegPress legPress1 = (LegPress)legPress0.geraAtividade(utilizadorPraticanteOcasional0, (-901.5847223120627));
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      utilizadorAmador0.addAtividade(legPress1);
      assertEquals(427, legPress1.getRepeticoes());
      
      LegPress legPress2 = (LegPress)legPress0.geraAtividade(utilizadorAmador0, (-4.24276506734576));
      assertEquals((-729.6), legPress2.getPeso(), 0.01);
      assertEquals((-536870912), legPress2.getRepeticoes());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      LocalTime localTime0 = MockLocalTime.now();
      legPress0.setTempo(localTime0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      // Undeclared exception!
      try { 
        legPress0.consumoCalorias(utilizadorPraticanteOcasional0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      String string0 = legPress0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nRepeti\u00E7oes: 0\nPeso: 0.0 kilos\nTipo de atividade: Leg press\n", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      legPress0.setProximoCodigo((-1));
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      Atividade atividade0 = legPress0.geraAtividade(utilizadorAmador0, 0.8);
      legPress0.geraAtividade(utilizadorAmador0, 0.0);
      assertTrue(legPress0.equals((Object)atividade0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Month month0 = Month.APRIL;
      LocalDateTime localDateTime0 = MockLocalDateTime.of(20, month0, 20, 20, 20, 23, 9);
      LocalTime localTime0 = MockLocalTime.now();
      LegPress legPress0 = new LegPress(localDateTime0, localTime0, 23, (-1), 20);
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("eQlJ),&mM", "eQlJ),&mM", "eQlJ),&mM", (-1), 20, 20, localDate0, 'R');
      double double0 = legPress0.consumoCalorias(utilizadorProfissional0);
      assertEquals(661.5645833333332, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Month month0 = Month.APRIL;
      LocalDateTime localDateTime0 = MockLocalDateTime.of(10, month0, 10, 10, 10, 23, 6);
      LocalTime localTime0 = MockLocalTime.now();
      LegPress legPress0 = new LegPress(localDateTime0, localTime0, 23, (-1), 10);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      System.setCurrentTimeMillis(6);
      double double0 = legPress0.consumoCalorias(utilizadorAmador0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      // Undeclared exception!
      try { 
        legPress0.geraAtividade((Utilizador) null, 10.5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.LegPress", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(zoneId0);
      LegPress legPress0 = new LegPress(localDateTime0, (LocalTime) null, (-1509), (-1509), 0.5);
      LegPress legPress1 = new LegPress(legPress0);
      // Undeclared exception!
      try { 
        legPress0.equals(legPress1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LegPress legPress0 = null;
      try {
        legPress0 = new LegPress((LegPress) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      Object object0 = legPress0.clone();
      assertNotSame(object0, legPress0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      LegPress legPress1 = new LegPress(legPress0);
      boolean boolean0 = legPress0.equals(legPress1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      Flexoes flexoes0 = new Flexoes();
      boolean boolean0 = legPress0.equals(flexoes0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      boolean boolean0 = legPress0.equals(legPress0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      boolean boolean0 = legPress0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LegPress legPress0 = new LegPress((LocalDateTime) null, (LocalTime) null, (-548), (-548), (-548));
      // Undeclared exception!
      try { 
        legPress0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      // Undeclared exception!
      try { 
        legPress0.consumoCalorias((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.LegPress", e);
      }
  }
}
