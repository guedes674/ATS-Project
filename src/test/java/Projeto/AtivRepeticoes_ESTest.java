/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 15:31:08 GMT 2025
 */

package Projeto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Projeto.Abdominais;
import Projeto.BenchPress;
import Projeto.BicepCurls;
import Projeto.Flexoes;
import Projeto.LegPress;
import java.time.LocalDateTime;
import java.time.LocalTime;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AtivRepeticoes_ESTest extends AtivRepeticoes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      BicepCurls bicepCurls1 = new BicepCurls(bicepCurls0);
      bicepCurls0.setRepeticoes(5534);
      boolean boolean0 = bicepCurls1.equals(bicepCurls0);
      assertEquals(5534, bicepCurls0.getRepeticoes());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      String string0 = legPress0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nRepeti\u00E7oes: 0\nPeso: 0.0 kilos\nTipo de atividade: Leg press\n", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.of(1, 1);
      BenchPress benchPress0 = new BenchPress((LocalDateTime) null, localTime0, 1, 1152, 0.0);
      int int0 = benchPress0.getRepeticoes();
      assertEquals(1152, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Flexoes flexoes0 = new Flexoes();
      flexoes0.setRepeticoes((-919));
      int int0 = flexoes0.getRepeticoes();
      assertEquals((-919), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.of(1, 0);
      LegPress legPress0 = new LegPress(localDateTime0, localTime0, 1034, 1, 2363.86947488);
      double double0 = legPress0.getFatorRepeticoes(0.0, (-787.9652737336518));
      assertEquals(-0.0, double0, 0.01);
      assertEquals(1, legPress0.getRepeticoes());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.of(1, 0);
      LegPress legPress0 = new LegPress(localDateTime0, localTime0, 1034, 1, 2363.86947488);
      double double0 = legPress0.getFatorRepeticoes(2363.86947488, (-2128.48942));
      assertEquals(5031471.167543035, double0, 0.01);
      assertEquals(1, legPress0.getRepeticoes());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Flexoes flexoes0 = new Flexoes();
      flexoes0.equals(flexoes0);
      assertEquals(0, flexoes0.getRepeticoes());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, (LocalTime) null, 0, 0, 1);
      // Undeclared exception!
      try { 
        bicepCurls0.getFatorRepeticoes(0.0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.AtivRepeticoes", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      // Undeclared exception!
      try { 
        bicepCurls0.getFatorRepeticoes(5534, 0.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("Projeto.AtivRepeticoes", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      abdominais0.setTempo((LocalTime) null);
      Abdominais abdominais1 = new Abdominais();
      // Undeclared exception!
      try { 
        abdominais0.equals(abdominais1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      LegPress legPress1 = new LegPress(legPress0);
      assertTrue(legPress1.equals((Object)legPress0));
      
      legPress0.setFreqCardiaca((-2330));
      boolean boolean0 = legPress1.equals(legPress0);
      assertFalse(legPress1.equals((Object)legPress0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      LegPress legPress1 = new LegPress(legPress0);
      boolean boolean0 = legPress1.equals(legPress0);
      assertTrue(legPress0.equals((Object)legPress1));
      assertEquals(0, legPress1.getRepeticoes());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Flexoes flexoes0 = new Flexoes();
      int int0 = flexoes0.getRepeticoes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(0L);
      BicepCurls bicepCurls0 = new BicepCurls((LocalDateTime) null, localTime0, (-1349), 4, 0L);
      // Undeclared exception!
      try { 
        bicepCurls0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.of(6, 6);
      LegPress legPress0 = new LegPress(localDateTime0, localTime0, 6, 6, 6);
      double double0 = legPress0.getFatorRepeticoes(6, 20);
      assertEquals((-120.0), double0, 0.01);
      assertEquals(6, legPress0.getRepeticoes());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.of(6, 6);
      LegPress legPress0 = new LegPress(localDateTime0, localTime0, 6, 6, 6);
      LegPress legPress1 = new LegPress(legPress0);
      legPress1.setRepeticoes(20);
      boolean boolean0 = legPress1.equals(legPress0);
      assertEquals(20, legPress1.getRepeticoes());
      assertFalse(boolean0);
  }
}
