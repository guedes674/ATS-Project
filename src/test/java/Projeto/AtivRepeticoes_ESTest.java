/*
 * This file was automatically generated by EvoSuite
 * Wed May 28 22:10:18 GMT 2025
 */

package Projeto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Projeto.Abdominais;
import Projeto.BenchPress;
import Projeto.BicepCurls;
import Projeto.Flexoes;
import Projeto.LegPress;
import java.time.Clock;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AtivRepeticoes_ESTest extends AtivRepeticoes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      Abdominais abdominais1 = new Abdominais(abdominais0);
      abdominais1.setRepeticoes(5);
      boolean boolean0 = abdominais1.equals(abdominais0);
      assertEquals(5, abdominais1.getRepeticoes());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      String string0 = abdominais0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nRepeti\u00E7oes: 0\nTipo de atividade: Abdominais\n", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      bicepCurls0.setRepeticoes(465);
      int int0 = bicepCurls0.getRepeticoes();
      assertEquals(465, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(1);
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(0L, 1, zoneOffset0);
      LocalTime localTime0 = MockLocalTime.from(localDateTime0);
      Flexoes flexoes0 = new Flexoes(localDateTime0, localTime0, 1, (-452));
      int int0 = flexoes0.getRepeticoes();
      assertEquals((-452), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.of((-333), 1, 1, 0, 5, 1, 1);
      Clock clock0 = MockClock.systemUTC();
      LocalTime localTime0 = MockLocalTime.now(clock0);
      BenchPress benchPress0 = new BenchPress(localDateTime0, localTime0, 1, 5, 1326.5824156534718);
      double double0 = benchPress0.getFatorRepeticoes(1326.5824156534718, 0);
      assertEquals(5, benchPress0.getRepeticoes());
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Period period0 = Period.ofYears(493);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(976);
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, localTime0, 493, 976, (-320.88504257083));
      double double0 = bicepCurls0.getFatorRepeticoes((-320.88504257083), 976);
      assertEquals(976, bicepCurls0.getRepeticoes());
      assertEquals(313183.8015491301, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.of(3, 2, 2, 3, 3);
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(2);
      Flexoes flexoes0 = new Flexoes(localDateTime0, localTime0, 3, 3);
      double double0 = flexoes0.getFatorRepeticoes(3, 838.6717);
      assertEquals((-1677.3434), double0, 0.01);
      assertEquals(3, flexoes0.getRepeticoes());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      benchPress0.equals(benchPress0);
      assertEquals(0, benchPress0.getRepeticoes());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Flexoes flexoes0 = new Flexoes();
      Object object0 = new Object();
      flexoes0.equals(object0);
      assertEquals(0, flexoes0.getRepeticoes());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.of(4, 4);
      Flexoes flexoes0 = new Flexoes((LocalDateTime) null, localTime0, (-3531), 4);
      // Undeclared exception!
      try { 
        flexoes0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      // Undeclared exception!
      try { 
        benchPress0.getFatorRepeticoes(0.11, 0.11);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("Projeto.AtivRepeticoes", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      int int0 = benchPress0.getRepeticoes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      Abdominais abdominais1 = new Abdominais();
      abdominais1.setRepeticoes(1862);
      boolean boolean0 = abdominais0.equals(abdominais1);
      assertEquals(1862, abdominais1.getRepeticoes());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      LegPress legPress1 = new LegPress(legPress0);
      boolean boolean0 = legPress0.equals(legPress1);
      assertEquals(0, legPress1.getRepeticoes());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LegPress legPress0 = new LegPress((LocalDateTime) null, (LocalTime) null, 1338, 1338, 1);
      Object object0 = legPress0.clone();
      // Undeclared exception!
      try { 
        legPress0.equals(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      BenchPress benchPress1 = new BenchPress(benchPress0);
      assertTrue(benchPress1.equals((Object)benchPress0));
      
      benchPress0.setTempo((LocalTime) null);
      boolean boolean0 = benchPress1.equals(benchPress0);
      assertFalse(benchPress1.equals((Object)benchPress0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, (LocalTime) null, 0, (-150), (-150));
      // Undeclared exception!
      try { 
        bicepCurls0.getFatorRepeticoes((-1853.140342838648), 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.AtivRepeticoes", e);
      }
  }
}
